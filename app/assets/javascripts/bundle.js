/******/ (function(modules) { // webpackBootstrap
/******/  // The module cache
/******/  var installedModules = {};

/******/  // The require function
/******/  function __webpack_require__(moduleId) {

/******/    // Check if module is in cache
/******/    if(installedModules[moduleId])
/******/      return installedModules[moduleId].exports;

/******/    // Create a new module (and put it into the cache)
/******/    var module = installedModules[moduleId] = {
/******/      exports: {},
/******/      id: moduleId,
/******/      loaded: false
/******/    };

/******/    // Execute the module function
/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/    // Flag the module as loaded
/******/    module.loaded = true;

/******/    // Return the exports of the module
/******/    return module.exports;
/******/  }


/******/  // expose the modules object (__webpack_modules__)
/******/  __webpack_require__.m = modules;

/******/  // expose the module cache
/******/  __webpack_require__.c = installedModules;

/******/  // __webpack_public_path__
/******/  __webpack_require__.p = "";

/******/  // Load entry module and return exports
/******/  return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

  window.jQuery = window.$ = __webpack_require__(1);
  __webpack_require__(2);
  __webpack_require__(3);

  __webpack_require__(4);
  __webpack_require__(5);
  __webpack_require__(6);
  window.Tablesort = __webpack_require__(7);
  __webpack_require__(8);
  window.Mustache = __webpack_require__(9);
  window.Cookies = __webpack_require__(10);
  __webpack_require__(11);

  __webpack_require__(12);
  __webpack_require__(13);

  __webpack_require__(14);
  __webpack_require__(15);
  __webpack_require__(16);
  __webpack_require__(17);
  __webpack_require__(18);
  __webpack_require__(19);
  __webpack_require__(20);
  __webpack_require__(21);
  __webpack_require__(22);
  __webpack_require__(23);



  __webpack_require__(24);
  __webpack_require__(25);
  __webpack_require__(26);
  __webpack_require__(27);
  __webpack_require__(28);
  __webpack_require__(29);

  __webpack_require__(30);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
   * jQuery JavaScript Library v2.1.4
   * http://jquery.com/
   *
   * Includes Sizzle.js
   * http://sizzlejs.com/
   *
   * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
   * Released under the MIT license
   * http://jquery.org/license
   *
   * Date: 2015-04-28T16:01Z
   */

  (function( global, factory ) {

    if ( typeof module === "object" && typeof module.exports === "object" ) {
      // For CommonJS and CommonJS-like environments where a proper `window`
      // is present, execute the factory and get jQuery.
      // For environments that do not have a `window` with a `document`
      // (such as Node.js), expose a factory as module.exports.
      // This accentuates the need for the creation of a real `window`.
      // e.g. var jQuery = require("jquery")(window);
      // See ticket #14549 for more info.
      module.exports = global.document ?
        factory( global, true ) :
        function( w ) {
          if ( !w.document ) {
            throw new Error( "jQuery requires a window with a document" );
          }
          return factory( w );
        };
    } else {
      factory( global );
    }

  // Pass this if window is not defined yet
  }(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

  // Support: Firefox 18+
  // Can't be in strict mode, several libs including ASP.NET trace
  // the stack via arguments.caller.callee and Firefox dies if
  // you try to trace through "use strict" call chains. (#13335)
  //

  var arr = [];

  var slice = arr.slice;

  var concat = arr.concat;

  var push = arr.push;

  var indexOf = arr.indexOf;

  var class2type = {};

  var toString = class2type.toString;

  var hasOwn = class2type.hasOwnProperty;

  var support = {};



  var
    // Use the correct document accordingly with window argument (sandbox)
    document = window.document,

    version = "2.1.4",

    // Define a local copy of jQuery
    jQuery = function( selector, context ) {
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new jQuery.fn.init( selector, context );
    },

    // Support: Android<4.1
    // Make sure we trim BOM and NBSP
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

    // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/,
    rdashAlpha = /-([\da-z])/gi,

    // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function( all, letter ) {
      return letter.toUpperCase();
    };

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,

    constructor: jQuery,

    // Start with an empty selector
    selector: "",

    // The default length of a jQuery object is 0
    length: 0,

    toArray: function() {
      return slice.call( this );
    },

    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function( num ) {
      return num != null ?

        // Return just the one element from the set
        ( num < 0 ? this[ num + this.length ] : this[ num ] ) :

        // Return all the elements in a clean array
        slice.call( this );
    },

    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function( elems ) {

      // Build a new jQuery matched element set
      var ret = jQuery.merge( this.constructor(), elems );

      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;
      ret.context = this.context;

      // Return the newly-formed element set
      return ret;
    },

    // Execute a callback for every element in the matched set.
    // (You can seed the arguments with an array of args, but this is
    // only used internally.)
    each: function( callback, args ) {
      return jQuery.each( this, callback, args );
    },

    map: function( callback ) {
      return this.pushStack( jQuery.map(this, function( elem, i ) {
        return callback.call( elem, i, elem );
      }));
    },

    slice: function() {
      return this.pushStack( slice.apply( this, arguments ) );
    },

    first: function() {
      return this.eq( 0 );
    },

    last: function() {
      return this.eq( -1 );
    },

    eq: function( i ) {
      var len = this.length,
        j = +i + ( i < 0 ? len : 0 );
      return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
    },

    end: function() {
      return this.prevObject || this.constructor(null);
    },

    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function() {
    var options, name, src, copy, copyIsArray, clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

    // Handle a deep copy situation
    if ( typeof target === "boolean" ) {
      deep = target;

      // Skip the boolean and the target
      target = arguments[ i ] || {};
      i++;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
      target = {};
    }

    // Extend jQuery itself if only one argument is passed
    if ( i === length ) {
      target = this;
      i--;
    }

    for ( ; i < length; i++ ) {
      // Only deal with non-null/undefined values
      if ( (options = arguments[ i ]) != null ) {
        // Extend the base object
        for ( name in options ) {
          src = target[ name ];
          copy = options[ name ];

          // Prevent never-ending loop
          if ( target === copy ) {
            continue;
          }

          // Recurse if we're merging plain objects or arrays
          if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
            if ( copyIsArray ) {
              copyIsArray = false;
              clone = src && jQuery.isArray(src) ? src : [];

            } else {
              clone = src && jQuery.isPlainObject(src) ? src : {};
            }

            // Never move original objects, clone them
            target[ name ] = jQuery.extend( deep, clone, copy );

          // Don't bring in undefined values
          } else if ( copy !== undefined ) {
            target[ name ] = copy;
          }
        }
      }
    }

    // Return the modified object
    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

    // Assume jQuery is ready without the ready module
    isReady: true,

    error: function( msg ) {
      throw new Error( msg );
    },

    noop: function() {},

    isFunction: function( obj ) {
      return jQuery.type(obj) === "function";
    },

    isArray: Array.isArray,

    isWindow: function( obj ) {
      return obj != null && obj === obj.window;
    },

    isNumeric: function( obj ) {
      // parseFloat NaNs numeric-cast false positives (null|true|false|"")
      // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
      // subtraction forces infinities to NaN
      // adding 1 corrects loss of precision from parseFloat (#15100)
      return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
    },

    isPlainObject: function( obj ) {
      // Not plain objects:
      // - Any object or value whose internal [[Class]] property is not "[object Object]"
      // - DOM nodes
      // - window
      if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
        return false;
      }

      if ( obj.constructor &&
          !hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
        return false;
      }

      // If the function hasn't returned already, we're confident that
      // |obj| is a plain object, created by {} or constructed with new Object
      return true;
    },

    isEmptyObject: function( obj ) {
      var name;
      for ( name in obj ) {
        return false;
      }
      return true;
    },

    type: function( obj ) {
      if ( obj == null ) {
        return obj + "";
      }
      // Support: Android<4.0, iOS<6 (functionish RegExp)
      return typeof obj === "object" || typeof obj === "function" ?
        class2type[ toString.call(obj) ] || "object" :
        typeof obj;
    },

    // Evaluates a script in a global context
    globalEval: function( code ) {
      var script,
        indirect = eval;

      code = jQuery.trim( code );

      if ( code ) {
        // If the code includes a valid, prologue position
        // strict mode pragma, execute code by injecting a
        // script tag into the document.
        if ( code.indexOf("use strict") === 1 ) {
          script = document.createElement("script");
          script.text = code;
          document.head.appendChild( script ).parentNode.removeChild( script );
        } else {
        // Otherwise, avoid the DOM node creation, insertion
        // and removal by using an indirect global eval
          indirect( code );
        }
      }
    },

    // Convert dashed to camelCase; used by the css and data modules
    // Support: IE9-11+
    // Microsoft forgot to hump their vendor prefix (#9572)
    camelCase: function( string ) {
      return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
    },

    nodeName: function( elem, name ) {
      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },

    // args is for internal usage only
    each: function( obj, callback, args ) {
      var value,
        i = 0,
        length = obj.length,
        isArray = isArraylike( obj );

      if ( args ) {
        if ( isArray ) {
          for ( ; i < length; i++ ) {
            value = callback.apply( obj[ i ], args );

            if ( value === false ) {
              break;
            }
          }
        } else {
          for ( i in obj ) {
            value = callback.apply( obj[ i ], args );

            if ( value === false ) {
              break;
            }
          }
        }

      // A special, fast, case for the most common use of each
      } else {
        if ( isArray ) {
          for ( ; i < length; i++ ) {
            value = callback.call( obj[ i ], i, obj[ i ] );

            if ( value === false ) {
              break;
            }
          }
        } else {
          for ( i in obj ) {
            value = callback.call( obj[ i ], i, obj[ i ] );

            if ( value === false ) {
              break;
            }
          }
        }
      }

      return obj;
    },

    // Support: Android<4.1
    trim: function( text ) {
      return text == null ?
        "" :
        ( text + "" ).replace( rtrim, "" );
    },

    // results is for internal usage only
    makeArray: function( arr, results ) {
      var ret = results || [];

      if ( arr != null ) {
        if ( isArraylike( Object(arr) ) ) {
          jQuery.merge( ret,
            typeof arr === "string" ?
            [ arr ] : arr
          );
        } else {
          push.call( ret, arr );
        }
      }

      return ret;
    },

    inArray: function( elem, arr, i ) {
      return arr == null ? -1 : indexOf.call( arr, elem, i );
    },

    merge: function( first, second ) {
      var len = +second.length,
        j = 0,
        i = first.length;

      for ( ; j < len; j++ ) {
        first[ i++ ] = second[ j ];
      }

      first.length = i;

      return first;
    },

    grep: function( elems, callback, invert ) {
      var callbackInverse,
        matches = [],
        i = 0,
        length = elems.length,
        callbackExpect = !invert;

      // Go through the array, only saving the items
      // that pass the validator function
      for ( ; i < length; i++ ) {
        callbackInverse = !callback( elems[ i ], i );
        if ( callbackInverse !== callbackExpect ) {
          matches.push( elems[ i ] );
        }
      }

      return matches;
    },

    // arg is for internal usage only
    map: function( elems, callback, arg ) {
      var value,
        i = 0,
        length = elems.length,
        isArray = isArraylike( elems ),
        ret = [];

      // Go through the array, translating each of the items to their new values
      if ( isArray ) {
        for ( ; i < length; i++ ) {
          value = callback( elems[ i ], i, arg );

          if ( value != null ) {
            ret.push( value );
          }
        }

      // Go through every key on the object,
      } else {
        for ( i in elems ) {
          value = callback( elems[ i ], i, arg );

          if ( value != null ) {
            ret.push( value );
          }
        }
      }

      // Flatten any nested arrays
      return concat.apply( [], ret );
    },

    // A global GUID counter for objects
    guid: 1,

    // Bind a function to a context, optionally partially applying any
    // arguments.
    proxy: function( fn, context ) {
      var tmp, args, proxy;

      if ( typeof context === "string" ) {
        tmp = fn[ context ];
        context = fn;
        fn = tmp;
      }

      // Quick check to determine if target is callable, in the spec
      // this throws a TypeError, but we will just return undefined.
      if ( !jQuery.isFunction( fn ) ) {
        return undefined;
      }

      // Simulated bind
      args = slice.call( arguments, 2 );
      proxy = function() {
        return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
      };

      // Set the guid of unique handler to the same of original handler, so it can be removed
      proxy.guid = fn.guid = fn.guid || jQuery.guid++;

      return proxy;
    },

    now: Date.now,

    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });

  // Populate the class2type map
  jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase();
  });

  function isArraylike( obj ) {

    // Support: iOS 8.2 (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = "length" in obj && obj.length,
      type = jQuery.type( obj );

    if ( type === "function" || jQuery.isWindow( obj ) ) {
      return false;
    }

    if ( obj.nodeType === 1 && length ) {
      return true;
    }

    return type === "array" || length === 0 ||
      typeof length === "number" && length > 0 && ( length - 1 ) in obj;
  }
  var Sizzle =
  /*!
   * Sizzle CSS Selector Engine v2.2.0-pre
   * http://sizzlejs.com/
   *
   * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
   * Released under the MIT license
   * http://jquery.org/license
   *
   * Date: 2014-12-16
   */
  (function( window ) {

  var i,
    support,
    Expr,
    getText,
    isXML,
    tokenize,
    compile,
    select,
    outermostContext,
    sortInput,
    hasDuplicate,

    // Local document vars
    setDocument,
    document,
    docElem,
    documentIsHTML,
    rbuggyQSA,
    rbuggyMatches,
    matches,
    contains,

    // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
    preferredDoc = window.document,
    dirruns = 0,
    done = 0,
    classCache = createCache(),
    tokenCache = createCache(),
    compilerCache = createCache(),
    sortOrder = function( a, b ) {
      if ( a === b ) {
        hasDuplicate = true;
      }
      return 0;
    },

    // General-purpose constants
    MAX_NEGATIVE = 1 << 31,

    // Instance methods
    hasOwn = ({}).hasOwnProperty,
    arr = [],
    pop = arr.pop,
    push_native = arr.push,
    push = arr.push,
    slice = arr.slice,
    // Use a stripped-down indexOf as it's faster than native
    // http://jsperf.com/thor-indexof-vs-for/5
    indexOf = function( list, elem ) {
      var i = 0,
        len = list.length;
      for ( ; i < len; i++ ) {
        if ( list[i] === elem ) {
          return i;
        }
      }
      return -1;
    },

    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

    // Regular expressions

    // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
    // http://www.w3.org/TR/css3-syntax/#characters
    characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

    // Loosely modeled on CSS identifier characters
    // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
    // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
    identifier = characterEncoding.replace( "w", "w#" ),

    // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
      // Operator (capture 2)
      "*([*^$|!~]?=)" + whitespace +
      // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
      "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
      "*\\]",

    pseudos = ":(" + characterEncoding + ")(?:\\((" +
      // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
      // 1. quoted (capture 3; capture 4 or capture 5)
      "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
      // 2. simple (capture 6)
      "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
      // 3. anything else (capture 2)
      ".*" +
      ")\\)|)",

    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp( whitespace + "+", "g" ),
    rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

    rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
    rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

    rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

    rpseudo = new RegExp( pseudos ),
    ridentifier = new RegExp( "^" + identifier + "$" ),

    matchExpr = {
      "ID": new RegExp( "^#(" + characterEncoding + ")" ),
      "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
      "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
      "ATTR": new RegExp( "^" + attributes ),
      "PSEUDO": new RegExp( "^" + pseudos ),
      "CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
        "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
        "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
      "bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
      // For use in libraries implementing .is()
      // We use this for POS matching in `select`
      "needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
        whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
    },

    rinputs = /^(?:input|select|textarea|button)$/i,
    rheader = /^h\d$/i,

    rnative = /^[^{]+\{\s*\[native \w/,

    // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

    rsibling = /[+~]/,
    rescape = /'|\\/g,

    // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
    funescape = function( _, escaped, escapedWhitespace ) {
      var high = "0x" + escaped - 0x10000;
      // NaN means non-codepoint
      // Support: Firefox<24
      // Workaround erroneous numeric interpretation of +"0x"
      return high !== high || escapedWhitespace ?
        escaped :
        high < 0 ?
          // BMP codepoint
          String.fromCharCode( high + 0x10000 ) :
          // Supplemental Plane codepoint (surrogate pair)
          String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
    },

    // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function() {
      setDocument();
    };

  // Optimize for push.apply( _, NodeList )
  try {
    push.apply(
      (arr = slice.call( preferredDoc.childNodes )),
      preferredDoc.childNodes
    );
    // Support: Android<4.0
    // Detect silently failing push.apply
    arr[ preferredDoc.childNodes.length ].nodeType;
  } catch ( e ) {
    push = { apply: arr.length ?

      // Leverage slice if possible
      function( target, els ) {
        push_native.apply( target, slice.call(els) );
      } :

      // Support: IE<9
      // Otherwise append directly
      function( target, els ) {
        var j = target.length,
          i = 0;
        // Can't trust NodeList.length
        while ( (target[j++] = els[i++]) ) {}
        target.length = j - 1;
      }
    };
  }

  function Sizzle( selector, context, results, seed ) {
    var match, elem, m, nodeType,
      // QSA vars
      i, groups, old, nid, newContext, newSelector;

    if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
      setDocument( context );
    }

    context = context || document;
    results = results || [];
    nodeType = context.nodeType;

    if ( typeof selector !== "string" || !selector ||
      nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

      return results;
    }

    if ( !seed && documentIsHTML ) {

      // Try to shortcut find operations when possible (e.g., not under DocumentFragment)
      if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
        // Speed-up: Sizzle("#ID")
        if ( (m = match[1]) ) {
          if ( nodeType === 9 ) {
            elem = context.getElementById( m );
            // Check parentNode to catch when Blackberry 4.6 returns
            // nodes that are no longer in the document (jQuery #6963)
            if ( elem && elem.parentNode ) {
              // Handle the case where IE, Opera, and Webkit return items
              // by name instead of ID
              if ( elem.id === m ) {
                results.push( elem );
                return results;
              }
            } else {
              return results;
            }
          } else {
            // Context is not a document
            if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
              contains( context, elem ) && elem.id === m ) {
              results.push( elem );
              return results;
            }
          }

        // Speed-up: Sizzle("TAG")
        } else if ( match[2] ) {
          push.apply( results, context.getElementsByTagName( selector ) );
          return results;

        // Speed-up: Sizzle(".CLASS")
        } else if ( (m = match[3]) && support.getElementsByClassName ) {
          push.apply( results, context.getElementsByClassName( m ) );
          return results;
        }
      }

      // QSA path
      if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
        nid = old = expando;
        newContext = context;
        newSelector = nodeType !== 1 && selector;

        // qSA works strangely on Element-rooted queries
        // We can work around this by specifying an extra ID on the root
        // and working up from there (Thanks to Andrew Dupont for the technique)
        // IE 8 doesn't work on object elements
        if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
          groups = tokenize( selector );

          if ( (old = context.getAttribute("id")) ) {
            nid = old.replace( rescape, "\\$&" );
          } else {
            context.setAttribute( "id", nid );
          }
          nid = "[id='" + nid + "'] ";

          i = groups.length;
          while ( i-- ) {
            groups[i] = nid + toSelector( groups[i] );
          }
          newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
          newSelector = groups.join(",");
        }

        if ( newSelector ) {
          try {
            push.apply( results,
              newContext.querySelectorAll( newSelector )
            );
            return results;
          } catch(qsaError) {
          } finally {
            if ( !old ) {
              context.removeAttribute("id");
            }
          }
        }
      }
    }

    // All others
    return select( selector.replace( rtrim, "$1" ), context, results, seed );
  }

  /**
   * Create key-value caches of limited size
   * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
   *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *  deleting the oldest entry
   */
  function createCache() {
    var keys = [];

    function cache( key, value ) {
      // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
      if ( keys.push( key + " " ) > Expr.cacheLength ) {
        // Only keep the most recent entries
        delete cache[ keys.shift() ];
      }
      return (cache[ key + " " ] = value);
    }
    return cache;
  }

  /**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
  function markFunction( fn ) {
    fn[ expando ] = true;
    return fn;
  }

  /**
   * Support testing using an element
   * @param {Function} fn Passed the created div and expects a boolean result
   */
  function assert( fn ) {
    var div = document.createElement("div");

    try {
      return !!fn( div );
    } catch (e) {
      return false;
    } finally {
      // Remove from its parent by default
      if ( div.parentNode ) {
        div.parentNode.removeChild( div );
      }
      // release memory in IE
      div = null;
    }
  }

  /**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
  function addHandle( attrs, handler ) {
    var arr = attrs.split("|"),
      i = attrs.length;

    while ( i-- ) {
      Expr.attrHandle[ arr[i] ] = handler;
    }
  }

  /**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
  function siblingCheck( a, b ) {
    var cur = b && a,
      diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
        ( ~b.sourceIndex || MAX_NEGATIVE ) -
        ( ~a.sourceIndex || MAX_NEGATIVE );

    // Use IE sourceIndex if available on both nodes
    if ( diff ) {
      return diff;
    }

    // Check if b follows a
    if ( cur ) {
      while ( (cur = cur.nextSibling) ) {
        if ( cur === b ) {
          return -1;
        }
      }
    }

    return a ? 1 : -1;
  }

  /**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
  function createInputPseudo( type ) {
    return function( elem ) {
      var name = elem.nodeName.toLowerCase();
      return name === "input" && elem.type === type;
    };
  }

  /**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
  function createButtonPseudo( type ) {
    return function( elem ) {
      var name = elem.nodeName.toLowerCase();
      return (name === "input" || name === "button") && elem.type === type;
    };
  }

  /**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
  function createPositionalPseudo( fn ) {
    return markFunction(function( argument ) {
      argument = +argument;
      return markFunction(function( seed, matches ) {
        var j,
          matchIndexes = fn( [], seed.length, argument ),
          i = matchIndexes.length;

        // Match elements found at the specified indexes
        while ( i-- ) {
          if ( seed[ (j = matchIndexes[i]) ] ) {
            seed[j] = !(matches[j] = seed[j]);
          }
        }
      });
    });
  }

  /**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
  function testContext( context ) {
    return context && typeof context.getElementsByTagName !== "undefined" && context;
  }

  // Expose support vars for convenience
  support = Sizzle.support = {};

  /**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
  isXML = Sizzle.isXML = function( elem ) {
    // documentElement is verified for cases where it doesn't yet exist
    // (such as loading iframes in IE - #4833)
    var documentElement = elem && (elem.ownerDocument || elem).documentElement;
    return documentElement ? documentElement.nodeName !== "HTML" : false;
  };

  /**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
  setDocument = Sizzle.setDocument = function( node ) {
    var hasCompare, parent,
      doc = node ? node.ownerDocument || node : preferredDoc;

    // If no document and documentElement is available, return
    if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
      return document;
    }

    // Set our document
    document = doc;
    docElem = doc.documentElement;
    parent = doc.defaultView;

    // Support: IE>8
    // If iframe document is assigned to "document" variable and if iframe has been reloaded,
    // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
    // IE6-8 do not support the defaultView property so parent will be undefined
    if ( parent && parent !== parent.top ) {
      // IE11 does not have attachEvent, so all must suffer
      if ( parent.addEventListener ) {
        parent.addEventListener( "unload", unloadHandler, false );
      } else if ( parent.attachEvent ) {
        parent.attachEvent( "onunload", unloadHandler );
      }
    }

    /* Support tests
    ---------------------------------------------------------------------- */
    documentIsHTML = !isXML( doc );

    /* Attributes
    ---------------------------------------------------------------------- */

    // Support: IE<8
    // Verify that getAttribute really returns attributes and not properties
    // (excepting IE8 booleans)
    support.attributes = assert(function( div ) {
      div.className = "i";
      return !div.getAttribute("className");
    });

    /* getElement(s)By*
    ---------------------------------------------------------------------- */

    // Check if getElementsByTagName("*") returns only elements
    support.getElementsByTagName = assert(function( div ) {
      div.appendChild( doc.createComment("") );
      return !div.getElementsByTagName("*").length;
    });

    // Support: IE<9
    support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

    // Support: IE<10
    // Check if getElementById returns elements by name
    // The broken getElementById methods don't pick up programatically-set names,
    // so use a roundabout getElementsByName test
    support.getById = assert(function( div ) {
      docElem.appendChild( div ).id = expando;
      return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
    });

    // ID find and filter
    if ( support.getById ) {
      Expr.find["ID"] = function( id, context ) {
        if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
          var m = context.getElementById( id );
          // Check parentNode to catch when Blackberry 4.6 returns
          // nodes that are no longer in the document #6963
          return m && m.parentNode ? [ m ] : [];
        }
      };
      Expr.filter["ID"] = function( id ) {
        var attrId = id.replace( runescape, funescape );
        return function( elem ) {
          return elem.getAttribute("id") === attrId;
        };
      };
    } else {
      // Support: IE6/7
      // getElementById is not reliable as a find shortcut
      delete Expr.find["ID"];

      Expr.filter["ID"] =  function( id ) {
        var attrId = id.replace( runescape, funescape );
        return function( elem ) {
          var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
          return node && node.value === attrId;
        };
      };
    }

    // Tag
    Expr.find["TAG"] = support.getElementsByTagName ?
      function( tag, context ) {
        if ( typeof context.getElementsByTagName !== "undefined" ) {
          return context.getElementsByTagName( tag );

        // DocumentFragment nodes don't have gEBTN
        } else if ( support.qsa ) {
          return context.querySelectorAll( tag );
        }
      } :

      function( tag, context ) {
        var elem,
          tmp = [],
          i = 0,
          // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
          results = context.getElementsByTagName( tag );

        // Filter out possible comments
        if ( tag === "*" ) {
          while ( (elem = results[i++]) ) {
            if ( elem.nodeType === 1 ) {
              tmp.push( elem );
            }
          }

          return tmp;
        }
        return results;
      };

    // Class
    Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
      if ( documentIsHTML ) {
        return context.getElementsByClassName( className );
      }
    };

    /* QSA/matchesSelector
    ---------------------------------------------------------------------- */

    // QSA and matchesSelector support

    // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
    rbuggyMatches = [];

    // qSa(:focus) reports false when true (Chrome 21)
    // We allow this because of a bug in IE8/9 that throws an error
    // whenever `document.activeElement` is accessed on an iframe
    // So, we allow :focus to pass through QSA all the time to avoid the IE error
    // See http://bugs.jquery.com/ticket/13378
    rbuggyQSA = [];

    if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
      // Build QSA regex
      // Regex strategy adopted from Diego Perini
      assert(function( div ) {
        // Select is set to empty string on purpose
        // This is to test IE's treatment of not explicitly
        // setting a boolean content attribute,
        // since its presence should be enough
        // http://bugs.jquery.com/ticket/12359
        docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
          "<select id='" + expando + "-\f]' msallowcapture=''>" +
          "<option selected=''></option></select>";

        // Support: IE8, Opera 11-12.16
        // Nothing should be selected when empty strings follow ^= or $= or *=
        // The test attribute must be unknown in Opera but "safe" for WinRT
        // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
        if ( div.querySelectorAll("[msallowcapture^='']").length ) {
          rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
        }

        // Support: IE8
        // Boolean attributes and "value" are not treated correctly
        if ( !div.querySelectorAll("[selected]").length ) {
          rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
        }

        // Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
        if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
          rbuggyQSA.push("~=");
        }

        // Webkit/Opera - :checked should return selected option elements
        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
        // IE8 throws error here and will not see later tests
        if ( !div.querySelectorAll(":checked").length ) {
          rbuggyQSA.push(":checked");
        }

        // Support: Safari 8+, iOS 8+
        // https://bugs.webkit.org/show_bug.cgi?id=136851
        // In-page `selector#id sibing-combinator selector` fails
        if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
          rbuggyQSA.push(".#.+[+~]");
        }
      });

      assert(function( div ) {
        // Support: Windows 8 Native Apps
        // The type and name attributes are restricted during .innerHTML assignment
        var input = doc.createElement("input");
        input.setAttribute( "type", "hidden" );
        div.appendChild( input ).setAttribute( "name", "D" );

        // Support: IE8
        // Enforce case-sensitivity of name attribute
        if ( div.querySelectorAll("[name=d]").length ) {
          rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
        }

        // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
        // IE8 throws error here and will not see later tests
        if ( !div.querySelectorAll(":enabled").length ) {
          rbuggyQSA.push( ":enabled", ":disabled" );
        }

        // Opera 10-11 does not throw on post-comma invalid pseudos
        div.querySelectorAll("*,:x");
        rbuggyQSA.push(",.*:");
      });
    }

    if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
      docElem.webkitMatchesSelector ||
      docElem.mozMatchesSelector ||
      docElem.oMatchesSelector ||
      docElem.msMatchesSelector) )) ) {

      assert(function( div ) {
        // Check to see if it's possible to do matchesSelector
        // on a disconnected node (IE 9)
        support.disconnectedMatch = matches.call( div, "div" );

        // This should fail with an exception
        // Gecko does not error, returns false instead
        matches.call( div, "[s!='']:x" );
        rbuggyMatches.push( "!=", pseudos );
      });
    }

    rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
    rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

    /* Contains
    ---------------------------------------------------------------------- */
    hasCompare = rnative.test( docElem.compareDocumentPosition );

    // Element contains another
    // Purposefully does not implement inclusive descendent
    // As in, an element does not contain itself
    contains = hasCompare || rnative.test( docElem.contains ) ?
      function( a, b ) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
          bup = b && b.parentNode;
        return a === bup || !!( bup && bup.nodeType === 1 && (
          adown.contains ?
            adown.contains( bup ) :
            a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
        ));
      } :
      function( a, b ) {
        if ( b ) {
          while ( (b = b.parentNode) ) {
            if ( b === a ) {
              return true;
            }
          }
        }
        return false;
      };

    /* Sorting
    ---------------------------------------------------------------------- */

    // Document order sorting
    sortOrder = hasCompare ?
    function( a, b ) {

      // Flag for duplicate removal
      if ( a === b ) {
        hasDuplicate = true;
        return 0;
      }

      // Sort on method existence if only one input has compareDocumentPosition
      var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
      if ( compare ) {
        return compare;
      }

      // Calculate position if both inputs belong to the same document
      compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
        a.compareDocumentPosition( b ) :

        // Otherwise we know they are disconnected
        1;

      // Disconnected nodes
      if ( compare & 1 ||
        (!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

        // Choose the first element that is related to our preferred document
        if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
          return -1;
        }
        if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
          return 1;
        }

        // Maintain original order
        return sortInput ?
          ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
          0;
      }

      return compare & 4 ? -1 : 1;
    } :
    function( a, b ) {
      // Exit early if the nodes are identical
      if ( a === b ) {
        hasDuplicate = true;
        return 0;
      }

      var cur,
        i = 0,
        aup = a.parentNode,
        bup = b.parentNode,
        ap = [ a ],
        bp = [ b ];

      // Parentless nodes are either documents or disconnected
      if ( !aup || !bup ) {
        return a === doc ? -1 :
          b === doc ? 1 :
          aup ? -1 :
          bup ? 1 :
          sortInput ?
          ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
          0;

      // If the nodes are siblings, we can do a quick check
      } else if ( aup === bup ) {
        return siblingCheck( a, b );
      }

      // Otherwise we need full lists of their ancestors for comparison
      cur = a;
      while ( (cur = cur.parentNode) ) {
        ap.unshift( cur );
      }
      cur = b;
      while ( (cur = cur.parentNode) ) {
        bp.unshift( cur );
      }

      // Walk down the tree looking for a discrepancy
      while ( ap[i] === bp[i] ) {
        i++;
      }

      return i ?
        // Do a sibling check if the nodes have a common ancestor
        siblingCheck( ap[i], bp[i] ) :

        // Otherwise nodes in our document sort first
        ap[i] === preferredDoc ? -1 :
        bp[i] === preferredDoc ? 1 :
        0;
    };

    return doc;
  };

  Sizzle.matches = function( expr, elements ) {
    return Sizzle( expr, null, null, elements );
  };

  Sizzle.matchesSelector = function( elem, expr ) {
    // Set document vars if needed
    if ( ( elem.ownerDocument || elem ) !== document ) {
      setDocument( elem );
    }

    // Make sure that attribute selectors are quoted
    expr = expr.replace( rattributeQuotes, "='$1']" );

    if ( support.matchesSelector && documentIsHTML &&
      ( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
      ( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

      try {
        var ret = matches.call( elem, expr );

        // IE 9's matchesSelector returns false on disconnected nodes
        if ( ret || support.disconnectedMatch ||
            // As well, disconnected nodes are said to be in a document
            // fragment in IE 9
            elem.document && elem.document.nodeType !== 11 ) {
          return ret;
        }
      } catch (e) {}
    }

    return Sizzle( expr, document, null, [ elem ] ).length > 0;
  };

  Sizzle.contains = function( context, elem ) {
    // Set document vars if needed
    if ( ( context.ownerDocument || context ) !== document ) {
      setDocument( context );
    }
    return contains( context, elem );
  };

  Sizzle.attr = function( elem, name ) {
    // Set document vars if needed
    if ( ( elem.ownerDocument || elem ) !== document ) {
      setDocument( elem );
    }

    var fn = Expr.attrHandle[ name.toLowerCase() ],
      // Don't get fooled by Object.prototype properties (jQuery #13807)
      val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
        fn( elem, name, !documentIsHTML ) :
        undefined;

    return val !== undefined ?
      val :
      support.attributes || !documentIsHTML ?
        elem.getAttribute( name ) :
        (val = elem.getAttributeNode(name)) && val.specified ?
          val.value :
          null;
  };

  Sizzle.error = function( msg ) {
    throw new Error( "Syntax error, unrecognized expression: " + msg );
  };

  /**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
  Sizzle.uniqueSort = function( results ) {
    var elem,
      duplicates = [],
      j = 0,
      i = 0;

    // Unless we *know* we can detect duplicates, assume their presence
    hasDuplicate = !support.detectDuplicates;
    sortInput = !support.sortStable && results.slice( 0 );
    results.sort( sortOrder );

    if ( hasDuplicate ) {
      while ( (elem = results[i++]) ) {
        if ( elem === results[ i ] ) {
          j = duplicates.push( i );
        }
      }
      while ( j-- ) {
        results.splice( duplicates[ j ], 1 );
      }
    }

    // Clear input after sorting to release objects
    // See https://github.com/jquery/sizzle/pull/225
    sortInput = null;

    return results;
  };

  /**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
  getText = Sizzle.getText = function( elem ) {
    var node,
      ret = "",
      i = 0,
      nodeType = elem.nodeType;

    if ( !nodeType ) {
      // If no nodeType, this is expected to be an array
      while ( (node = elem[i++]) ) {
        // Do not traverse comment nodes
        ret += getText( node );
      }
    } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
      // Use textContent for elements
      // innerText usage removed for consistency of new lines (jQuery #11153)
      if ( typeof elem.textContent === "string" ) {
        return elem.textContent;
      } else {
        // Traverse its children
        for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
          ret += getText( elem );
        }
      }
    } else if ( nodeType === 3 || nodeType === 4 ) {
      return elem.nodeValue;
    }
    // Do not include comment or processing instruction nodes

    return ret;
  };

  Expr = Sizzle.selectors = {

    // Can be adjusted by the user
    cacheLength: 50,

    createPseudo: markFunction,

    match: matchExpr,

    attrHandle: {},

    find: {},

    relative: {
      ">": { dir: "parentNode", first: true },
      " ": { dir: "parentNode" },
      "+": { dir: "previousSibling", first: true },
      "~": { dir: "previousSibling" }
    },

    preFilter: {
      "ATTR": function( match ) {
        match[1] = match[1].replace( runescape, funescape );

        // Move the given value to match[3] whether quoted or unquoted
        match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

        if ( match[2] === "~=" ) {
          match[3] = " " + match[3] + " ";
        }

        return match.slice( 0, 4 );
      },

      "CHILD": function( match ) {
        /* matches from matchExpr["CHILD"]
          1 type (only|nth|...)
          2 what (child|of-type)
          3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          4 xn-component of xn+y argument ([+-]?\d*n|)
          5 sign of xn-component
          6 x of xn-component
          7 sign of y-component
          8 y of y-component
        */
        match[1] = match[1].toLowerCase();

        if ( match[1].slice( 0, 3 ) === "nth" ) {
          // nth-* requires argument
          if ( !match[3] ) {
            Sizzle.error( match[0] );
          }

          // numeric x and y parameters for Expr.filter.CHILD
          // remember that false/true cast respectively to 0/1
          match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
          match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

        // other types prohibit arguments
        } else if ( match[3] ) {
          Sizzle.error( match[0] );
        }

        return match;
      },

      "PSEUDO": function( match ) {
        var excess,
          unquoted = !match[6] && match[2];

        if ( matchExpr["CHILD"].test( match[0] ) ) {
          return null;
        }

        // Accept quoted arguments as-is
        if ( match[3] ) {
          match[2] = match[4] || match[5] || "";

        // Strip excess characters from unquoted arguments
        } else if ( unquoted && rpseudo.test( unquoted ) &&
          // Get excess from tokenize (recursively)
          (excess = tokenize( unquoted, true )) &&
          // advance to the next closing parenthesis
          (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

          // excess is a negative index
          match[0] = match[0].slice( 0, excess );
          match[2] = unquoted.slice( 0, excess );
        }

        // Return only captures needed by the pseudo filter method (type and argument)
        return match.slice( 0, 3 );
      }
    },

    filter: {

      "TAG": function( nodeNameSelector ) {
        var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
        return nodeNameSelector === "*" ?
          function() { return true; } :
          function( elem ) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
      },

      "CLASS": function( className ) {
        var pattern = classCache[ className + " " ];

        return pattern ||
          (pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
          classCache( className, function( elem ) {
            return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
          });
      },

      "ATTR": function( name, operator, check ) {
        return function( elem ) {
          var result = Sizzle.attr( elem, name );

          if ( result == null ) {
            return operator === "!=";
          }
          if ( !operator ) {
            return true;
          }

          result += "";

          return operator === "=" ? result === check :
            operator === "!=" ? result !== check :
            operator === "^=" ? check && result.indexOf( check ) === 0 :
            operator === "*=" ? check && result.indexOf( check ) > -1 :
            operator === "$=" ? check && result.slice( -check.length ) === check :
            operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
            operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
            false;
        };
      },

      "CHILD": function( type, what, argument, first, last ) {
        var simple = type.slice( 0, 3 ) !== "nth",
          forward = type.slice( -4 ) !== "last",
          ofType = what === "of-type";

        return first === 1 && last === 0 ?

          // Shortcut for :nth-*(n)
          function( elem ) {
            return !!elem.parentNode;
          } :

          function( elem, context, xml ) {
            var cache, outerCache, node, diff, nodeIndex, start,
              dir = simple !== forward ? "nextSibling" : "previousSibling",
              parent = elem.parentNode,
              name = ofType && elem.nodeName.toLowerCase(),
              useCache = !xml && !ofType;

            if ( parent ) {

              // :(first|last|only)-(child|of-type)
              if ( simple ) {
                while ( dir ) {
                  node = elem;
                  while ( (node = node[ dir ]) ) {
                    if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
                      return false;
                    }
                  }
                  // Reverse direction for :only-* (if we haven't yet done so)
                  start = dir = type === "only" && !start && "nextSibling";
                }
                return true;
              }

              start = [ forward ? parent.firstChild : parent.lastChild ];

              // non-xml :nth-child(...) stores cache data on `parent`
              if ( forward && useCache ) {
                // Seek `elem` from a previously-cached index
                outerCache = parent[ expando ] || (parent[ expando ] = {});
                cache = outerCache[ type ] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = cache[0] === dirruns && cache[2];
                node = nodeIndex && parent.childNodes[ nodeIndex ];

                while ( (node = ++nodeIndex && node && node[ dir ] ||

                  // Fallback to seeking `elem` from the start
                  (diff = nodeIndex = 0) || start.pop()) ) {

                  // When found, cache indexes on `parent` and break
                  if ( node.nodeType === 1 && ++diff && node === elem ) {
                    outerCache[ type ] = [ dirruns, nodeIndex, diff ];
                    break;
                  }
                }

              // Use previously-cached element index if available
              } else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
                diff = cache[1];

              // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
              } else {
                // Use the same loop as above to seek `elem` from the start
                while ( (node = ++nodeIndex && node && node[ dir ] ||
                  (diff = nodeIndex = 0) || start.pop()) ) {

                  if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
                    // Cache the index of each encountered element
                    if ( useCache ) {
                      (node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
                    }

                    if ( node === elem ) {
                      break;
                    }
                  }
                }
              }

              // Incorporate the offset, then check against cycle size
              diff -= last;
              return diff === first || ( diff % first === 0 && diff / first >= 0 );
            }
          };
      },

      "PSEUDO": function( pseudo, argument ) {
        // pseudo-class names are case-insensitive
        // http://www.w3.org/TR/selectors/#pseudo-classes
        // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
        // Remember that setFilters inherits from pseudos
        var args,
          fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
            Sizzle.error( "unsupported pseudo: " + pseudo );

        // The user may use createPseudo to indicate that
        // arguments are needed to create the filter function
        // just as Sizzle does
        if ( fn[ expando ] ) {
          return fn( argument );
        }

        // But maintain support for old signatures
        if ( fn.length > 1 ) {
          args = [ pseudo, pseudo, "", argument ];
          return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
            markFunction(function( seed, matches ) {
              var idx,
                matched = fn( seed, argument ),
                i = matched.length;
              while ( i-- ) {
                idx = indexOf( seed, matched[i] );
                seed[ idx ] = !( matches[ idx ] = matched[i] );
              }
            }) :
            function( elem ) {
              return fn( elem, 0, args );
            };
        }

        return fn;
      }
    },

    pseudos: {
      // Potentially complex pseudos
      "not": markFunction(function( selector ) {
        // Trim the selector passed to compile
        // to avoid treating leading and trailing
        // spaces as combinators
        var input = [],
          results = [],
          matcher = compile( selector.replace( rtrim, "$1" ) );

        return matcher[ expando ] ?
          markFunction(function( seed, matches, context, xml ) {
            var elem,
              unmatched = matcher( seed, null, xml, [] ),
              i = seed.length;

            // Match elements unmatched by `matcher`
            while ( i-- ) {
              if ( (elem = unmatched[i]) ) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) :
          function( elem, context, xml ) {
            input[0] = elem;
            matcher( input, null, xml, results );
            // Don't keep the element (issue #299)
            input[0] = null;
            return !results.pop();
          };
      }),

      "has": markFunction(function( selector ) {
        return function( elem ) {
          return Sizzle( selector, elem ).length > 0;
        };
      }),

      "contains": markFunction(function( text ) {
        text = text.replace( runescape, funescape );
        return function( elem ) {
          return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
        };
      }),

      // "Whether an element is represented by a :lang() selector
      // is based solely on the element's language value
      // being equal to the identifier C,
      // or beginning with the identifier C immediately followed by "-".
      // The matching of C against the element's language value is performed case-insensitively.
      // The identifier C does not have to be a valid language name."
      // http://www.w3.org/TR/selectors/#lang-pseudo
      "lang": markFunction( function( lang ) {
        // lang value must be a valid identifier
        if ( !ridentifier.test(lang || "") ) {
          Sizzle.error( "unsupported lang: " + lang );
        }
        lang = lang.replace( runescape, funescape ).toLowerCase();
        return function( elem ) {
          var elemLang;
          do {
            if ( (elemLang = documentIsHTML ?
              elem.lang :
              elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

              elemLang = elemLang.toLowerCase();
              return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
            }
          } while ( (elem = elem.parentNode) && elem.nodeType === 1 );
          return false;
        };
      }),

      // Miscellaneous
      "target": function( elem ) {
        var hash = window.location && window.location.hash;
        return hash && hash.slice( 1 ) === elem.id;
      },

      "root": function( elem ) {
        return elem === docElem;
      },

      "focus": function( elem ) {
        return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
      },

      // Boolean properties
      "enabled": function( elem ) {
        return elem.disabled === false;
      },

      "disabled": function( elem ) {
        return elem.disabled === true;
      },

      "checked": function( elem ) {
        // In CSS3, :checked should return both checked and selected elements
        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
        var nodeName = elem.nodeName.toLowerCase();
        return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
      },

      "selected": function( elem ) {
        // Accessing this property makes selected-by-default
        // options in Safari work properly
        if ( elem.parentNode ) {
          elem.parentNode.selectedIndex;
        }

        return elem.selected === true;
      },

      // Contents
      "empty": function( elem ) {
        // http://www.w3.org/TR/selectors/#empty-pseudo
        // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
        //   but not by others (comment: 8; processing instruction: 7; etc.)
        // nodeType < 6 works because attributes (2) do not appear as children
        for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
          if ( elem.nodeType < 6 ) {
            return false;
          }
        }
        return true;
      },

      "parent": function( elem ) {
        return !Expr.pseudos["empty"]( elem );
      },

      // Element/input types
      "header": function( elem ) {
        return rheader.test( elem.nodeName );
      },

      "input": function( elem ) {
        return rinputs.test( elem.nodeName );
      },

      "button": function( elem ) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === "button" || name === "button";
      },

      "text": function( elem ) {
        var attr;
        return elem.nodeName.toLowerCase() === "input" &&
          elem.type === "text" &&

          // Support: IE<8
          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
          ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
      },

      // Position-in-collection
      "first": createPositionalPseudo(function() {
        return [ 0 ];
      }),

      "last": createPositionalPseudo(function( matchIndexes, length ) {
        return [ length - 1 ];
      }),

      "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
        return [ argument < 0 ? argument + length : argument ];
      }),

      "even": createPositionalPseudo(function( matchIndexes, length ) {
        var i = 0;
        for ( ; i < length; i += 2 ) {
          matchIndexes.push( i );
        }
        return matchIndexes;
      }),

      "odd": createPositionalPseudo(function( matchIndexes, length ) {
        var i = 1;
        for ( ; i < length; i += 2 ) {
          matchIndexes.push( i );
        }
        return matchIndexes;
      }),

      "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
        var i = argument < 0 ? argument + length : argument;
        for ( ; --i >= 0; ) {
          matchIndexes.push( i );
        }
        return matchIndexes;
      }),

      "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
        var i = argument < 0 ? argument + length : argument;
        for ( ; ++i < length; ) {
          matchIndexes.push( i );
        }
        return matchIndexes;
      })
    }
  };

  Expr.pseudos["nth"] = Expr.pseudos["eq"];

  // Add button/input type pseudos
  for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
    Expr.pseudos[ i ] = createInputPseudo( i );
  }
  for ( i in { submit: true, reset: true } ) {
    Expr.pseudos[ i ] = createButtonPseudo( i );
  }

  // Easy API for creating new setFilters
  function setFilters() {}
  setFilters.prototype = Expr.filters = Expr.pseudos;
  Expr.setFilters = new setFilters();

  tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
    var matched, match, tokens, type,
      soFar, groups, preFilters,
      cached = tokenCache[ selector + " " ];

    if ( cached ) {
      return parseOnly ? 0 : cached.slice( 0 );
    }

    soFar = selector;
    groups = [];
    preFilters = Expr.preFilter;

    while ( soFar ) {

      // Comma and first run
      if ( !matched || (match = rcomma.exec( soFar )) ) {
        if ( match ) {
          // Don't consume trailing commas as valid
          soFar = soFar.slice( match[0].length ) || soFar;
        }
        groups.push( (tokens = []) );
      }

      matched = false;

      // Combinators
      if ( (match = rcombinators.exec( soFar )) ) {
        matched = match.shift();
        tokens.push({
          value: matched,
          // Cast descendant combinators to space
          type: match[0].replace( rtrim, " " )
        });
        soFar = soFar.slice( matched.length );
      }

      // Filters
      for ( type in Expr.filter ) {
        if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
          (match = preFilters[ type ]( match ))) ) {
          matched = match.shift();
          tokens.push({
            value: matched,
            type: type,
            matches: match
          });
          soFar = soFar.slice( matched.length );
        }
      }

      if ( !matched ) {
        break;
      }
    }

    // Return the length of the invalid excess
    // if we're just parsing
    // Otherwise, throw an error or return tokens
    return parseOnly ?
      soFar.length :
      soFar ?
        Sizzle.error( selector ) :
        // Cache the tokens
        tokenCache( selector, groups ).slice( 0 );
  };

  function toSelector( tokens ) {
    var i = 0,
      len = tokens.length,
      selector = "";
    for ( ; i < len; i++ ) {
      selector += tokens[i].value;
    }
    return selector;
  }

  function addCombinator( matcher, combinator, base ) {
    var dir = combinator.dir,
      checkNonElements = base && dir === "parentNode",
      doneName = done++;

    return combinator.first ?
      // Check against closest ancestor/preceding element
      function( elem, context, xml ) {
        while ( (elem = elem[ dir ]) ) {
          if ( elem.nodeType === 1 || checkNonElements ) {
            return matcher( elem, context, xml );
          }
        }
      } :

      // Check against all ancestor/preceding elements
      function( elem, context, xml ) {
        var oldCache, outerCache,
          newCache = [ dirruns, doneName ];

        // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
        if ( xml ) {
          while ( (elem = elem[ dir ]) ) {
            if ( elem.nodeType === 1 || checkNonElements ) {
              if ( matcher( elem, context, xml ) ) {
                return true;
              }
            }
          }
        } else {
          while ( (elem = elem[ dir ]) ) {
            if ( elem.nodeType === 1 || checkNonElements ) {
              outerCache = elem[ expando ] || (elem[ expando ] = {});
              if ( (oldCache = outerCache[ dir ]) &&
                oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

                // Assign to newCache so results back-propagate to previous elements
                return (newCache[ 2 ] = oldCache[ 2 ]);
              } else {
                // Reuse newcache so results back-propagate to previous elements
                outerCache[ dir ] = newCache;

                // A match means we're done; a fail means we have to keep checking
                if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
                  return true;
                }
              }
            }
          }
        }
      };
  }

  function elementMatcher( matchers ) {
    return matchers.length > 1 ?
      function( elem, context, xml ) {
        var i = matchers.length;
        while ( i-- ) {
          if ( !matchers[i]( elem, context, xml ) ) {
            return false;
          }
        }
        return true;
      } :
      matchers[0];
  }

  function multipleContexts( selector, contexts, results ) {
    var i = 0,
      len = contexts.length;
    for ( ; i < len; i++ ) {
      Sizzle( selector, contexts[i], results );
    }
    return results;
  }

  function condense( unmatched, map, filter, context, xml ) {
    var elem,
      newUnmatched = [],
      i = 0,
      len = unmatched.length,
      mapped = map != null;

    for ( ; i < len; i++ ) {
      if ( (elem = unmatched[i]) ) {
        if ( !filter || filter( elem, context, xml ) ) {
          newUnmatched.push( elem );
          if ( mapped ) {
            map.push( i );
          }
        }
      }
    }

    return newUnmatched;
  }

  function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
    if ( postFilter && !postFilter[ expando ] ) {
      postFilter = setMatcher( postFilter );
    }
    if ( postFinder && !postFinder[ expando ] ) {
      postFinder = setMatcher( postFinder, postSelector );
    }
    return markFunction(function( seed, results, context, xml ) {
      var temp, i, elem,
        preMap = [],
        postMap = [],
        preexisting = results.length,

        // Get initial elements from seed or context
        elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

        // Prefilter to get matcher input, preserving a map for seed-results synchronization
        matcherIn = preFilter && ( seed || !selector ) ?
          condense( elems, preMap, preFilter, context, xml ) :
          elems,

        matcherOut = matcher ?
          // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
          postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

            // ...intermediate processing is necessary
            [] :

            // ...otherwise use results directly
            results :
          matcherIn;

      // Find primary matches
      if ( matcher ) {
        matcher( matcherIn, matcherOut, context, xml );
      }

      // Apply postFilter
      if ( postFilter ) {
        temp = condense( matcherOut, postMap );
        postFilter( temp, [], context, xml );

        // Un-match failing elements by moving them back to matcherIn
        i = temp.length;
        while ( i-- ) {
          if ( (elem = temp[i]) ) {
            matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
          }
        }
      }

      if ( seed ) {
        if ( postFinder || preFilter ) {
          if ( postFinder ) {
            // Get the final matcherOut by condensing this intermediate into postFinder contexts
            temp = [];
            i = matcherOut.length;
            while ( i-- ) {
              if ( (elem = matcherOut[i]) ) {
                // Restore matcherIn since elem is not yet a final match
                temp.push( (matcherIn[i] = elem) );
              }
            }
            postFinder( null, (matcherOut = []), temp, xml );
          }

          // Move matched elements from seed to results to keep them synchronized
          i = matcherOut.length;
          while ( i-- ) {
            if ( (elem = matcherOut[i]) &&
              (temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

              seed[temp] = !(results[temp] = elem);
            }
          }
        }

      // Add elements to results, through postFinder if defined
      } else {
        matcherOut = condense(
          matcherOut === results ?
            matcherOut.splice( preexisting, matcherOut.length ) :
            matcherOut
        );
        if ( postFinder ) {
          postFinder( null, results, matcherOut, xml );
        } else {
          push.apply( results, matcherOut );
        }
      }
    });
  }

  function matcherFromTokens( tokens ) {
    var checkContext, matcher, j,
      len = tokens.length,
      leadingRelative = Expr.relative[ tokens[0].type ],
      implicitRelative = leadingRelative || Expr.relative[" "],
      i = leadingRelative ? 1 : 0,

      // The foundational matcher ensures that elements are reachable from top-level context(s)
      matchContext = addCombinator( function( elem ) {
        return elem === checkContext;
      }, implicitRelative, true ),
      matchAnyContext = addCombinator( function( elem ) {
        return indexOf( checkContext, elem ) > -1;
      }, implicitRelative, true ),
      matchers = [ function( elem, context, xml ) {
        var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
          (checkContext = context).nodeType ?
            matchContext( elem, context, xml ) :
            matchAnyContext( elem, context, xml ) );
        // Avoid hanging onto element (issue #299)
        checkContext = null;
        return ret;
      } ];

    for ( ; i < len; i++ ) {
      if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
        matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
      } else {
        matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

        // Return special upon seeing a positional matcher
        if ( matcher[ expando ] ) {
          // Find the next relative operator (if any) for proper handling
          j = ++i;
          for ( ; j < len; j++ ) {
            if ( Expr.relative[ tokens[j].type ] ) {
              break;
            }
          }
          return setMatcher(
            i > 1 && elementMatcher( matchers ),
            i > 1 && toSelector(
              // If the preceding token was a descendant combinator, insert an implicit any-element `*`
              tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
            ).replace( rtrim, "$1" ),
            matcher,
            i < j && matcherFromTokens( tokens.slice( i, j ) ),
            j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
            j < len && toSelector( tokens )
          );
        }
        matchers.push( matcher );
      }
    }

    return elementMatcher( matchers );
  }

  function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
    var bySet = setMatchers.length > 0,
      byElement = elementMatchers.length > 0,
      superMatcher = function( seed, context, xml, results, outermost ) {
        var elem, j, matcher,
          matchedCount = 0,
          i = "0",
          unmatched = seed && [],
          setMatched = [],
          contextBackup = outermostContext,
          // We must always have either seed elements or outermost context
          elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
          // Use integer dirruns iff this is the outermost matcher
          dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
          len = elems.length;

        if ( outermost ) {
          outermostContext = context !== document && context;
        }

        // Add elements passing elementMatchers directly to results
        // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
        // Support: IE<9, Safari
        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
        for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
          if ( byElement && elem ) {
            j = 0;
            while ( (matcher = elementMatchers[j++]) ) {
              if ( matcher( elem, context, xml ) ) {
                results.push( elem );
                break;
              }
            }
            if ( outermost ) {
              dirruns = dirrunsUnique;
            }
          }

          // Track unmatched elements for set filters
          if ( bySet ) {
            // They will have gone through all possible matchers
            if ( (elem = !matcher && elem) ) {
              matchedCount--;
            }

            // Lengthen the array for every element, matched or not
            if ( seed ) {
              unmatched.push( elem );
            }
          }
        }

        // Apply set filters to unmatched elements
        matchedCount += i;
        if ( bySet && i !== matchedCount ) {
          j = 0;
          while ( (matcher = setMatchers[j++]) ) {
            matcher( unmatched, setMatched, context, xml );
          }

          if ( seed ) {
            // Reintegrate element matches to eliminate the need for sorting
            if ( matchedCount > 0 ) {
              while ( i-- ) {
                if ( !(unmatched[i] || setMatched[i]) ) {
                  setMatched[i] = pop.call( results );
                }
              }
            }

            // Discard index placeholder values to get only actual matches
            setMatched = condense( setMatched );
          }

          // Add matches to results
          push.apply( results, setMatched );

          // Seedless set matches succeeding multiple successful matchers stipulate sorting
          if ( outermost && !seed && setMatched.length > 0 &&
            ( matchedCount + setMatchers.length ) > 1 ) {

            Sizzle.uniqueSort( results );
          }
        }

        // Override manipulation of globals by nested matchers
        if ( outermost ) {
          dirruns = dirrunsUnique;
          outermostContext = contextBackup;
        }

        return unmatched;
      };

    return bySet ?
      markFunction( superMatcher ) :
      superMatcher;
  }

  compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
    var i,
      setMatchers = [],
      elementMatchers = [],
      cached = compilerCache[ selector + " " ];

    if ( !cached ) {
      // Generate a function of recursive functions that can be used to check each element
      if ( !match ) {
        match = tokenize( selector );
      }
      i = match.length;
      while ( i-- ) {
        cached = matcherFromTokens( match[i] );
        if ( cached[ expando ] ) {
          setMatchers.push( cached );
        } else {
          elementMatchers.push( cached );
        }
      }

      // Cache the compiled function
      cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

      // Save selector and tokenization
      cached.selector = selector;
    }
    return cached;
  };

  /**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
  select = Sizzle.select = function( selector, context, results, seed ) {
    var i, tokens, token, type, find,
      compiled = typeof selector === "function" && selector,
      match = !seed && tokenize( (selector = compiled.selector || selector) );

    results = results || [];

    // Try to minimize operations if there is no seed and only one group
    if ( match.length === 1 ) {

      // Take a shortcut and set the context if the root selector is an ID
      tokens = match[0] = match[0].slice( 0 );
      if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
          support.getById && context.nodeType === 9 && documentIsHTML &&
          Expr.relative[ tokens[1].type ] ) {

        context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
        if ( !context ) {
          return results;

        // Precompiled matchers will still verify ancestry, so step up a level
        } else if ( compiled ) {
          context = context.parentNode;
        }

        selector = selector.slice( tokens.shift().value.length );
      }

      // Fetch a seed set for right-to-left matching
      i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
      while ( i-- ) {
        token = tokens[i];

        // Abort if we hit a combinator
        if ( Expr.relative[ (type = token.type) ] ) {
          break;
        }
        if ( (find = Expr.find[ type ]) ) {
          // Search, expanding context for leading sibling combinators
          if ( (seed = find(
            token.matches[0].replace( runescape, funescape ),
            rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
          )) ) {

            // If seed is empty or no tokens remain, we can return early
            tokens.splice( i, 1 );
            selector = seed.length && toSelector( tokens );
            if ( !selector ) {
              push.apply( results, seed );
              return results;
            }

            break;
          }
        }
      }
    }

    // Compile and execute a filtering function if one is not provided
    // Provide `match` to avoid retokenization if we modified the selector above
    ( compiled || compile( selector, match ) )(
      seed,
      context,
      !documentIsHTML,
      results,
      rsibling.test( selector ) && testContext( context.parentNode ) || context
    );
    return results;
  };

  // One-time assignments

  // Sort stability
  support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

  // Support: Chrome 14-35+
  // Always assume duplicates if they aren't passed to the comparison function
  support.detectDuplicates = !!hasDuplicate;

  // Initialize against the default document
  setDocument();

  // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
  // Detached nodes confoundingly follow *each other*
  support.sortDetached = assert(function( div1 ) {
    // Should return 1, but returns 4 (following)
    return div1.compareDocumentPosition( document.createElement("div") ) & 1;
  });

  // Support: IE<8
  // Prevent attribute/property "interpolation"
  // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
  if ( !assert(function( div ) {
    div.innerHTML = "<a href='#'></a>";
    return div.firstChild.getAttribute("href") === "#" ;
  }) ) {
    addHandle( "type|href|height|width", function( elem, name, isXML ) {
      if ( !isXML ) {
        return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
      }
    });
  }

  // Support: IE<9
  // Use defaultValue in place of getAttribute("value")
  if ( !support.attributes || !assert(function( div ) {
    div.innerHTML = "<input/>";
    div.firstChild.setAttribute( "value", "" );
    return div.firstChild.getAttribute( "value" ) === "";
  }) ) {
    addHandle( "value", function( elem, name, isXML ) {
      if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
        return elem.defaultValue;
      }
    });
  }

  // Support: IE<9
  // Use getAttributeNode to fetch booleans when getAttribute lies
  if ( !assert(function( div ) {
    return div.getAttribute("disabled") == null;
  }) ) {
    addHandle( booleans, function( elem, name, isXML ) {
      var val;
      if ( !isXML ) {
        return elem[ name ] === true ? name.toLowerCase() :
            (val = elem.getAttributeNode( name )) && val.specified ?
            val.value :
          null;
      }
    });
  }

  return Sizzle;

  })( window );



  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;
  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;



  var rneedsContext = jQuery.expr.match.needsContext;

  var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



  var risSimple = /^.[^:#\[\.,]*$/;

  // Implement the identical functionality for filter and not
  function winnow( elements, qualifier, not ) {
    if ( jQuery.isFunction( qualifier ) ) {
      return jQuery.grep( elements, function( elem, i ) {
        /* jshint -W018 */
        return !!qualifier.call( elem, i, elem ) !== not;
      });

    }

    if ( qualifier.nodeType ) {
      return jQuery.grep( elements, function( elem ) {
        return ( elem === qualifier ) !== not;
      });

    }

    if ( typeof qualifier === "string" ) {
      if ( risSimple.test( qualifier ) ) {
        return jQuery.filter( qualifier, elements, not );
      }

      qualifier = jQuery.filter( qualifier, elements );
    }

    return jQuery.grep( elements, function( elem ) {
      return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
    });
  }

  jQuery.filter = function( expr, elems, not ) {
    var elem = elems[ 0 ];

    if ( not ) {
      expr = ":not(" + expr + ")";
    }

    return elems.length === 1 && elem.nodeType === 1 ?
      jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
      jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
        return elem.nodeType === 1;
      }));
  };

  jQuery.fn.extend({
    find: function( selector ) {
      var i,
        len = this.length,
        ret = [],
        self = this;

      if ( typeof selector !== "string" ) {
        return this.pushStack( jQuery( selector ).filter(function() {
          for ( i = 0; i < len; i++ ) {
            if ( jQuery.contains( self[ i ], this ) ) {
              return true;
            }
          }
        }) );
      }

      for ( i = 0; i < len; i++ ) {
        jQuery.find( selector, self[ i ], ret );
      }

      // Needed because $( selector, context ) becomes $( context ).find( selector )
      ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
      ret.selector = this.selector ? this.selector + " " + selector : selector;
      return ret;
    },
    filter: function( selector ) {
      return this.pushStack( winnow(this, selector || [], false) );
    },
    not: function( selector ) {
      return this.pushStack( winnow(this, selector || [], true) );
    },
    is: function( selector ) {
      return !!winnow(
        this,

        // If this is a positional/relative selector, check membership in the returned set
        // so $("p:first").is("p:last") won't return true for a doc with two "p".
        typeof selector === "string" && rneedsContext.test( selector ) ?
          jQuery( selector ) :
          selector || [],
        false
      ).length;
    }
  });


  // Initialize a jQuery object


  // A central reference to the root jQuery(document)
  var rootjQuery,

    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

    init = jQuery.fn.init = function( selector, context ) {
      var match, elem;

      // HANDLE: $(""), $(null), $(undefined), $(false)
      if ( !selector ) {
        return this;
      }

      // Handle HTML strings
      if ( typeof selector === "string" ) {
        if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [ null, selector, null ];

        } else {
          match = rquickExpr.exec( selector );
        }

        // Match html or make sure no context is specified for #id
        if ( match && (match[1] || !context) ) {

          // HANDLE: $(html) -> $(array)
          if ( match[1] ) {
            context = context instanceof jQuery ? context[0] : context;

            // Option to run scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            jQuery.merge( this, jQuery.parseHTML(
              match[1],
              context && context.nodeType ? context.ownerDocument || context : document,
              true
            ) );

            // HANDLE: $(html, props)
            if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
              for ( match in context ) {
                // Properties of context are called as methods if possible
                if ( jQuery.isFunction( this[ match ] ) ) {
                  this[ match ]( context[ match ] );

                // ...and otherwise set as attributes
                } else {
                  this.attr( match, context[ match ] );
                }
              }
            }

            return this;

          // HANDLE: $(#id)
          } else {
            elem = document.getElementById( match[2] );

            // Support: Blackberry 4.6
            // gEBID returns nodes no longer in the document (#6963)
            if ( elem && elem.parentNode ) {
              // Inject the element directly into the jQuery object
              this.length = 1;
              this[0] = elem;
            }

            this.context = document;
            this.selector = selector;
            return this;
          }

        // HANDLE: $(expr, $(...))
        } else if ( !context || context.jquery ) {
          return ( context || rootjQuery ).find( selector );

        // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor( context ).find( selector );
        }

      // HANDLE: $(DOMElement)
      } else if ( selector.nodeType ) {
        this.context = this[0] = selector;
        this.length = 1;
        return this;

      // HANDLE: $(function)
      // Shortcut for document ready
      } else if ( jQuery.isFunction( selector ) ) {
        return typeof rootjQuery.ready !== "undefined" ?
          rootjQuery.ready( selector ) :
          // Execute immediately if ready is not present
          selector( jQuery );
      }

      if ( selector.selector !== undefined ) {
        this.selector = selector.selector;
        this.context = selector.context;
      }

      return jQuery.makeArray( selector, this );
    };

  // Give the init function the jQuery prototype for later instantiation
  init.prototype = jQuery.fn;

  // Initialize central reference
  rootjQuery = jQuery( document );


  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };

  jQuery.extend({
    dir: function( elem, dir, until ) {
      var matched = [],
        truncate = until !== undefined;

      while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
        if ( elem.nodeType === 1 ) {
          if ( truncate && jQuery( elem ).is( until ) ) {
            break;
          }
          matched.push( elem );
        }
      }
      return matched;
    },

    sibling: function( n, elem ) {
      var matched = [];

      for ( ; n; n = n.nextSibling ) {
        if ( n.nodeType === 1 && n !== elem ) {
          matched.push( n );
        }
      }

      return matched;
    }
  });

  jQuery.fn.extend({
    has: function( target ) {
      var targets = jQuery( target, this ),
        l = targets.length;

      return this.filter(function() {
        var i = 0;
        for ( ; i < l; i++ ) {
          if ( jQuery.contains( this, targets[i] ) ) {
            return true;
          }
        }
      });
    },

    closest: function( selectors, context ) {
      var cur,
        i = 0,
        l = this.length,
        matched = [],
        pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
          jQuery( selectors, context || this.context ) :
          0;

      for ( ; i < l; i++ ) {
        for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
          // Always skip document fragments
          if ( cur.nodeType < 11 && (pos ?
            pos.index(cur) > -1 :

            // Don't pass non-elements to Sizzle
            cur.nodeType === 1 &&
              jQuery.find.matchesSelector(cur, selectors)) ) {

            matched.push( cur );
            break;
          }
        }
      }

      return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
    },

    // Determine the position of an element within the set
    index: function( elem ) {

      // No argument, return index in parent
      if ( !elem ) {
        return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
      }

      // Index in selector
      if ( typeof elem === "string" ) {
        return indexOf.call( jQuery( elem ), this[ 0 ] );
      }

      // Locate the position of the desired element
      return indexOf.call( this,

        // If it receives a jQuery object, the first element is used
        elem.jquery ? elem[ 0 ] : elem
      );
    },

    add: function( selector, context ) {
      return this.pushStack(
        jQuery.unique(
          jQuery.merge( this.get(), jQuery( selector, context ) )
        )
      );
    },

    addBack: function( selector ) {
      return this.add( selector == null ?
        this.prevObject : this.prevObject.filter(selector)
      );
    }
  });

  function sibling( cur, dir ) {
    while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
    return cur;
  }

  jQuery.each({
    parent: function( elem ) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function( elem ) {
      return jQuery.dir( elem, "parentNode" );
    },
    parentsUntil: function( elem, i, until ) {
      return jQuery.dir( elem, "parentNode", until );
    },
    next: function( elem ) {
      return sibling( elem, "nextSibling" );
    },
    prev: function( elem ) {
      return sibling( elem, "previousSibling" );
    },
    nextAll: function( elem ) {
      return jQuery.dir( elem, "nextSibling" );
    },
    prevAll: function( elem ) {
      return jQuery.dir( elem, "previousSibling" );
    },
    nextUntil: function( elem, i, until ) {
      return jQuery.dir( elem, "nextSibling", until );
    },
    prevUntil: function( elem, i, until ) {
      return jQuery.dir( elem, "previousSibling", until );
    },
    siblings: function( elem ) {
      return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
    },
    children: function( elem ) {
      return jQuery.sibling( elem.firstChild );
    },
    contents: function( elem ) {
      return elem.contentDocument || jQuery.merge( [], elem.childNodes );
    }
  }, function( name, fn ) {
    jQuery.fn[ name ] = function( until, selector ) {
      var matched = jQuery.map( this, fn, until );

      if ( name.slice( -5 ) !== "Until" ) {
        selector = until;
      }

      if ( selector && typeof selector === "string" ) {
        matched = jQuery.filter( selector, matched );
      }

      if ( this.length > 1 ) {
        // Remove duplicates
        if ( !guaranteedUnique[ name ] ) {
          jQuery.unique( matched );
        }

        // Reverse order for parents* and prev-derivatives
        if ( rparentsprev.test( name ) ) {
          matched.reverse();
        }
      }

      return this.pushStack( matched );
    };
  });
  var rnotwhite = (/\S+/g);



  // String to Object options format cache
  var optionsCache = {};

  // Convert String-formatted options into Object-formatted ones and store in cache
  function createOptions( options ) {
    var object = optionsCache[ options ] = {};
    jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
      object[ flag ] = true;
    });
    return object;
  }

  /*
   * Create a callback list using the following parameters:
   *
   *  options: an optional list of space-separated options that will change how
   *      the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *  once:     will ensure the callback list can only be fired once (like a Deferred)
   *
   *  memory:     will keep track of previous values and will call any callback added
   *          after the list has been fired right away with the latest "memorized"
   *          values (like a Deferred)
   *
   *  unique:     will ensure a callback can only be added once (no duplicate in the list)
   *
   *  stopOnFalse:  interrupt callings when a callback returns false
   *
   */
  jQuery.Callbacks = function( options ) {

    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ?
      ( optionsCache[ options ] || createOptions( options ) ) :
      jQuery.extend( {}, options );

    var // Last fire value (for non-forgettable lists)
      memory,
      // Flag to know if list was already fired
      fired,
      // Flag to know if list is currently firing
      firing,
      // First callback to fire (used internally by add and fireWith)
      firingStart,
      // End of the loop when firing
      firingLength,
      // Index of currently firing callback (modified by remove if needed)
      firingIndex,
      // Actual callback list
      list = [],
      // Stack of fire calls for repeatable lists
      stack = !options.once && [],
      // Fire callbacks
      fire = function( data ) {
        memory = options.memory && data;
        fired = true;
        firingIndex = firingStart || 0;
        firingStart = 0;
        firingLength = list.length;
        firing = true;
        for ( ; list && firingIndex < firingLength; firingIndex++ ) {
          if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
            memory = false; // To prevent further calls using add
            break;
          }
        }
        firing = false;
        if ( list ) {
          if ( stack ) {
            if ( stack.length ) {
              fire( stack.shift() );
            }
          } else if ( memory ) {
            list = [];
          } else {
            self.disable();
          }
        }
      },
      // Actual Callbacks object
      self = {
        // Add a callback or a collection of callbacks to the list
        add: function() {
          if ( list ) {
            // First, we save the current length
            var start = list.length;
            (function add( args ) {
              jQuery.each( args, function( _, arg ) {
                var type = jQuery.type( arg );
                if ( type === "function" ) {
                  if ( !options.unique || !self.has( arg ) ) {
                    list.push( arg );
                  }
                } else if ( arg && arg.length && type !== "string" ) {
                  // Inspect recursively
                  add( arg );
                }
              });
            })( arguments );
            // Do we need to add the callbacks to the
            // current firing batch?
            if ( firing ) {
              firingLength = list.length;
            // With memory, if we're not firing then
            // we should call right away
            } else if ( memory ) {
              firingStart = start;
              fire( memory );
            }
          }
          return this;
        },
        // Remove a callback from the list
        remove: function() {
          if ( list ) {
            jQuery.each( arguments, function( _, arg ) {
              var index;
              while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                list.splice( index, 1 );
                // Handle firing indexes
                if ( firing ) {
                  if ( index <= firingLength ) {
                    firingLength--;
                  }
                  if ( index <= firingIndex ) {
                    firingIndex--;
                  }
                }
              }
            });
          }
          return this;
        },
        // Check if a given callback is in the list.
        // If no argument is given, return whether or not list has callbacks attached.
        has: function( fn ) {
          return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
        },
        // Remove all callbacks from the list
        empty: function() {
          list = [];
          firingLength = 0;
          return this;
        },
        // Have the list do nothing anymore
        disable: function() {
          list = stack = memory = undefined;
          return this;
        },
        // Is it disabled?
        disabled: function() {
          return !list;
        },
        // Lock the list in its current state
        lock: function() {
          stack = undefined;
          if ( !memory ) {
            self.disable();
          }
          return this;
        },
        // Is it locked?
        locked: function() {
          return !stack;
        },
        // Call all callbacks with the given context and arguments
        fireWith: function( context, args ) {
          if ( list && ( !fired || stack ) ) {
            args = args || [];
            args = [ context, args.slice ? args.slice() : args ];
            if ( firing ) {
              stack.push( args );
            } else {
              fire( args );
            }
          }
          return this;
        },
        // Call all the callbacks with the given arguments
        fire: function() {
          self.fireWith( this, arguments );
          return this;
        },
        // To know if the callbacks have already been called at least once
        fired: function() {
          return !!fired;
        }
      };

    return self;
  };


  jQuery.extend({

    Deferred: function( func ) {
      var tuples = [
          // action, add listener, listener list, final state
          [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
          [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
          [ "notify", "progress", jQuery.Callbacks("memory") ]
        ],
        state = "pending",
        promise = {
          state: function() {
            return state;
          },
          always: function() {
            deferred.done( arguments ).fail( arguments );
            return this;
          },
          then: function( /* fnDone, fnFail, fnProgress */ ) {
            var fns = arguments;
            return jQuery.Deferred(function( newDefer ) {
              jQuery.each( tuples, function( i, tuple ) {
                var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                deferred[ tuple[1] ](function() {
                  var returned = fn && fn.apply( this, arguments );
                  if ( returned && jQuery.isFunction( returned.promise ) ) {
                    returned.promise()
                      .done( newDefer.resolve )
                      .fail( newDefer.reject )
                      .progress( newDefer.notify );
                  } else {
                    newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
                  }
                });
              });
              fns = null;
            }).promise();
          },
          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function( obj ) {
            return obj != null ? jQuery.extend( obj, promise ) : promise;
          }
        },
        deferred = {};

      // Keep pipe for back-compat
      promise.pipe = promise.then;

      // Add list-specific methods
      jQuery.each( tuples, function( i, tuple ) {
        var list = tuple[ 2 ],
          stateString = tuple[ 3 ];

        // promise[ done | fail | progress ] = list.add
        promise[ tuple[1] ] = list.add;

        // Handle state
        if ( stateString ) {
          list.add(function() {
            // state = [ resolved | rejected ]
            state = stateString;

          // [ reject_list | resolve_list ].disable; progress_list.lock
          }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
        }

        // deferred[ resolve | reject | notify ]
        deferred[ tuple[0] ] = function() {
          deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
          return this;
        };
        deferred[ tuple[0] + "With" ] = list.fireWith;
      });

      // Make the deferred a promise
      promise.promise( deferred );

      // Call given func if any
      if ( func ) {
        func.call( deferred, deferred );
      }

      // All done!
      return deferred;
    },

    // Deferred helper
    when: function( subordinate /* , ..., subordinateN */ ) {
      var i = 0,
        resolveValues = slice.call( arguments ),
        length = resolveValues.length,

        // the count of uncompleted subordinates
        remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

        // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
        deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

        // Update function for both resolve and progress values
        updateFunc = function( i, contexts, values ) {
          return function( value ) {
            contexts[ i ] = this;
            values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
            if ( values === progressValues ) {
              deferred.notifyWith( contexts, values );
            } else if ( !( --remaining ) ) {
              deferred.resolveWith( contexts, values );
            }
          };
        },

        progressValues, progressContexts, resolveContexts;

      // Add listeners to Deferred subordinates; treat others as resolved
      if ( length > 1 ) {
        progressValues = new Array( length );
        progressContexts = new Array( length );
        resolveContexts = new Array( length );
        for ( ; i < length; i++ ) {
          if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
            resolveValues[ i ].promise()
              .done( updateFunc( i, resolveContexts, resolveValues ) )
              .fail( deferred.reject )
              .progress( updateFunc( i, progressContexts, progressValues ) );
          } else {
            --remaining;
          }
        }
      }

      // If we're not waiting on anything, resolve the master
      if ( !remaining ) {
        deferred.resolveWith( resolveContexts, resolveValues );
      }

      return deferred.promise();
    }
  });


  // The deferred used on DOM ready
  var readyList;

  jQuery.fn.ready = function( fn ) {
    // Add the callback
    jQuery.ready.promise().done( fn );

    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,

    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,

    // Hold (or release) the ready event
    holdReady: function( hold ) {
      if ( hold ) {
        jQuery.readyWait++;
      } else {
        jQuery.ready( true );
      }
    },

    // Handle when the DOM is ready
    ready: function( wait ) {

      // Abort if there are pending holds or we're already ready
      if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
        return;
      }

      // Remember that the DOM is ready
      jQuery.isReady = true;

      // If a normal DOM Ready event fired, decrement, and wait if need be
      if ( wait !== true && --jQuery.readyWait > 0 ) {
        return;
      }

      // If there are functions bound, to execute
      readyList.resolveWith( document, [ jQuery ] );

      // Trigger any bound ready events
      if ( jQuery.fn.triggerHandler ) {
        jQuery( document ).triggerHandler( "ready" );
        jQuery( document ).off( "ready" );
      }
    }
  });

  /**
   * The ready event handler and self cleanup method
   */
  function completed() {
    document.removeEventListener( "DOMContentLoaded", completed, false );
    window.removeEventListener( "load", completed, false );
    jQuery.ready();
  }

  jQuery.ready.promise = function( obj ) {
    if ( !readyList ) {

      readyList = jQuery.Deferred();

      // Catch cases where $(document).ready() is called after the browser event has already occurred.
      // We once tried to use readyState "interactive" here, but it caused issues like the one
      // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
      if ( document.readyState === "complete" ) {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        setTimeout( jQuery.ready );

      } else {

        // Use the handy event callback
        document.addEventListener( "DOMContentLoaded", completed, false );

        // A fallback to window.onload, that will always work
        window.addEventListener( "load", completed, false );
      }
    }
    return readyList.promise( obj );
  };

  // Kick off the DOM ready check even if the user does not
  jQuery.ready.promise();




  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
    var i = 0,
      len = elems.length,
      bulk = key == null;

    // Sets many values
    if ( jQuery.type( key ) === "object" ) {
      chainable = true;
      for ( i in key ) {
        jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
      }

    // Sets one value
    } else if ( value !== undefined ) {
      chainable = true;

      if ( !jQuery.isFunction( value ) ) {
        raw = true;
      }

      if ( bulk ) {
        // Bulk operations run against the entire set
        if ( raw ) {
          fn.call( elems, value );
          fn = null;

        // ...except when executing function values
        } else {
          bulk = fn;
          fn = function( elem, key, value ) {
            return bulk.call( jQuery( elem ), value );
          };
        }
      }

      if ( fn ) {
        for ( ; i < len; i++ ) {
          fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
        }
      }
    }

    return chainable ?
      elems :

      // Gets
      bulk ?
        fn.call( elems ) :
        len ? fn( elems[0], key ) : emptyGet;
  };


  /**
   * Determines whether an object can have data
   */
  jQuery.acceptData = function( owner ) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    /* jshint -W018 */
    return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
  };


  function Data() {
    // Support: Android<4,
    // Old WebKit does not have Object.preventExtensions/freeze method,
    // return new empty object instead with no [[set]] accessor
    Object.defineProperty( this.cache = {}, 0, {
      get: function() {
        return {};
      }
    });

    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;
  Data.accepts = jQuery.acceptData;

  Data.prototype = {
    key: function( owner ) {
      // We can accept data for non-element nodes in modern browsers,
      // but we should not, see #8335.
      // Always return the key for a frozen object.
      if ( !Data.accepts( owner ) ) {
        return 0;
      }

      var descriptor = {},
        // Check if the owner object already has a cache key
        unlock = owner[ this.expando ];

      // If not, create one
      if ( !unlock ) {
        unlock = Data.uid++;

        // Secure it in a non-enumerable, non-writable property
        try {
          descriptor[ this.expando ] = { value: unlock };
          Object.defineProperties( owner, descriptor );

        // Support: Android<4
        // Fallback to a less secure definition
        } catch ( e ) {
          descriptor[ this.expando ] = unlock;
          jQuery.extend( owner, descriptor );
        }
      }

      // Ensure the cache object
      if ( !this.cache[ unlock ] ) {
        this.cache[ unlock ] = {};
      }

      return unlock;
    },
    set: function( owner, data, value ) {
      var prop,
        // There may be an unlock assigned to this node,
        // if there is no entry for this "owner", create one inline
        // and set the unlock as though an owner entry had always existed
        unlock = this.key( owner ),
        cache = this.cache[ unlock ];

      // Handle: [ owner, key, value ] args
      if ( typeof data === "string" ) {
        cache[ data ] = value;

      // Handle: [ owner, { properties } ] args
      } else {
        // Fresh assignments by object are shallow copied
        if ( jQuery.isEmptyObject( cache ) ) {
          jQuery.extend( this.cache[ unlock ], data );
        // Otherwise, copy the properties one-by-one to the cache object
        } else {
          for ( prop in data ) {
            cache[ prop ] = data[ prop ];
          }
        }
      }
      return cache;
    },
    get: function( owner, key ) {
      // Either a valid cache is found, or will be created.
      // New caches will be created and the unlock returned,
      // allowing direct access to the newly created
      // empty data object. A valid owner object must be provided.
      var cache = this.cache[ this.key( owner ) ];

      return key === undefined ?
        cache : cache[ key ];
    },
    access: function( owner, key, value ) {
      var stored;
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if ( key === undefined ||
          ((key && typeof key === "string") && value === undefined) ) {

        stored = this.get( owner, key );

        return stored !== undefined ?
          stored : this.get( owner, jQuery.camelCase(key) );
      }

      // [*]When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set( owner, key, value );

      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function( owner, key ) {
      var i, name, camel,
        unlock = this.key( owner ),
        cache = this.cache[ unlock ];

      if ( key === undefined ) {
        this.cache[ unlock ] = {};

      } else {
        // Support array or space separated string of keys
        if ( jQuery.isArray( key ) ) {
          // If "name" is an array of keys...
          // When data is initially created, via ("key", "val") signature,
          // keys will be converted to camelCase.
          // Since there is no way to tell _how_ a key was added, remove
          // both plain key and camelCase key. #12786
          // This will only penalize the array argument path.
          name = key.concat( key.map( jQuery.camelCase ) );
        } else {
          camel = jQuery.camelCase( key );
          // Try the string as a key before any manipulation
          if ( key in cache ) {
            name = [ key, camel ];
          } else {
            // If a key with the spaces exists, use it.
            // Otherwise, create an array by matching non-whitespace
            name = camel;
            name = name in cache ?
              [ name ] : ( name.match( rnotwhite ) || [] );
          }
        }

        i = name.length;
        while ( i-- ) {
          delete cache[ name[ i ] ];
        }
      }
    },
    hasData: function( owner ) {
      return !jQuery.isEmptyObject(
        this.cache[ owner[ this.expando ] ] || {}
      );
    },
    discard: function( owner ) {
      if ( owner[ this.expando ] ) {
        delete this.cache[ owner[ this.expando ] ];
      }
    }
  };
  var data_priv = new Data();

  var data_user = new Data();



  //  Implementation Summary
  //
  //  1. Enforce API surface and semantic compatibility with 1.9.x branch
  //  2. Improve the module's maintainability by reducing the storage
  //    paths to a single mechanism.
  //  3. Use the same single mechanism to support "private" and "user" data.
  //  4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //  5. Avoid exposing implementation details on user objects (eg. expando properties)
  //  6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /([A-Z])/g;

  function dataAttr( elem, key, data ) {
    var name;

    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if ( data === undefined && elem.nodeType === 1 ) {
      name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
      data = elem.getAttribute( name );

      if ( typeof data === "string" ) {
        try {
          data = data === "true" ? true :
            data === "false" ? false :
            data === "null" ? null :
            // Only convert to a number if it doesn't change the string
            +data + "" === data ? +data :
            rbrace.test( data ) ? jQuery.parseJSON( data ) :
            data;
        } catch( e ) {}

        // Make sure we set the data so it isn't changed later
        data_user.set( elem, key, data );
      } else {
        data = undefined;
      }
    }
    return data;
  }

  jQuery.extend({
    hasData: function( elem ) {
      return data_user.hasData( elem ) || data_priv.hasData( elem );
    },

    data: function( elem, name, data ) {
      return data_user.access( elem, name, data );
    },

    removeData: function( elem, name ) {
      data_user.remove( elem, name );
    },

    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to data_priv methods, these can be deprecated.
    _data: function( elem, name, data ) {
      return data_priv.access( elem, name, data );
    },

    _removeData: function( elem, name ) {
      data_priv.remove( elem, name );
    }
  });

  jQuery.fn.extend({
    data: function( key, value ) {
      var i, name, data,
        elem = this[ 0 ],
        attrs = elem && elem.attributes;

      // Gets all values
      if ( key === undefined ) {
        if ( this.length ) {
          data = data_user.get( elem );

          if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
            i = attrs.length;
            while ( i-- ) {

              // Support: IE11+
              // The attrs elements can be null (#14894)
              if ( attrs[ i ] ) {
                name = attrs[ i ].name;
                if ( name.indexOf( "data-" ) === 0 ) {
                  name = jQuery.camelCase( name.slice(5) );
                  dataAttr( elem, name, data[ name ] );
                }
              }
            }
            data_priv.set( elem, "hasDataAttrs", true );
          }
        }

        return data;
      }

      // Sets multiple values
      if ( typeof key === "object" ) {
        return this.each(function() {
          data_user.set( this, key );
        });
      }

      return access( this, function( value ) {
        var data,
          camelKey = jQuery.camelCase( key );

        // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.
        if ( elem && value === undefined ) {
          // Attempt to get data from the cache
          // with the key as-is
          data = data_user.get( elem, key );
          if ( data !== undefined ) {
            return data;
          }

          // Attempt to get data from the cache
          // with the key camelized
          data = data_user.get( elem, camelKey );
          if ( data !== undefined ) {
            return data;
          }

          // Attempt to "discover" the data in
          // HTML5 custom data-* attrs
          data = dataAttr( elem, camelKey, undefined );
          if ( data !== undefined ) {
            return data;
          }

          // We tried really hard, but the data doesn't exist.
          return;
        }

        // Set the data...
        this.each(function() {
          // First, attempt to store a copy or reference of any
          // data that might've been store with a camelCased key.
          var data = data_user.get( this, camelKey );

          // For HTML5 data-* attribute interop, we have to
          // store property names with dashes in a camelCase form.
          // This might not apply to all properties...*
          data_user.set( this, camelKey, value );

          // *... In the case of properties that might _actually_
          // have dashes, we need to also store a copy of that
          // unchanged property.
          if ( key.indexOf("-") !== -1 && data !== undefined ) {
            data_user.set( this, key, value );
          }
        });
      }, null, value, arguments.length > 1, null, true );
    },

    removeData: function( key ) {
      return this.each(function() {
        data_user.remove( this, key );
      });
    }
  });


  jQuery.extend({
    queue: function( elem, type, data ) {
      var queue;

      if ( elem ) {
        type = ( type || "fx" ) + "queue";
        queue = data_priv.get( elem, type );

        // Speed up dequeue by getting out quickly if this is just a lookup
        if ( data ) {
          if ( !queue || jQuery.isArray( data ) ) {
            queue = data_priv.access( elem, type, jQuery.makeArray(data) );
          } else {
            queue.push( data );
          }
        }
        return queue || [];
      }
    },

    dequeue: function( elem, type ) {
      type = type || "fx";

      var queue = jQuery.queue( elem, type ),
        startLength = queue.length,
        fn = queue.shift(),
        hooks = jQuery._queueHooks( elem, type ),
        next = function() {
          jQuery.dequeue( elem, type );
        };

      // If the fx queue is dequeued, always remove the progress sentinel
      if ( fn === "inprogress" ) {
        fn = queue.shift();
        startLength--;
      }

      if ( fn ) {

        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if ( type === "fx" ) {
          queue.unshift( "inprogress" );
        }

        // Clear up the last queue stop function
        delete hooks.stop;
        fn.call( elem, next, hooks );
      }

      if ( !startLength && hooks ) {
        hooks.empty.fire();
      }
    },

    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function( elem, type ) {
      var key = type + "queueHooks";
      return data_priv.get( elem, key ) || data_priv.access( elem, key, {
        empty: jQuery.Callbacks("once memory").add(function() {
          data_priv.remove( elem, [ type + "queue", key ] );
        })
      });
    }
  });

  jQuery.fn.extend({
    queue: function( type, data ) {
      var setter = 2;

      if ( typeof type !== "string" ) {
        data = type;
        type = "fx";
        setter--;
      }

      if ( arguments.length < setter ) {
        return jQuery.queue( this[0], type );
      }

      return data === undefined ?
        this :
        this.each(function() {
          var queue = jQuery.queue( this, type, data );

          // Ensure a hooks for this queue
          jQuery._queueHooks( this, type );

          if ( type === "fx" && queue[0] !== "inprogress" ) {
            jQuery.dequeue( this, type );
          }
        });
    },
    dequeue: function( type ) {
      return this.each(function() {
        jQuery.dequeue( this, type );
      });
    },
    clearQueue: function( type ) {
      return this.queue( type || "fx", [] );
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function( type, obj ) {
      var tmp,
        count = 1,
        defer = jQuery.Deferred(),
        elements = this,
        i = this.length,
        resolve = function() {
          if ( !( --count ) ) {
            defer.resolveWith( elements, [ elements ] );
          }
        };

      if ( typeof type !== "string" ) {
        obj = type;
        type = undefined;
      }
      type = type || "fx";

      while ( i-- ) {
        tmp = data_priv.get( elements[ i ], type + "queueHooks" );
        if ( tmp && tmp.empty ) {
          count++;
          tmp.empty.add( resolve );
        }
      }
      resolve();
      return defer.promise( obj );
    }
  });
  var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

  var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

  var isHidden = function( elem, el ) {
      // isHidden might be called from jQuery#filter function;
      // in that case, element will be second argument
      elem = el || elem;
      return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
    };

  var rcheckableType = (/^(?:checkbox|radio)$/i);



  (function() {
    var fragment = document.createDocumentFragment(),
      div = fragment.appendChild( document.createElement( "div" ) ),
      input = document.createElement( "input" );

    // Support: Safari<=5.1
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)
    input.setAttribute( "type", "radio" );
    input.setAttribute( "checked", "checked" );
    input.setAttribute( "name", "t" );

    div.appendChild( input );

    // Support: Safari<=5.1, Android<4.2
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

    // Support: IE<=11+
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
  })();
  var strundefined = typeof undefined;



  support.focusinBubbles = "onfocusin" in window;


  var
    rkeyEvent = /^key/,
    rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  }

  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch ( err ) { }
  }

  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  jQuery.event = {

    global: {},

    add: function( elem, types, handler, data, selector ) {

      var handleObjIn, eventHandle, tmp,
        events, t, handleObj,
        special, handlers, type, namespaces, origType,
        elemData = data_priv.get( elem );

      // Don't attach events to noData or text/comment nodes (but allow plain objects)
      if ( !elemData ) {
        return;
      }

      // Caller can pass in an object of custom data in lieu of the handler
      if ( handler.handler ) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }

      // Make sure that the handler has a unique ID, used to find/remove it later
      if ( !handler.guid ) {
        handler.guid = jQuery.guid++;
      }

      // Init the element's event structure and main handler, if this is the first
      if ( !(events = elemData.events) ) {
        events = elemData.events = {};
      }
      if ( !(eventHandle = elemData.handle) ) {
        eventHandle = elemData.handle = function( e ) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
            jQuery.event.dispatch.apply( elem, arguments ) : undefined;
        };
      }

      // Handle multiple events separated by a space
      types = ( types || "" ).match( rnotwhite ) || [ "" ];
      t = types.length;
      while ( t-- ) {
        tmp = rtypenamespace.exec( types[t] ) || [];
        type = origType = tmp[1];
        namespaces = ( tmp[2] || "" ).split( "." ).sort();

        // There *must* be a type, no attaching namespace-only handlers
        if ( !type ) {
          continue;
        }

        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[ type ] || {};

        // If selector defined, determine special event api type, otherwise given type
        type = ( selector ? special.delegateType : special.bindType ) || type;

        // Update special based on newly reset type
        special = jQuery.event.special[ type ] || {};

        // handleObj is passed to all event handlers
        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
          namespace: namespaces.join(".")
        }, handleObjIn );

        // Init the event handler queue if we're the first
        if ( !(handlers = events[ type ]) ) {
          handlers = events[ type ] = [];
          handlers.delegateCount = 0;

          // Only use addEventListener if the special events handler returns false
          if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
            if ( elem.addEventListener ) {
              elem.addEventListener( type, eventHandle, false );
            }
          }
        }

        if ( special.add ) {
          special.add.call( elem, handleObj );

          if ( !handleObj.handler.guid ) {
            handleObj.handler.guid = handler.guid;
          }
        }

        // Add to the element's handler list, delegates in front
        if ( selector ) {
          handlers.splice( handlers.delegateCount++, 0, handleObj );
        } else {
          handlers.push( handleObj );
        }

        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[ type ] = true;
      }

    },

    // Detach an event or set of events from an element
    remove: function( elem, types, handler, selector, mappedTypes ) {

      var j, origCount, tmp,
        events, t, handleObj,
        special, handlers, type, namespaces, origType,
        elemData = data_priv.hasData( elem ) && data_priv.get( elem );

      if ( !elemData || !(events = elemData.events) ) {
        return;
      }

      // Once for each type.namespace in types; type may be omitted
      types = ( types || "" ).match( rnotwhite ) || [ "" ];
      t = types.length;
      while ( t-- ) {
        tmp = rtypenamespace.exec( types[t] ) || [];
        type = origType = tmp[1];
        namespaces = ( tmp[2] || "" ).split( "." ).sort();

        // Unbind all events (on this namespace, if provided) for the element
        if ( !type ) {
          for ( type in events ) {
            jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
          }
          continue;
        }

        special = jQuery.event.special[ type ] || {};
        type = ( selector ? special.delegateType : special.bindType ) || type;
        handlers = events[ type ] || [];
        tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

        // Remove matching events
        origCount = j = handlers.length;
        while ( j-- ) {
          handleObj = handlers[ j ];

          if ( ( mappedTypes || origType === handleObj.origType ) &&
            ( !handler || handler.guid === handleObj.guid ) &&
            ( !tmp || tmp.test( handleObj.namespace ) ) &&
            ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
            handlers.splice( j, 1 );

            if ( handleObj.selector ) {
              handlers.delegateCount--;
            }
            if ( special.remove ) {
              special.remove.call( elem, handleObj );
            }
          }
        }

        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if ( origCount && !handlers.length ) {
          if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
            jQuery.removeEvent( elem, type, elemData.handle );
          }

          delete events[ type ];
        }
      }

      // Remove the expando if it's no longer used
      if ( jQuery.isEmptyObject( events ) ) {
        delete elemData.handle;
        data_priv.remove( elem, "events" );
      }
    },

    trigger: function( event, data, elem, onlyHandlers ) {

      var i, cur, tmp, bubbleType, ontype, handle, special,
        eventPath = [ elem || document ],
        type = hasOwn.call( event, "type" ) ? event.type : event,
        namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

      cur = tmp = elem = elem || document;

      // Don't do events on text and comment nodes
      if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
        return;
      }

      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
        return;
      }

      if ( type.indexOf(".") >= 0 ) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(":") < 0 && "on" + type;

      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[ jQuery.expando ] ?
        event :
        new jQuery.Event( type, typeof event === "object" && event );

      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.namespace_re = event.namespace ?
        new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
        null;

      // Clean up the event in case it is being reused
      event.result = undefined;
      if ( !event.target ) {
        event.target = elem;
      }

      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ?
        [ event ] :
        jQuery.makeArray( data, [ event ] );

      // Allow special events to draw outside the lines
      special = jQuery.event.special[ type ] || {};
      if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
        return;
      }

      // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
      if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

        bubbleType = special.delegateType || type;
        if ( !rfocusMorph.test( bubbleType + type ) ) {
          cur = cur.parentNode;
        }
        for ( ; cur; cur = cur.parentNode ) {
          eventPath.push( cur );
          tmp = cur;
        }

        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if ( tmp === (elem.ownerDocument || document) ) {
          eventPath.push( tmp.defaultView || tmp.parentWindow || window );
        }
      }

      // Fire handlers on the event path
      i = 0;
      while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

        event.type = i > 1 ?
          bubbleType :
          special.bindType || type;

        // jQuery handler
        handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
        if ( handle ) {
          handle.apply( cur, data );
        }

        // Native handler
        handle = ontype && cur[ ontype ];
        if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
          event.result = handle.apply( cur, data );
          if ( event.result === false ) {
            event.preventDefault();
          }
        }
      }
      event.type = type;

      // If nobody prevented the default action, do it now
      if ( !onlyHandlers && !event.isDefaultPrevented() ) {

        if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
          jQuery.acceptData( elem ) ) {

          // Call a native DOM method on the target with the same name name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ ontype ];

            if ( tmp ) {
              elem[ ontype ] = null;
            }

            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;
            elem[ type ]();
            jQuery.event.triggered = undefined;

            if ( tmp ) {
              elem[ ontype ] = tmp;
            }
          }
        }
      }

      return event.result;
    },

    dispatch: function( event ) {

      // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix( event );

      var i, j, ret, matched, handleObj,
        handlerQueue = [],
        args = slice.call( arguments ),
        handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
        special = jQuery.event.special[ event.type ] || {};

      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;
      event.delegateTarget = this;

      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
        return;
      }

      // Determine handlers
      handlerQueue = jQuery.event.handlers.call( this, event, handlers );

      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
        event.currentTarget = matched.elem;

        j = 0;
        while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

          // Triggered event must either 1) have no namespace, or 2) have namespace(s)
          // a subset or equal to those in the bound event (both can have no namespace).
          if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

            event.handleObj = handleObj;
            event.data = handleObj.data;

            ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
                .apply( matched.elem, args );

            if ( ret !== undefined ) {
              if ( (event.result = ret) === false ) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }

      // Call the postDispatch hook for the mapped type
      if ( special.postDispatch ) {
        special.postDispatch.call( this, event );
      }

      return event.result;
    },

    handlers: function( event, handlers ) {
      var i, matches, sel, handleObj,
        handlerQueue = [],
        delegateCount = handlers.delegateCount,
        cur = event.target;

      // Find delegate handlers
      // Black-hole SVG <use> instance trees (#13180)
      // Avoid non-left-click bubbling in Firefox (#3861)
      if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

        for ( ; cur !== this; cur = cur.parentNode || this ) {

          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if ( cur.disabled !== true || event.type !== "click" ) {
            matches = [];
            for ( i = 0; i < delegateCount; i++ ) {
              handleObj = handlers[ i ];

              // Don't conflict with Object.prototype properties (#13203)
              sel = handleObj.selector + " ";

              if ( matches[ sel ] === undefined ) {
                matches[ sel ] = handleObj.needsContext ?
                  jQuery( sel, this ).index( cur ) >= 0 :
                  jQuery.find( sel, this, null, [ cur ] ).length;
              }
              if ( matches[ sel ] ) {
                matches.push( handleObj );
              }
            }
            if ( matches.length ) {
              handlerQueue.push({ elem: cur, handlers: matches });
            }
          }
        }
      }

      // Add the remaining (directly-bound) handlers
      if ( delegateCount < handlers.length ) {
        handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
      }

      return handlerQueue;
    },

    // Includes some event props shared by KeyEvent and MouseEvent
    props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

    fixHooks: {},

    keyHooks: {
      props: "char charCode key keyCode".split(" "),
      filter: function( event, original ) {

        // Add which for key events
        if ( event.which == null ) {
          event.which = original.charCode != null ? original.charCode : original.keyCode;
        }

        return event;
      }
    },

    mouseHooks: {
      props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
      filter: function( event, original ) {
        var eventDoc, doc, body,
          button = original.button;

        // Calculate pageX/Y if missing and clientX/Y available
        if ( event.pageX == null && original.clientX != null ) {
          eventDoc = event.target.ownerDocument || document;
          doc = eventDoc.documentElement;
          body = eventDoc.body;

          event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
          event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
        }

        // Add which for click: 1 === left; 2 === middle; 3 === right
        // Note: button is not normalized, so don't use it
        if ( !event.which && button !== undefined ) {
          event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
        }

        return event;
      }
    },

    fix: function( event ) {
      if ( event[ jQuery.expando ] ) {
        return event;
      }

      // Create a writable copy of the event object and normalize some properties
      var i, prop, copy,
        type = event.type,
        originalEvent = event,
        fixHook = this.fixHooks[ type ];

      if ( !fixHook ) {
        this.fixHooks[ type ] = fixHook =
          rmouseEvent.test( type ) ? this.mouseHooks :
          rkeyEvent.test( type ) ? this.keyHooks :
          {};
      }
      copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

      event = new jQuery.Event( originalEvent );

      i = copy.length;
      while ( i-- ) {
        prop = copy[ i ];
        event[ prop ] = originalEvent[ prop ];
      }

      // Support: Cordova 2.5 (WebKit) (#13255)
      // All events should have a target; Cordova deviceready doesn't
      if ( !event.target ) {
        event.target = document;
      }

      // Support: Safari 6.0+, Chrome<28
      // Target should not be a text node (#504, #13143)
      if ( event.target.nodeType === 3 ) {
        event.target = event.target.parentNode;
      }

      return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
    },

    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      focus: {
        // Fire native event if possible so blur/focus sequence is correct
        trigger: function() {
          if ( this !== safeActiveElement() && this.focus ) {
            this.focus();
            return false;
          }
        },
        delegateType: "focusin"
      },
      blur: {
        trigger: function() {
          if ( this === safeActiveElement() && this.blur ) {
            this.blur();
            return false;
          }
        },
        delegateType: "focusout"
      },
      click: {
        // For checkbox, fire native event so checked state will be right
        trigger: function() {
          if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
            this.click();
            return false;
          }
        },

        // For cross-browser consistency, don't fire native .click() on links
        _default: function( event ) {
          return jQuery.nodeName( event.target, "a" );
        }
      },

      beforeunload: {
        postDispatch: function( event ) {

          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if ( event.result !== undefined && event.originalEvent ) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    },

    simulate: function( type, elem, event, bubble ) {
      // Piggyback on a donor event to simulate a different one.
      // Fake originalEvent to avoid donor's stopPropagation, but if the
      // simulated event prevents default then we do the same on the donor.
      var e = jQuery.extend(
        new jQuery.Event(),
        event,
        {
          type: type,
          isSimulated: true,
          originalEvent: {}
        }
      );
      if ( bubble ) {
        jQuery.event.trigger( e, null, elem );
      } else {
        jQuery.event.dispatch.call( elem, e );
      }
      if ( e.isDefaultPrevented() ) {
        event.preventDefault();
      }
    }
  };

  jQuery.removeEvent = function( elem, type, handle ) {
    if ( elem.removeEventListener ) {
      elem.removeEventListener( type, handle, false );
    }
  };

  jQuery.Event = function( src, props ) {
    // Allow instantiation without the 'new' keyword
    if ( !(this instanceof jQuery.Event) ) {
      return new jQuery.Event( src, props );
    }

    // Event object
    if ( src && src.type ) {
      this.originalEvent = src;
      this.type = src.type;

      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented = src.defaultPrevented ||
          src.defaultPrevented === undefined &&
          // Support: Android<4.0
          src.returnValue === false ?
        returnTrue :
        returnFalse;

    // Event type
    } else {
      this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if ( props ) {
      jQuery.extend( this, props );
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || jQuery.now();

    // Mark it as fixed
    this[ jQuery.expando ] = true;
  };

  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,

    preventDefault: function() {
      var e = this.originalEvent;

      this.isDefaultPrevented = returnTrue;

      if ( e && e.preventDefault ) {
        e.preventDefault();
      }
    },
    stopPropagation: function() {
      var e = this.originalEvent;

      this.isPropagationStopped = returnTrue;

      if ( e && e.stopPropagation ) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function() {
      var e = this.originalEvent;

      this.isImmediatePropagationStopped = returnTrue;

      if ( e && e.stopImmediatePropagation ) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  };

  // Create mouseenter/leave events using mouseover/out and event-time checks
  // Support: Chrome 15+
  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function( orig, fix ) {
    jQuery.event.special[ orig ] = {
      delegateType: fix,
      bindType: fix,

      handle: function( event ) {
        var ret,
          target = this,
          related = event.relatedTarget,
          handleObj = event.handleObj;

        // For mousenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply( this, arguments );
          event.type = fix;
        }
        return ret;
      }
    };
  });

  // Support: Firefox, Chrome, Safari
  // Create "bubbling" focus and blur events
  if ( !support.focusinBubbles ) {
    jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function( event ) {
          jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
        };

      jQuery.event.special[ fix ] = {
        setup: function() {
          var doc = this.ownerDocument || this,
            attaches = data_priv.access( doc, fix );

          if ( !attaches ) {
            doc.addEventListener( orig, handler, true );
          }
          data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
        },
        teardown: function() {
          var doc = this.ownerDocument || this,
            attaches = data_priv.access( doc, fix ) - 1;

          if ( !attaches ) {
            doc.removeEventListener( orig, handler, true );
            data_priv.remove( doc, fix );

          } else {
            data_priv.access( doc, fix, attaches );
          }
        }
      };
    });
  }

  jQuery.fn.extend({

    on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
      var origFn, type;

      // Types can be a map of types/handlers
      if ( typeof types === "object" ) {
        // ( types-Object, selector, data )
        if ( typeof selector !== "string" ) {
          // ( types-Object, data )
          data = data || selector;
          selector = undefined;
        }
        for ( type in types ) {
          this.on( type, selector, data, types[ type ], one );
        }
        return this;
      }

      if ( data == null && fn == null ) {
        // ( types, fn )
        fn = selector;
        data = selector = undefined;
      } else if ( fn == null ) {
        if ( typeof selector === "string" ) {
          // ( types, selector, fn )
          fn = data;
          data = undefined;
        } else {
          // ( types, data, fn )
          fn = data;
          data = selector;
          selector = undefined;
        }
      }
      if ( fn === false ) {
        fn = returnFalse;
      } else if ( !fn ) {
        return this;
      }

      if ( one === 1 ) {
        origFn = fn;
        fn = function( event ) {
          // Can use an empty set, since event contains the info
          jQuery().off( event );
          return origFn.apply( this, arguments );
        };
        // Use same guid so caller can remove using origFn
        fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
      }
      return this.each( function() {
        jQuery.event.add( this, types, fn, data, selector );
      });
    },
    one: function( types, selector, data, fn ) {
      return this.on( types, selector, data, fn, 1 );
    },
    off: function( types, selector, fn ) {
      var handleObj, type;
      if ( types && types.preventDefault && types.handleObj ) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery( types.delegateTarget ).off(
          handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
          handleObj.selector,
          handleObj.handler
        );
        return this;
      }
      if ( typeof types === "object" ) {
        // ( types-object [, selector] )
        for ( type in types ) {
          this.off( type, selector, types[ type ] );
        }
        return this;
      }
      if ( selector === false || typeof selector === "function" ) {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if ( fn === false ) {
        fn = returnFalse;
      }
      return this.each(function() {
        jQuery.event.remove( this, types, fn, selector );
      });
    },

    trigger: function( type, data ) {
      return this.each(function() {
        jQuery.event.trigger( type, data, this );
      });
    },
    triggerHandler: function( type, data ) {
      var elem = this[0];
      if ( elem ) {
        return jQuery.event.trigger( type, data, elem, true );
      }
    }
  });


  var
    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
    rtagName = /<([\w:]+)/,
    rhtml = /<|&#?\w+;/,
    rnoInnerhtml = /<(?:script|style|link)/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rscriptType = /^$|\/(?:java|ecma)script/i,
    rscriptTypeMasked = /^true\/(.*)/,
    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

    // We have to close these tags to support XHTML (#13200)
    wrapMap = {

      // Support: IE9
      option: [ 1, "<select multiple='multiple'>", "</select>" ],

      thead: [ 1, "<table>", "</table>" ],
      col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
      tr: [ 2, "<table><tbody>", "</tbody></table>" ],
      td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

      _default: [ 0, "", "" ]
    };

  // Support: IE9
  wrapMap.optgroup = wrapMap.option;

  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  // Support: 1.x compatibility
  // Manipulating tables requires a tbody
  function manipulationTarget( elem, content ) {
    return jQuery.nodeName( elem, "table" ) &&
      jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

      elem.getElementsByTagName("tbody")[0] ||
        elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
      elem;
  }

  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript( elem ) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }
  function restoreScript( elem ) {
    var match = rscriptTypeMasked.exec( elem.type );

    if ( match ) {
      elem.type = match[ 1 ];
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  // Mark scripts as having already been evaluated
  function setGlobalEval( elems, refElements ) {
    var i = 0,
      l = elems.length;

    for ( ; i < l; i++ ) {
      data_priv.set(
        elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
      );
    }
  }

  function cloneCopyEvent( src, dest ) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

    if ( dest.nodeType !== 1 ) {
      return;
    }

    // 1. Copy private data: events, handlers, etc.
    if ( data_priv.hasData( src ) ) {
      pdataOld = data_priv.access( src );
      pdataCur = data_priv.set( dest, pdataOld );
      events = pdataOld.events;

      if ( events ) {
        delete pdataCur.handle;
        pdataCur.events = {};

        for ( type in events ) {
          for ( i = 0, l = events[ type ].length; i < l; i++ ) {
            jQuery.event.add( dest, type, events[ type ][ i ] );
          }
        }
      }
    }

    // 2. Copy user data
    if ( data_user.hasData( src ) ) {
      udataOld = data_user.access( src );
      udataCur = jQuery.extend( {}, udataOld );

      data_user.set( dest, udataCur );
    }
  }

  function getAll( context, tag ) {
    var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
        context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
        [];

    return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
      jQuery.merge( [ context ], ret ) :
      ret;
  }

  // Fix IE bugs, see support tests
  function fixInput( src, dest ) {
    var nodeName = dest.nodeName.toLowerCase();

    // Fails to persist the checked state of a cloned checkbox or radio button.
    if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
      dest.checked = src.checked;

    // Fails to return the selected option to the default selected state when cloning options
    } else if ( nodeName === "input" || nodeName === "textarea" ) {
      dest.defaultValue = src.defaultValue;
    }
  }

  jQuery.extend({
    clone: function( elem, dataAndEvents, deepDataAndEvents ) {
      var i, l, srcElements, destElements,
        clone = elem.cloneNode( true ),
        inPage = jQuery.contains( elem.ownerDocument, elem );

      // Fix IE cloning issues
      if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
          !jQuery.isXMLDoc( elem ) ) {

        // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
        destElements = getAll( clone );
        srcElements = getAll( elem );

        for ( i = 0, l = srcElements.length; i < l; i++ ) {
          fixInput( srcElements[ i ], destElements[ i ] );
        }
      }

      // Copy the events from the original to the clone
      if ( dataAndEvents ) {
        if ( deepDataAndEvents ) {
          srcElements = srcElements || getAll( elem );
          destElements = destElements || getAll( clone );

          for ( i = 0, l = srcElements.length; i < l; i++ ) {
            cloneCopyEvent( srcElements[ i ], destElements[ i ] );
          }
        } else {
          cloneCopyEvent( elem, clone );
        }
      }

      // Preserve script evaluation history
      destElements = getAll( clone, "script" );
      if ( destElements.length > 0 ) {
        setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
      }

      // Return the cloned set
      return clone;
    },

    buildFragment: function( elems, context, scripts, selection ) {
      var elem, tmp, tag, wrap, contains, j,
        fragment = context.createDocumentFragment(),
        nodes = [],
        i = 0,
        l = elems.length;

      for ( ; i < l; i++ ) {
        elem = elems[ i ];

        if ( elem || elem === 0 ) {

          // Add nodes directly
          if ( jQuery.type( elem ) === "object" ) {
            // Support: QtWebKit, PhantomJS
            // push.apply(_, arraylike) throws on ancient WebKit
            jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

          // Convert non-html into a text node
          } else if ( !rhtml.test( elem ) ) {
            nodes.push( context.createTextNode( elem ) );

          // Convert html into DOM nodes
          } else {
            tmp = tmp || fragment.appendChild( context.createElement("div") );

            // Deserialize a standard representation
            tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
            wrap = wrapMap[ tag ] || wrapMap._default;
            tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

            // Descend through wrappers to the right content
            j = wrap[ 0 ];
            while ( j-- ) {
              tmp = tmp.lastChild;
            }

            // Support: QtWebKit, PhantomJS
            // push.apply(_, arraylike) throws on ancient WebKit
            jQuery.merge( nodes, tmp.childNodes );

            // Remember the top-level container
            tmp = fragment.firstChild;

            // Ensure the created nodes are orphaned (#12392)
            tmp.textContent = "";
          }
        }
      }

      // Remove wrapper from fragment
      fragment.textContent = "";

      i = 0;
      while ( (elem = nodes[ i++ ]) ) {

        // #4087 - If origin and destination elements are the same, and this is
        // that element, do not do anything
        if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
          continue;
        }

        contains = jQuery.contains( elem.ownerDocument, elem );

        // Append to fragment
        tmp = getAll( fragment.appendChild( elem ), "script" );

        // Preserve script evaluation history
        if ( contains ) {
          setGlobalEval( tmp );
        }

        // Capture executables
        if ( scripts ) {
          j = 0;
          while ( (elem = tmp[ j++ ]) ) {
            if ( rscriptType.test( elem.type || "" ) ) {
              scripts.push( elem );
            }
          }
        }
      }

      return fragment;
    },

    cleanData: function( elems ) {
      var data, elem, type, key,
        special = jQuery.event.special,
        i = 0;

      for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
        if ( jQuery.acceptData( elem ) ) {
          key = elem[ data_priv.expando ];

          if ( key && (data = data_priv.cache[ key ]) ) {
            if ( data.events ) {
              for ( type in data.events ) {
                if ( special[ type ] ) {
                  jQuery.event.remove( elem, type );

                // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent( elem, type, data.handle );
                }
              }
            }
            if ( data_priv.cache[ key ] ) {
              // Discard any remaining `private` data
              delete data_priv.cache[ key ];
            }
          }
        }
        // Discard any remaining `user` data
        delete data_user.cache[ elem[ data_user.expando ] ];
      }
    }
  });

  jQuery.fn.extend({
    text: function( value ) {
      return access( this, function( value ) {
        return value === undefined ?
          jQuery.text( this ) :
          this.empty().each(function() {
            if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
              this.textContent = value;
            }
          });
      }, null, value, arguments.length );
    },

    append: function() {
      return this.domManip( arguments, function( elem ) {
        if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
          var target = manipulationTarget( this, elem );
          target.appendChild( elem );
        }
      });
    },

    prepend: function() {
      return this.domManip( arguments, function( elem ) {
        if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
          var target = manipulationTarget( this, elem );
          target.insertBefore( elem, target.firstChild );
        }
      });
    },

    before: function() {
      return this.domManip( arguments, function( elem ) {
        if ( this.parentNode ) {
          this.parentNode.insertBefore( elem, this );
        }
      });
    },

    after: function() {
      return this.domManip( arguments, function( elem ) {
        if ( this.parentNode ) {
          this.parentNode.insertBefore( elem, this.nextSibling );
        }
      });
    },

    remove: function( selector, keepData /* Internal Use Only */ ) {
      var elem,
        elems = selector ? jQuery.filter( selector, this ) : this,
        i = 0;

      for ( ; (elem = elems[i]) != null; i++ ) {
        if ( !keepData && elem.nodeType === 1 ) {
          jQuery.cleanData( getAll( elem ) );
        }

        if ( elem.parentNode ) {
          if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
            setGlobalEval( getAll( elem, "script" ) );
          }
          elem.parentNode.removeChild( elem );
        }
      }

      return this;
    },

    empty: function() {
      var elem,
        i = 0;

      for ( ; (elem = this[i]) != null; i++ ) {
        if ( elem.nodeType === 1 ) {

          // Prevent memory leaks
          jQuery.cleanData( getAll( elem, false ) );

          // Remove any remaining nodes
          elem.textContent = "";
        }
      }

      return this;
    },

    clone: function( dataAndEvents, deepDataAndEvents ) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

      return this.map(function() {
        return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
      });
    },

    html: function( value ) {
      return access( this, function( value ) {
        var elem = this[ 0 ] || {},
          i = 0,
          l = this.length;

        if ( value === undefined && elem.nodeType === 1 ) {
          return elem.innerHTML;
        }

        // See if we can take a shortcut and just use innerHTML
        if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
          !wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

          value = value.replace( rxhtmlTag, "<$1></$2>" );

          try {
            for ( ; i < l; i++ ) {
              elem = this[ i ] || {};

              // Remove element nodes and prevent memory leaks
              if ( elem.nodeType === 1 ) {
                jQuery.cleanData( getAll( elem, false ) );
                elem.innerHTML = value;
              }
            }

            elem = 0;

          // If using innerHTML throws an exception, use the fallback method
          } catch( e ) {}
        }

        if ( elem ) {
          this.empty().append( value );
        }
      }, null, value, arguments.length );
    },

    replaceWith: function() {
      var arg = arguments[ 0 ];

      // Make the changes, replacing each context element with the new content
      this.domManip( arguments, function( elem ) {
        arg = this.parentNode;

        jQuery.cleanData( getAll( this ) );

        if ( arg ) {
          arg.replaceChild( elem, this );
        }
      });

      // Force removal if there was no new content (e.g., from empty arguments)
      return arg && (arg.length || arg.nodeType) ? this : this.remove();
    },

    detach: function( selector ) {
      return this.remove( selector, true );
    },

    domManip: function( args, callback ) {

      // Flatten any nested arrays
      args = concat.apply( [], args );

      var fragment, first, scripts, hasScripts, node, doc,
        i = 0,
        l = this.length,
        set = this,
        iNoClone = l - 1,
        value = args[ 0 ],
        isFunction = jQuery.isFunction( value );

      // We can't cloneNode fragments that contain checked, in WebKit
      if ( isFunction ||
          ( l > 1 && typeof value === "string" &&
            !support.checkClone && rchecked.test( value ) ) ) {
        return this.each(function( index ) {
          var self = set.eq( index );
          if ( isFunction ) {
            args[ 0 ] = value.call( this, index, self.html() );
          }
          self.domManip( args, callback );
        });
      }

      if ( l ) {
        fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
        first = fragment.firstChild;

        if ( fragment.childNodes.length === 1 ) {
          fragment = first;
        }

        if ( first ) {
          scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
          hasScripts = scripts.length;

          // Use the original fragment for the last item instead of the first because it can end up
          // being emptied incorrectly in certain situations (#8070).
          for ( ; i < l; i++ ) {
            node = fragment;

            if ( i !== iNoClone ) {
              node = jQuery.clone( node, true, true );

              // Keep references to cloned scripts for later restoration
              if ( hasScripts ) {
                // Support: QtWebKit
                // jQuery.merge because push.apply(_, arraylike) throws
                jQuery.merge( scripts, getAll( node, "script" ) );
              }
            }

            callback.call( this[ i ], node, i );
          }

          if ( hasScripts ) {
            doc = scripts[ scripts.length - 1 ].ownerDocument;

            // Reenable scripts
            jQuery.map( scripts, restoreScript );

            // Evaluate executable scripts on first document insertion
            for ( i = 0; i < hasScripts; i++ ) {
              node = scripts[ i ];
              if ( rscriptType.test( node.type || "" ) &&
                !data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

                if ( node.src ) {
                  // Optional AJAX dependency, but won't run scripts if not present
                  if ( jQuery._evalUrl ) {
                    jQuery._evalUrl( node.src );
                  }
                } else {
                  jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
                }
              }
            }
          }
        }
      }

      return this;
    }
  });

  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function( name, original ) {
    jQuery.fn[ name ] = function( selector ) {
      var elems,
        ret = [],
        insert = jQuery( selector ),
        last = insert.length - 1,
        i = 0;

      for ( ; i <= last; i++ ) {
        elems = i === last ? this : this.clone( true );
        jQuery( insert[ i ] )[ original ]( elems );

        // Support: QtWebKit
        // .get() because push.apply(_, arraylike) throws
        push.apply( ret, elems.get() );
      }

      return this.pushStack( ret );
    };
  });


  var iframe,
    elemdisplay = {};

  /**
   * Retrieve the actual display of a element
   * @param {String} name nodeName of the element
   * @param {Object} doc Document object
   */
  // Called only from within defaultDisplay
  function actualDisplay( name, doc ) {
    var style,
      elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

      // getDefaultComputedStyle might be reliably used only on attached element
      display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

        // Use of this method is a temporary fix (more like optimization) until something better comes along,
        // since it was removed from specification and supported only in FF
        style.display : jQuery.css( elem[ 0 ], "display" );

    // We don't have any data stored on the element,
    // so use "detach" method as fast way to get rid of the element
    elem.detach();

    return display;
  }

  /**
   * Try to determine the default display value of an element
   * @param {String} nodeName
   */
  function defaultDisplay( nodeName ) {
    var doc = document,
      display = elemdisplay[ nodeName ];

    if ( !display ) {
      display = actualDisplay( nodeName, doc );

      // If the simple way fails, read from inside an iframe
      if ( display === "none" || !display ) {

        // Use the already-created iframe if possible
        iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

        // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
        doc = iframe[ 0 ].contentDocument;

        // Support: IE
        doc.write();
        doc.close();

        display = actualDisplay( nodeName, doc );
        iframe.detach();
      }

      // Store the correct default display
      elemdisplay[ nodeName ] = display;
    }

    return display;
  }
  var rmargin = (/^margin/);

  var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

  var getStyles = function( elem ) {
      // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
      // IE throws on elements created in popups
      // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
      if ( elem.ownerDocument.defaultView.opener ) {
        return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
      }

      return window.getComputedStyle( elem, null );
    };



  function curCSS( elem, name, computed ) {
    var width, minWidth, maxWidth, ret,
      style = elem.style;

    computed = computed || getStyles( elem );

    // Support: IE9
    // getPropertyValue is only needed for .css('filter') (#12537)
    if ( computed ) {
      ret = computed.getPropertyValue( name ) || computed[ name ];
    }

    if ( computed ) {

      if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
        ret = jQuery.style( elem, name );
      }

      // Support: iOS < 6
      // A tribute to the "awesome hack by Dean Edwards"
      // iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
      // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
      if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;

        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;

        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined ?
      // Support: IE
      // IE returns zIndex value as an integer.
      ret + "" :
      ret;
  }


  function addGetHookIf( conditionFn, hookFn ) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function() {
        if ( conditionFn() ) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        }

        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply( this, arguments );
      }
    };
  }


  (function() {
    var pixelPositionVal, boxSizingReliableVal,
      docElem = document.documentElement,
      container = document.createElement( "div" ),
      div = document.createElement( "div" );

    if ( !div.style ) {
      return;
    }

    // Support: IE9-11+
    // Style of cloned element affects source element cloned (#8908)
    div.style.backgroundClip = "content-box";
    div.cloneNode( true ).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";

    container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
      "position:absolute";
    container.appendChild( div );

    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computePixelPositionAndBoxSizingReliable() {
      div.style.cssText =
        // Support: Firefox<29, Android 2.3
        // Vendor-prefix box-sizing
        "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
        "box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
        "border:1px;padding:1px;width:4px;position:absolute";
      div.innerHTML = "";
      docElem.appendChild( container );

      var divStyle = window.getComputedStyle( div, null );
      pixelPositionVal = divStyle.top !== "1%";
      boxSizingReliableVal = divStyle.width === "4px";

      docElem.removeChild( container );
    }

    // Support: node.js jsdom
    // Don't assume that getComputedStyle is a property of the global object
    if ( window.getComputedStyle ) {
      jQuery.extend( support, {
        pixelPosition: function() {

          // This test is executed only once but we still do memoizing
          // since we can use the boxSizingReliable pre-computing.
          // No need to check if the test was already performed, though.
          computePixelPositionAndBoxSizingReliable();
          return pixelPositionVal;
        },
        boxSizingReliable: function() {
          if ( boxSizingReliableVal == null ) {
            computePixelPositionAndBoxSizingReliable();
          }
          return boxSizingReliableVal;
        },
        reliableMarginRight: function() {

          // Support: Android 2.3
          // Check if div with explicit width and no margin-right incorrectly
          // gets computed margin-right based on width of container. (#3333)
          // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
          // This support function is only executed once so no memoizing is needed.
          var ret,
            marginDiv = div.appendChild( document.createElement( "div" ) );

          // Reset CSS: box-sizing; display; margin; border; padding
          marginDiv.style.cssText = div.style.cssText =
            // Support: Firefox<29, Android 2.3
            // Vendor-prefix box-sizing
            "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
            "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
          marginDiv.style.marginRight = marginDiv.style.width = "0";
          div.style.width = "1px";
          docElem.appendChild( container );

          ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

          docElem.removeChild( container );
          div.removeChild( marginDiv );

          return ret;
        }
      });
    }
  })();


  // A method for quickly swapping in/out CSS properties to get correct calculations.
  jQuery.swap = function( elem, options, callback, args ) {
    var ret, name,
      old = {};

    // Remember the old values, and insert the new ones
    for ( name in options ) {
      old[ name ] = elem.style[ name ];
      elem.style[ name ] = options[ name ];
    }

    ret = callback.apply( elem, args || [] );

    // Revert the old values
    for ( name in options ) {
      elem.style[ name ] = old[ name ];
    }

    return ret;
  };


  var
    // Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
    rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
    cssNormalTransform = {
      letterSpacing: "0",
      fontWeight: "400"
    },

    cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

  // Return a css property mapped to a potentially vendor prefixed property
  function vendorPropName( style, name ) {

    // Shortcut for names that are not vendor prefixed
    if ( name in style ) {
      return name;
    }

    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
      origName = name,
      i = cssPrefixes.length;

    while ( i-- ) {
      name = cssPrefixes[ i ] + capName;
      if ( name in style ) {
        return name;
      }
    }

    return origName;
  }

  function setPositiveNumber( elem, value, subtract ) {
    var matches = rnumsplit.exec( value );
    return matches ?
      // Guard against undefined "subtract", e.g., when used as in cssHooks
      Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
      value;
  }

  function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
    var i = extra === ( isBorderBox ? "border" : "content" ) ?
      // If we already have the right measurement, avoid augmentation
      4 :
      // Otherwise initialize for horizontal or vertical properties
      name === "width" ? 1 : 0,

      val = 0;

    for ( ; i < 4; i += 2 ) {
      // Both box models exclude margin, so add it if we want it
      if ( extra === "margin" ) {
        val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
      }

      if ( isBorderBox ) {
        // border-box includes padding, so remove it if we want content
        if ( extra === "content" ) {
          val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
        }

        // At this point, extra isn't border nor margin, so remove border
        if ( extra !== "margin" ) {
          val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
        }
      } else {
        // At this point, extra isn't content, so add padding
        val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

        // At this point, extra isn't content nor padding, so add border
        if ( extra !== "padding" ) {
          val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
        }
      }
    }

    return val;
  }

  function getWidthOrHeight( elem, name, extra ) {

    // Start with offset property, which is equivalent to the border-box value
    var valueIsBorderBox = true,
      val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
      styles = getStyles( elem ),
      isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

    // Some non-html elements return undefined for offsetWidth, so check for null/undefined
    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
    if ( val <= 0 || val == null ) {
      // Fall back to computed then uncomputed css if necessary
      val = curCSS( elem, name, styles );
      if ( val < 0 || val == null ) {
        val = elem.style[ name ];
      }

      // Computed unit is not pixels. Stop here and return.
      if ( rnumnonpx.test(val) ) {
        return val;
      }

      // Check for style in case a browser which returns unreliable values
      // for getComputedStyle silently falls back to the reliable elem.style
      valueIsBorderBox = isBorderBox &&
        ( support.boxSizingReliable() || val === elem.style[ name ] );

      // Normalize "", auto, and prepare for extra
      val = parseFloat( val ) || 0;
    }

    // Use the active box-sizing model to add/subtract irrelevant styles
    return ( val +
      augmentWidthOrHeight(
        elem,
        name,
        extra || ( isBorderBox ? "border" : "content" ),
        valueIsBorderBox,
        styles
      )
    ) + "px";
  }

  function showHide( elements, show ) {
    var display, elem, hidden,
      values = [],
      index = 0,
      length = elements.length;

    for ( ; index < length; index++ ) {
      elem = elements[ index ];
      if ( !elem.style ) {
        continue;
      }

      values[ index ] = data_priv.get( elem, "olddisplay" );
      display = elem.style.display;
      if ( show ) {
        // Reset the inline display of this element to learn if it is
        // being hidden by cascaded rules or not
        if ( !values[ index ] && display === "none" ) {
          elem.style.display = "";
        }

        // Set elements which have been overridden with display: none
        // in a stylesheet to whatever the default browser style is
        // for such an element
        if ( elem.style.display === "" && isHidden( elem ) ) {
          values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
        }
      } else {
        hidden = isHidden( elem );

        if ( display !== "none" || !hidden ) {
          data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
        }
      }
    }

    // Set the display of most of the elements in a second loop
    // to avoid the constant reflow
    for ( index = 0; index < length; index++ ) {
      elem = elements[ index ];
      if ( !elem.style ) {
        continue;
      }
      if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
        elem.style.display = show ? values[ index ] || "" : "none";
      }
    }

    return elements;
  }

  jQuery.extend({

    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function( elem, computed ) {
          if ( computed ) {

            // We should always get a number back from opacity
            var ret = curCSS( elem, "opacity" );
            return ret === "" ? "1" : ret;
          }
        }
      }
    },

    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },

    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {
      "float": "cssFloat"
    },

    // Get and set the style property on a DOM Node
    style: function( elem, name, value, extra ) {

      // Don't set styles on text and comment nodes
      if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
        return;
      }

      // Make sure that we're working with the right name
      var ret, type, hooks,
        origName = jQuery.camelCase( name ),
        style = elem.style;

      name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

      // Gets hook for the prefixed version, then unprefixed version
      hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

      // Check if we're setting a value
      if ( value !== undefined ) {
        type = typeof value;

        // Convert "+=" or "-=" to relative numbers (#7345)
        if ( type === "string" && (ret = rrelNum.exec( value )) ) {
          value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
          // Fixes bug #9237
          type = "number";
        }

        // Make sure that null and NaN values aren't set (#7116)
        if ( value == null || value !== value ) {
          return;
        }

        // If a number, add 'px' to the (except for certain CSS properties)
        if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
          value += "px";
        }

        // Support: IE9-11+
        // background-* props affect original clone's values
        if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
          style[ name ] = "inherit";
        }

        // If a hook was provided, use that value, otherwise just set the specified value
        if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
          style[ name ] = value;
        }

      } else {
        // If a hook was provided get the non-computed value from there
        if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
          return ret;
        }

        // Otherwise just get the value from the style object
        return style[ name ];
      }
    },

    css: function( elem, name, extra, styles ) {
      var val, num, hooks,
        origName = jQuery.camelCase( name );

      // Make sure that we're working with the right name
      name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

      // Try prefixed name followed by the unprefixed name
      hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

      // If a hook was provided get the computed value from there
      if ( hooks && "get" in hooks ) {
        val = hooks.get( elem, true, extra );
      }

      // Otherwise, if a way to get the computed value exists, use that
      if ( val === undefined ) {
        val = curCSS( elem, name, styles );
      }

      // Convert "normal" to computed value
      if ( val === "normal" && name in cssNormalTransform ) {
        val = cssNormalTransform[ name ];
      }

      // Make numeric if forced or a qualifier was provided and val looks numeric
      if ( extra === "" || extra ) {
        num = parseFloat( val );
        return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
      }
      return val;
    }
  });

  jQuery.each([ "height", "width" ], function( i, name ) {
    jQuery.cssHooks[ name ] = {
      get: function( elem, computed, extra ) {
        if ( computed ) {

          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
            jQuery.swap( elem, cssShow, function() {
              return getWidthOrHeight( elem, name, extra );
            }) :
            getWidthOrHeight( elem, name, extra );
        }
      },

      set: function( elem, value, extra ) {
        var styles = extra && getStyles( elem );
        return setPositiveNumber( elem, value, extra ?
          augmentWidthOrHeight(
            elem,
            name,
            extra,
            jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
            styles
          ) : 0
        );
      }
    };
  });

  // Support: Android 2.3
  jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
    function( elem, computed ) {
      if ( computed ) {
        return jQuery.swap( elem, { "display": "inline-block" },
          curCSS, [ elem, "marginRight" ] );
      }
    }
  );

  // These hooks are used by animate to expand properties
  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function( prefix, suffix ) {
    jQuery.cssHooks[ prefix + suffix ] = {
      expand: function( value ) {
        var i = 0,
          expanded = {},

          // Assumes a single number if not a string
          parts = typeof value === "string" ? value.split(" ") : [ value ];

        for ( ; i < 4; i++ ) {
          expanded[ prefix + cssExpand[ i ] + suffix ] =
            parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
        }

        return expanded;
      }
    };

    if ( !rmargin.test( prefix ) ) {
      jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
    }
  });

  jQuery.fn.extend({
    css: function( name, value ) {
      return access( this, function( elem, name, value ) {
        var styles, len,
          map = {},
          i = 0;

        if ( jQuery.isArray( name ) ) {
          styles = getStyles( elem );
          len = name.length;

          for ( ; i < len; i++ ) {
            map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
          }

          return map;
        }

        return value !== undefined ?
          jQuery.style( elem, name, value ) :
          jQuery.css( elem, name );
      }, name, value, arguments.length > 1 );
    },
    show: function() {
      return showHide( this, true );
    },
    hide: function() {
      return showHide( this );
    },
    toggle: function( state ) {
      if ( typeof state === "boolean" ) {
        return state ? this.show() : this.hide();
      }

      return this.each(function() {
        if ( isHidden( this ) ) {
          jQuery( this ).show();
        } else {
          jQuery( this ).hide();
        }
      });
    }
  });


  function Tween( elem, options, prop, end, easing ) {
    return new Tween.prototype.init( elem, options, prop, end, easing );
  }
  jQuery.Tween = Tween;

  Tween.prototype = {
    constructor: Tween,
    init: function( elem, options, prop, end, easing, unit ) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || "swing";
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
    },
    cur: function() {
      var hooks = Tween.propHooks[ this.prop ];

      return hooks && hooks.get ?
        hooks.get( this ) :
        Tween.propHooks._default.get( this );
    },
    run: function( percent ) {
      var eased,
        hooks = Tween.propHooks[ this.prop ];

      if ( this.options.duration ) {
        this.pos = eased = jQuery.easing[ this.easing ](
          percent, this.options.duration * percent, 0, 1, this.options.duration
        );
      } else {
        this.pos = eased = percent;
      }
      this.now = ( this.end - this.start ) * eased + this.start;

      if ( this.options.step ) {
        this.options.step.call( this.elem, this.now, this );
      }

      if ( hooks && hooks.set ) {
        hooks.set( this );
      } else {
        Tween.propHooks._default.set( this );
      }
      return this;
    }
  };

  Tween.prototype.init.prototype = Tween.prototype;

  Tween.propHooks = {
    _default: {
      get: function( tween ) {
        var result;

        if ( tween.elem[ tween.prop ] != null &&
          (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
          return tween.elem[ tween.prop ];
        }

        // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.
        result = jQuery.css( tween.elem, tween.prop, "" );
        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === "auto" ? 0 : result;
      },
      set: function( tween ) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if ( jQuery.fx.step[ tween.prop ] ) {
          jQuery.fx.step[ tween.prop ]( tween );
        } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
          jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
        } else {
          tween.elem[ tween.prop ] = tween.now;
        }
      }
    }
  };

  // Support: IE9
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function( tween ) {
      if ( tween.elem.nodeType && tween.elem.parentNode ) {
        tween.elem[ tween.prop ] = tween.now;
      }
    }
  };

  jQuery.easing = {
    linear: function( p ) {
      return p;
    },
    swing: function( p ) {
      return 0.5 - Math.cos( p * Math.PI ) / 2;
    }
  };

  jQuery.fx = Tween.prototype.init;

  // Back Compat <1.8 extension point
  jQuery.fx.step = {};




  var
    fxNow, timerId,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
    rrun = /queueHooks$/,
    animationPrefilters = [ defaultPrefilter ],
    tweeners = {
      "*": [ function( prop, value ) {
        var tween = this.createTween( prop, value ),
          target = tween.cur(),
          parts = rfxnum.exec( value ),
          unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

          // Starting value computation is required for potential unit mismatches
          start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
            rfxnum.exec( jQuery.css( tween.elem, prop ) ),
          scale = 1,
          maxIterations = 20;

        if ( start && start[ 3 ] !== unit ) {
          // Trust units reported by jQuery.css
          unit = unit || start[ 3 ];

          // Make sure we update the tween properties later on
          parts = parts || [];

          // Iteratively approximate from a nonzero starting point
          start = +target || 1;

          do {
            // If previous iteration zeroed out, double until we get *something*.
            // Use string for doubling so we don't accidentally see scale as unchanged below
            scale = scale || ".5";

            // Adjust and apply
            start = start / scale;
            jQuery.style( tween.elem, prop, start + unit );

          // Update scale, tolerating zero or NaN from tween.cur(),
          // break the loop if scale is unchanged or perfect, or if we've just had enough
          } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
        }

        // Update tween properties
        if ( parts ) {
          start = tween.start = +start || +target || 0;
          tween.unit = unit;
          // If a +=/-= token was provided, we're doing a relative animation
          tween.end = parts[ 1 ] ?
            start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
            +parts[ 2 ];
        }

        return tween;
      } ]
    };

  // Animations created synchronously will run synchronously
  function createFxNow() {
    setTimeout(function() {
      fxNow = undefined;
    });
    return ( fxNow = jQuery.now() );
  }

  // Generate parameters to create a standard animation
  function genFx( type, includeWidth ) {
    var which,
      i = 0,
      attrs = { height: type };

    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for ( ; i < 4 ; i += 2 - includeWidth ) {
      which = cssExpand[ i ];
      attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
    }

    if ( includeWidth ) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween( value, prop, animation ) {
    var tween,
      collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
      index = 0,
      length = collection.length;
    for ( ; index < length; index++ ) {
      if ( (tween = collection[ index ].call( animation, prop, value )) ) {

        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter( elem, props, opts ) {
    /* jshint validthis: true */
    var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
      anim = this,
      orig = {},
      style = elem.style,
      hidden = elem.nodeType && isHidden( elem ),
      dataShow = data_priv.get( elem, "fxshow" );

    // Handle queue: false promises
    if ( !opts.queue ) {
      hooks = jQuery._queueHooks( elem, "fx" );
      if ( hooks.unqueued == null ) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function() {
          if ( !hooks.unqueued ) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;

      anim.always(function() {
        // Ensure the complete handler is called before this completes
        anim.always(function() {
          hooks.unqueued--;
          if ( !jQuery.queue( elem, "fx" ).length ) {
            hooks.empty.fire();
          }
        });
      });
    }

    // Height/width overflow pass
    if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
      // Make sure that nothing sneaks out
      // Record all 3 overflow attributes because IE9-10 do not
      // change the overflow attribute when overflowX and
      // overflowY are set to the same value
      opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

      // Set display property to inline-block for height/width
      // animations on inline elements that are having width/height animated
      display = jQuery.css( elem, "display" );

      // Test default display if display is currently "none"
      checkDisplay = display === "none" ?
        data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

      if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
        style.display = "inline-block";
      }
    }

    if ( opts.overflow ) {
      style.overflow = "hidden";
      anim.always(function() {
        style.overflow = opts.overflow[ 0 ];
        style.overflowX = opts.overflow[ 1 ];
        style.overflowY = opts.overflow[ 2 ];
      });
    }

    // show/hide pass
    for ( prop in props ) {
      value = props[ prop ];
      if ( rfxtypes.exec( value ) ) {
        delete props[ prop ];
        toggle = toggle || value === "toggle";
        if ( value === ( hidden ? "hide" : "show" ) ) {

          // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
          if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
            hidden = true;
          } else {
            continue;
          }
        }
        orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

      // Any non-fx value stops us from restoring the original display value
      } else {
        display = undefined;
      }
    }

    if ( !jQuery.isEmptyObject( orig ) ) {
      if ( dataShow ) {
        if ( "hidden" in dataShow ) {
          hidden = dataShow.hidden;
        }
      } else {
        dataShow = data_priv.access( elem, "fxshow", {} );
      }

      // Store state if its toggle - enables .stop().toggle() to "reverse"
      if ( toggle ) {
        dataShow.hidden = !hidden;
      }
      if ( hidden ) {
        jQuery( elem ).show();
      } else {
        anim.done(function() {
          jQuery( elem ).hide();
        });
      }
      anim.done(function() {
        var prop;

        data_priv.remove( elem, "fxshow" );
        for ( prop in orig ) {
          jQuery.style( elem, prop, orig[ prop ] );
        }
      });
      for ( prop in orig ) {
        tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

        if ( !( prop in dataShow ) ) {
          dataShow[ prop ] = tween.start;
          if ( hidden ) {
            tween.end = tween.start;
            tween.start = prop === "width" || prop === "height" ? 1 : 0;
          }
        }
      }

    // If this is a noop like .hide().hide(), restore an overwritten display value
    } else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
      style.display = display;
    }
  }

  function propFilter( props, specialEasing ) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for ( index in props ) {
      name = jQuery.camelCase( index );
      easing = specialEasing[ name ];
      value = props[ index ];
      if ( jQuery.isArray( value ) ) {
        easing = value[ 1 ];
        value = props[ index ] = value[ 0 ];
      }

      if ( index !== name ) {
        props[ name ] = value;
        delete props[ index ];
      }

      hooks = jQuery.cssHooks[ name ];
      if ( hooks && "expand" in hooks ) {
        value = hooks.expand( value );
        delete props[ name ];

        // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"
        for ( index in value ) {
          if ( !( index in props ) ) {
            props[ index ] = value[ index ];
            specialEasing[ index ] = easing;
          }
        }
      } else {
        specialEasing[ name ] = easing;
      }
    }
  }

  function Animation( elem, properties, options ) {
    var result,
      stopped,
      index = 0,
      length = animationPrefilters.length,
      deferred = jQuery.Deferred().always( function() {
        // Don't match elem in the :animated selector
        delete tick.elem;
      }),
      tick = function() {
        if ( stopped ) {
          return false;
        }
        var currentTime = fxNow || createFxNow(),
          remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
          // Support: Android 2.3
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
          temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

        for ( ; index < length ; index++ ) {
          animation.tweens[ index ].run( percent );
        }

        deferred.notifyWith( elem, [ animation, percent, remaining ]);

        if ( percent < 1 && length ) {
          return remaining;
        } else {
          deferred.resolveWith( elem, [ animation ] );
          return false;
        }
      },
      animation = deferred.promise({
        elem: elem,
        props: jQuery.extend( {}, properties ),
        opts: jQuery.extend( true, { specialEasing: {} }, options ),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function( prop, end ) {
          var tween = jQuery.Tween( elem, animation.opts, prop, end,
              animation.opts.specialEasing[ prop ] || animation.opts.easing );
          animation.tweens.push( tween );
          return tween;
        },
        stop: function( gotoEnd ) {
          var index = 0,
            // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if ( stopped ) {
            return this;
          }
          stopped = true;
          for ( ; index < length ; index++ ) {
            animation.tweens[ index ].run( 1 );
          }

          // Resolve when we played the last frame; otherwise, reject
          if ( gotoEnd ) {
            deferred.resolveWith( elem, [ animation, gotoEnd ] );
          } else {
            deferred.rejectWith( elem, [ animation, gotoEnd ] );
          }
          return this;
        }
      }),
      props = animation.props;

    propFilter( props, animation.opts.specialEasing );

    for ( ; index < length ; index++ ) {
      result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
      if ( result ) {
        return result;
      }
    }

    jQuery.map( props, createTween, animation );

    if ( jQuery.isFunction( animation.opts.start ) ) {
      animation.opts.start.call( elem, animation );
    }

    jQuery.fx.timer(
      jQuery.extend( tick, {
        elem: elem,
        anim: animation,
        queue: animation.opts.queue
      })
    );

    // attach callbacks from options
    return animation.progress( animation.opts.progress )
      .done( animation.opts.done, animation.opts.complete )
      .fail( animation.opts.fail )
      .always( animation.opts.always );
  }

  jQuery.Animation = jQuery.extend( Animation, {

    tweener: function( props, callback ) {
      if ( jQuery.isFunction( props ) ) {
        callback = props;
        props = [ "*" ];
      } else {
        props = props.split(" ");
      }

      var prop,
        index = 0,
        length = props.length;

      for ( ; index < length ; index++ ) {
        prop = props[ index ];
        tweeners[ prop ] = tweeners[ prop ] || [];
        tweeners[ prop ].unshift( callback );
      }
    },

    prefilter: function( callback, prepend ) {
      if ( prepend ) {
        animationPrefilters.unshift( callback );
      } else {
        animationPrefilters.push( callback );
      }
    }
  });

  jQuery.speed = function( speed, easing, fn ) {
    var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
      complete: fn || !fn && easing ||
        jQuery.isFunction( speed ) && speed,
      duration: speed,
      easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
    };

    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
      opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

    // Normalize opt.queue - true/undefined/null -> "fx"
    if ( opt.queue == null || opt.queue === true ) {
      opt.queue = "fx";
    }

    // Queueing
    opt.old = opt.complete;

    opt.complete = function() {
      if ( jQuery.isFunction( opt.old ) ) {
        opt.old.call( this );
      }

      if ( opt.queue ) {
        jQuery.dequeue( this, opt.queue );
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function( speed, to, easing, callback ) {

      // Show any hidden elements after setting opacity to 0
      return this.filter( isHidden ).css( "opacity", 0 ).show()

        // Animate to the value specified
        .end().animate({ opacity: to }, speed, easing, callback );
    },
    animate: function( prop, speed, easing, callback ) {
      var empty = jQuery.isEmptyObject( prop ),
        optall = jQuery.speed( speed, easing, callback ),
        doAnimation = function() {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation( this, jQuery.extend( {}, prop ), optall );

          // Empty animations, or finishing resolves immediately
          if ( empty || data_priv.get( this, "finish" ) ) {
            anim.stop( true );
          }
        };
        doAnimation.finish = doAnimation;

      return empty || optall.queue === false ?
        this.each( doAnimation ) :
        this.queue( optall.queue, doAnimation );
    },
    stop: function( type, clearQueue, gotoEnd ) {
      var stopQueue = function( hooks ) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop( gotoEnd );
      };

      if ( typeof type !== "string" ) {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if ( clearQueue && type !== false ) {
        this.queue( type || "fx", [] );
      }

      return this.each(function() {
        var dequeue = true,
          index = type != null && type + "queueHooks",
          timers = jQuery.timers,
          data = data_priv.get( this );

        if ( index ) {
          if ( data[ index ] && data[ index ].stop ) {
            stopQueue( data[ index ] );
          }
        } else {
          for ( index in data ) {
            if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
              stopQueue( data[ index ] );
            }
          }
        }

        for ( index = timers.length; index--; ) {
          if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
            timers[ index ].anim.stop( gotoEnd );
            dequeue = false;
            timers.splice( index, 1 );
          }
        }

        // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.
        if ( dequeue || !gotoEnd ) {
          jQuery.dequeue( this, type );
        }
      });
    },
    finish: function( type ) {
      if ( type !== false ) {
        type = type || "fx";
      }
      return this.each(function() {
        var index,
          data = data_priv.get( this ),
          queue = data[ type + "queue" ],
          hooks = data[ type + "queueHooks" ],
          timers = jQuery.timers,
          length = queue ? queue.length : 0;

        // Enable finishing flag on private data
        data.finish = true;

        // Empty the queue first
        jQuery.queue( this, type, [] );

        if ( hooks && hooks.stop ) {
          hooks.stop.call( this, true );
        }

        // Look for any active animations, and finish them
        for ( index = timers.length; index--; ) {
          if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
            timers[ index ].anim.stop( true );
            timers.splice( index, 1 );
          }
        }

        // Look for any animations in the old queue and finish them
        for ( index = 0; index < length; index++ ) {
          if ( queue[ index ] && queue[ index ].finish ) {
            queue[ index ].finish.call( this );
          }
        }

        // Turn off finishing flag
        delete data.finish;
      });
    }
  });

  jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
    var cssFn = jQuery.fn[ name ];
    jQuery.fn[ name ] = function( speed, easing, callback ) {
      return speed == null || typeof speed === "boolean" ?
        cssFn.apply( this, arguments ) :
        this.animate( genFx( name, true ), speed, easing, callback );
    };
  });

  // Generate shortcuts for custom animations
  jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: { opacity: "show" },
    fadeOut: { opacity: "hide" },
    fadeToggle: { opacity: "toggle" }
  }, function( name, props ) {
    jQuery.fn[ name ] = function( speed, easing, callback ) {
      return this.animate( props, speed, easing, callback );
    };
  });

  jQuery.timers = [];
  jQuery.fx.tick = function() {
    var timer,
      i = 0,
      timers = jQuery.timers;

    fxNow = jQuery.now();

    for ( ; i < timers.length; i++ ) {
      timer = timers[ i ];
      // Checks the timer has not already been removed
      if ( !timer() && timers[ i ] === timer ) {
        timers.splice( i--, 1 );
      }
    }

    if ( !timers.length ) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };

  jQuery.fx.timer = function( timer ) {
    jQuery.timers.push( timer );
    if ( timer() ) {
      jQuery.fx.start();
    } else {
      jQuery.timers.pop();
    }
  };

  jQuery.fx.interval = 13;

  jQuery.fx.start = function() {
    if ( !timerId ) {
      timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
    }
  };

  jQuery.fx.stop = function() {
    clearInterval( timerId );
    timerId = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  };


  // Based off of the plugin by Clint Helfers, with permission.
  // http://blindsignals.com/index.php/2009/07/jquery-delay/
  jQuery.fn.delay = function( time, type ) {
    time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
    type = type || "fx";

    return this.queue( type, function( next, hooks ) {
      var timeout = setTimeout( next, time );
      hooks.stop = function() {
        clearTimeout( timeout );
      };
    });
  };


  (function() {
    var input = document.createElement( "input" ),
      select = document.createElement( "select" ),
      opt = select.appendChild( document.createElement( "option" ) );

    input.type = "checkbox";

    // Support: iOS<=5.1, Android<=4.2+
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== "";

    // Support: IE<=11+
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;

    // Support: Android<=2.3
    // Options inside disabled selects are incorrectly marked as disabled
    select.disabled = true;
    support.optDisabled = !opt.disabled;

    // Support: IE<=11+
    // An input loses its value after becoming a radio
    input = document.createElement( "input" );
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();


  var nodeHook, boolHook,
    attrHandle = jQuery.expr.attrHandle;

  jQuery.fn.extend({
    attr: function( name, value ) {
      return access( this, jQuery.attr, name, value, arguments.length > 1 );
    },

    removeAttr: function( name ) {
      return this.each(function() {
        jQuery.removeAttr( this, name );
      });
    }
  });

  jQuery.extend({
    attr: function( elem, name, value ) {
      var hooks, ret,
        nType = elem.nodeType;

      // don't get/set attributes on text, comment and attribute nodes
      if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
        return;
      }

      // Fallback to prop when attributes are not supported
      if ( typeof elem.getAttribute === strundefined ) {
        return jQuery.prop( elem, name, value );
      }

      // All attributes are lowercase
      // Grab necessary hook if one is defined
      if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
        name = name.toLowerCase();
        hooks = jQuery.attrHooks[ name ] ||
          ( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
      }

      if ( value !== undefined ) {

        if ( value === null ) {
          jQuery.removeAttr( elem, name );

        } else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
          return ret;

        } else {
          elem.setAttribute( name, value + "" );
          return value;
        }

      } else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
        return ret;

      } else {
        ret = jQuery.find.attr( elem, name );

        // Non-existent attributes return null, we normalize to undefined
        return ret == null ?
          undefined :
          ret;
      }
    },

    removeAttr: function( elem, value ) {
      var name, propName,
        i = 0,
        attrNames = value && value.match( rnotwhite );

      if ( attrNames && elem.nodeType === 1 ) {
        while ( (name = attrNames[i++]) ) {
          propName = jQuery.propFix[ name ] || name;

          // Boolean attributes get special treatment (#10870)
          if ( jQuery.expr.match.bool.test( name ) ) {
            // Set corresponding property to false
            elem[ propName ] = false;
          }

          elem.removeAttribute( name );
        }
      }
    },

    attrHooks: {
      type: {
        set: function( elem, value ) {
          if ( !support.radioValue && value === "radio" &&
            jQuery.nodeName( elem, "input" ) ) {
            var val = elem.value;
            elem.setAttribute( "type", value );
            if ( val ) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    }
  });

  // Hooks for boolean attributes
  boolHook = {
    set: function( elem, value, name ) {
      if ( value === false ) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr( elem, name );
      } else {
        elem.setAttribute( name, name );
      }
      return name;
    }
  };
  jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
    var getter = attrHandle[ name ] || jQuery.find.attr;

    attrHandle[ name ] = function( elem, name, isXML ) {
      var ret, handle;
      if ( !isXML ) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[ name ];
        attrHandle[ name ] = ret;
        ret = getter( elem, name, isXML ) != null ?
          name.toLowerCase() :
          null;
        attrHandle[ name ] = handle;
      }
      return ret;
    };
  });




  var rfocusable = /^(?:input|select|textarea|button)$/i;

  jQuery.fn.extend({
    prop: function( name, value ) {
      return access( this, jQuery.prop, name, value, arguments.length > 1 );
    },

    removeProp: function( name ) {
      return this.each(function() {
        delete this[ jQuery.propFix[ name ] || name ];
      });
    }
  });

  jQuery.extend({
    propFix: {
      "for": "htmlFor",
      "class": "className"
    },

    prop: function( elem, name, value ) {
      var ret, hooks, notxml,
        nType = elem.nodeType;

      // Don't get/set properties on text, comment and attribute nodes
      if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
        return;
      }

      notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

      if ( notxml ) {
        // Fix name and attach hooks
        name = jQuery.propFix[ name ] || name;
        hooks = jQuery.propHooks[ name ];
      }

      if ( value !== undefined ) {
        return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
          ret :
          ( elem[ name ] = value );

      } else {
        return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
          ret :
          elem[ name ];
      }
    },

    propHooks: {
      tabIndex: {
        get: function( elem ) {
          return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
            elem.tabIndex :
            -1;
        }
      }
    }
  });

  if ( !support.optSelected ) {
    jQuery.propHooks.selected = {
      get: function( elem ) {
        var parent = elem.parentNode;
        if ( parent && parent.parentNode ) {
          parent.parentNode.selectedIndex;
        }
        return null;
      }
    };
  }

  jQuery.each([
    "tabIndex",
    "readOnly",
    "maxLength",
    "cellSpacing",
    "cellPadding",
    "rowSpan",
    "colSpan",
    "useMap",
    "frameBorder",
    "contentEditable"
  ], function() {
    jQuery.propFix[ this.toLowerCase() ] = this;
  });




  var rclass = /[\t\r\n\f]/g;

  jQuery.fn.extend({
    addClass: function( value ) {
      var classes, elem, cur, clazz, j, finalValue,
        proceed = typeof value === "string" && value,
        i = 0,
        len = this.length;

      if ( jQuery.isFunction( value ) ) {
        return this.each(function( j ) {
          jQuery( this ).addClass( value.call( this, j, this.className ) );
        });
      }

      if ( proceed ) {
        // The disjunction here is for better compressibility (see removeClass)
        classes = ( value || "" ).match( rnotwhite ) || [];

        for ( ; i < len; i++ ) {
          elem = this[ i ];
          cur = elem.nodeType === 1 && ( elem.className ?
            ( " " + elem.className + " " ).replace( rclass, " " ) :
            " "
          );

          if ( cur ) {
            j = 0;
            while ( (clazz = classes[j++]) ) {
              if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
                cur += clazz + " ";
              }
            }

            // only assign if different to avoid unneeded rendering.
            finalValue = jQuery.trim( cur );
            if ( elem.className !== finalValue ) {
              elem.className = finalValue;
            }
          }
        }
      }

      return this;
    },

    removeClass: function( value ) {
      var classes, elem, cur, clazz, j, finalValue,
        proceed = arguments.length === 0 || typeof value === "string" && value,
        i = 0,
        len = this.length;

      if ( jQuery.isFunction( value ) ) {
        return this.each(function( j ) {
          jQuery( this ).removeClass( value.call( this, j, this.className ) );
        });
      }
      if ( proceed ) {
        classes = ( value || "" ).match( rnotwhite ) || [];

        for ( ; i < len; i++ ) {
          elem = this[ i ];
          // This expression is here for better compressibility (see addClass)
          cur = elem.nodeType === 1 && ( elem.className ?
            ( " " + elem.className + " " ).replace( rclass, " " ) :
            ""
          );

          if ( cur ) {
            j = 0;
            while ( (clazz = classes[j++]) ) {
              // Remove *all* instances
              while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
                cur = cur.replace( " " + clazz + " ", " " );
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = value ? jQuery.trim( cur ) : "";
            if ( elem.className !== finalValue ) {
              elem.className = finalValue;
            }
          }
        }
      }

      return this;
    },

    toggleClass: function( value, stateVal ) {
      var type = typeof value;

      if ( typeof stateVal === "boolean" && type === "string" ) {
        return stateVal ? this.addClass( value ) : this.removeClass( value );
      }

      if ( jQuery.isFunction( value ) ) {
        return this.each(function( i ) {
          jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
        });
      }

      return this.each(function() {
        if ( type === "string" ) {
          // Toggle individual class names
          var className,
            i = 0,
            self = jQuery( this ),
            classNames = value.match( rnotwhite ) || [];

          while ( (className = classNames[ i++ ]) ) {
            // Check each className given, space separated list
            if ( self.hasClass( className ) ) {
              self.removeClass( className );
            } else {
              self.addClass( className );
            }
          }

        // Toggle whole class name
        } else if ( type === strundefined || type === "boolean" ) {
          if ( this.className ) {
            // store className if set
            data_priv.set( this, "__className__", this.className );
          }

          // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
        }
      });
    },

    hasClass: function( selector ) {
      var className = " " + selector + " ",
        i = 0,
        l = this.length;
      for ( ; i < l; i++ ) {
        if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
          return true;
        }
      }

      return false;
    }
  });




  var rreturn = /\r/g;

  jQuery.fn.extend({
    val: function( value ) {
      var hooks, ret, isFunction,
        elem = this[0];

      if ( !arguments.length ) {
        if ( elem ) {
          hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

          if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
            return ret;
          }

          ret = elem.value;

          return typeof ret === "string" ?
            // Handle most common string cases
            ret.replace(rreturn, "") :
            // Handle cases where value is null/undef or number
            ret == null ? "" : ret;
        }

        return;
      }

      isFunction = jQuery.isFunction( value );

      return this.each(function( i ) {
        var val;

        if ( this.nodeType !== 1 ) {
          return;
        }

        if ( isFunction ) {
          val = value.call( this, i, jQuery( this ).val() );
        } else {
          val = value;
        }

        // Treat null/undefined as ""; convert numbers to string
        if ( val == null ) {
          val = "";

        } else if ( typeof val === "number" ) {
          val += "";

        } else if ( jQuery.isArray( val ) ) {
          val = jQuery.map( val, function( value ) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

        // If set returns undefined, fall back to normal setting
        if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
          this.value = val;
        }
      });
    }
  });

  jQuery.extend({
    valHooks: {
      option: {
        get: function( elem ) {
          var val = jQuery.find.attr( elem, "value" );
          return val != null ?
            val :
            // Support: IE10-11+
            // option.text throws exceptions (#14686, #14858)
            jQuery.trim( jQuery.text( elem ) );
        }
      },
      select: {
        get: function( elem ) {
          var value, option,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === "select-one" || index < 0,
            values = one ? null : [],
            max = one ? index + 1 : options.length,
            i = index < 0 ?
              max :
              one ? index : 0;

          // Loop through all the selected options
          for ( ; i < max; i++ ) {
            option = options[ i ];

            // IE6-9 doesn't update selected after form reset (#2551)
            if ( ( option.selected || i === index ) &&
                // Don't return options that are disabled or in a disabled optgroup
                ( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
                ( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

              // Get the specific value for the option
              value = jQuery( option ).val();

              // We don't need an array for one selects
              if ( one ) {
                return value;
              }

              // Multi-Selects return an array
              values.push( value );
            }
          }

          return values;
        },

        set: function( elem, value ) {
          var optionSet, option,
            options = elem.options,
            values = jQuery.makeArray( value ),
            i = options.length;

          while ( i-- ) {
            option = options[ i ];
            if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
              optionSet = true;
            }
          }

          // Force browsers to behave consistently when non-matching value is set
          if ( !optionSet ) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    }
  });

  // Radios and checkboxes getter/setter
  jQuery.each([ "radio", "checkbox" ], function() {
    jQuery.valHooks[ this ] = {
      set: function( elem, value ) {
        if ( jQuery.isArray( value ) ) {
          return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
        }
      }
    };
    if ( !support.checkOn ) {
      jQuery.valHooks[ this ].get = function( elem ) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  });




  // Return jQuery for attributes-only inclusion


  jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
    "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
    "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

    // Handle event binding
    jQuery.fn[ name ] = function( data, fn ) {
      return arguments.length > 0 ?
        this.on( name, null, data, fn ) :
        this.trigger( name );
    };
  });

  jQuery.fn.extend({
    hover: function( fnOver, fnOut ) {
      return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
    },

    bind: function( types, data, fn ) {
      return this.on( types, null, data, fn );
    },
    unbind: function( types, fn ) {
      return this.off( types, null, fn );
    },

    delegate: function( selector, types, data, fn ) {
      return this.on( types, selector, data, fn );
    },
    undelegate: function( selector, types, fn ) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
    }
  });


  var nonce = jQuery.now();

  var rquery = (/\?/);



  // Support: Android 2.3
  // Workaround failure to string-cast null input
  jQuery.parseJSON = function( data ) {
    return JSON.parse( data + "" );
  };


  // Cross-browser xml parsing
  jQuery.parseXML = function( data ) {
    var xml, tmp;
    if ( !data || typeof data !== "string" ) {
      return null;
    }

    // Support: IE9
    try {
      tmp = new DOMParser();
      xml = tmp.parseFromString( data, "text/xml" );
    } catch ( e ) {
      xml = undefined;
    }

    if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
      jQuery.error( "Invalid XML: " + data );
    }
    return xml;
  };


  var
    rhash = /#.*$/,
    rts = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},

    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},

    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat( "*" ),

    // Document location
    ajaxLocation = window.location.href,

    // Segment location into parts
    ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports( structure ) {

    // dataTypeExpression is optional and defaults to "*"
    return function( dataTypeExpression, func ) {

      if ( typeof dataTypeExpression !== "string" ) {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType,
        i = 0,
        dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

      if ( jQuery.isFunction( func ) ) {
        // For each dataType in the dataTypeExpression
        while ( (dataType = dataTypes[i++]) ) {
          // Prepend if requested
          if ( dataType[0] === "+" ) {
            dataType = dataType.slice( 1 ) || "*";
            (structure[ dataType ] = structure[ dataType ] || []).unshift( func );

          // Otherwise append
          } else {
            (structure[ dataType ] = structure[ dataType ] || []).push( func );
          }
        }
      }
    };
  }

  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

    var inspected = {},
      seekingTransport = ( structure === transports );

    function inspect( dataType ) {
      var selected;
      inspected[ dataType ] = true;
      jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
        var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
        if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
          options.dataTypes.unshift( dataTypeOrTransport );
          inspect( dataTypeOrTransport );
          return false;
        } else if ( seekingTransport ) {
          return !( selected = dataTypeOrTransport );
        }
      });
      return selected;
    }

    return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
  }

  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887
  function ajaxExtend( target, src ) {
    var key, deep,
      flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for ( key in src ) {
      if ( src[ key ] !== undefined ) {
        ( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
      }
    }
    if ( deep ) {
      jQuery.extend( true, target, deep );
    }

    return target;
  }

  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses( s, jqXHR, responses ) {

    var ct, type, finalDataType, firstDataType,
      contents = s.contents,
      dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while ( dataTypes[ 0 ] === "*" ) {
      dataTypes.shift();
      if ( ct === undefined ) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    }

    // Check if we're dealing with a known content-type
    if ( ct ) {
      for ( type in contents ) {
        if ( contents[ type ] && contents[ type ].test( ct ) ) {
          dataTypes.unshift( type );
          break;
        }
      }
    }

    // Check to see if we have a response for the expected dataType
    if ( dataTypes[ 0 ] in responses ) {
      finalDataType = dataTypes[ 0 ];
    } else {
      // Try convertible dataTypes
      for ( type in responses ) {
        if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
          finalDataType = type;
          break;
        }
        if ( !firstDataType ) {
          firstDataType = type;
        }
      }
      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if ( finalDataType ) {
      if ( finalDataType !== dataTypes[ 0 ] ) {
        dataTypes.unshift( finalDataType );
      }
      return responses[ finalDataType ];
    }
  }

  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */
  function ajaxConvert( s, response, jqXHR, isSuccess ) {
    var conv2, current, conv, tmp, prev,
      converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if ( dataTypes[ 1 ] ) {
      for ( conv in s.converters ) {
        converters[ conv.toLowerCase() ] = s.converters[ conv ];
      }
    }

    current = dataTypes.shift();

    // Convert to each sequential dataType
    while ( current ) {

      if ( s.responseFields[ current ] ) {
        jqXHR[ s.responseFields[ current ] ] = response;
      }

      // Apply the dataFilter if provided
      if ( !prev && isSuccess && s.dataFilter ) {
        response = s.dataFilter( response, s.dataType );
      }

      prev = current;
      current = dataTypes.shift();

      if ( current ) {

      // There's only work to do if current dataType is non-auto
        if ( current === "*" ) {

          current = prev;

        // Convert response if prev dataType is non-auto and differs from current
        } else if ( prev !== "*" && prev !== current ) {

          // Seek a direct converter
          conv = converters[ prev + " " + current ] || converters[ "* " + current ];

          // If none found, seek a pair
          if ( !conv ) {
            for ( conv2 in converters ) {

              // If conv2 outputs current
              tmp = conv2.split( " " );
              if ( tmp[ 1 ] === current ) {

                // If prev can be converted to accepted input
                conv = converters[ prev + " " + tmp[ 0 ] ] ||
                  converters[ "* " + tmp[ 0 ] ];
                if ( conv ) {
                  // Condense equivalence converters
                  if ( conv === true ) {
                    conv = converters[ conv2 ];

                  // Otherwise, insert the intermediate dataType
                  } else if ( converters[ conv2 ] !== true ) {
                    current = tmp[ 0 ];
                    dataTypes.unshift( tmp[ 1 ] );
                  }
                  break;
                }
              }
            }
          }

          // Apply converter (if not an equivalence)
          if ( conv !== true ) {

            // Unless errors are allowed to bubble, catch and return them
            if ( conv && s[ "throws" ] ) {
              response = conv( response );
            } else {
              try {
                response = conv( response );
              } catch ( e ) {
                return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
              }
            }
          }
        }
      }
    }

    return { state: "success", data: response };
  }

  jQuery.extend({

    // Counter for holding the number of active queries
    active: 0,

    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},

    ajaxSettings: {
      url: ajaxLocation,
      type: "GET",
      isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */

      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },

      contents: {
        xml: /xml/,
        html: /html/,
        json: /json/
      },

      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },

      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {

        // Convert anything to text
        "* text": String,

        // Text to html (true = no transformation)
        "text html": true,

        // Evaluate text as a json expression
        "text json": jQuery.parseJSON,

        // Parse text as xml
        "text xml": jQuery.parseXML
      },

      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },

    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function( target, settings ) {
      return settings ?

        // Building a settings object
        ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

        // Extending ajaxSettings
        ajaxExtend( jQuery.ajaxSettings, target );
    },

    ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
    ajaxTransport: addToPrefiltersOrTransports( transports ),

    // Main method
    ajax: function( url, options ) {

      // If url is an object, simulate pre-1.5 signature
      if ( typeof url === "object" ) {
        options = url;
        url = undefined;
      }

      // Force options to be an object
      options = options || {};

      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString,
        responseHeaders,
        // timeout handle
        timeoutTimer,
        // Cross-domain detection vars
        parts,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // Create the final options object
        s = jQuery.ajaxSetup( {}, options ),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
          jQuery( callbackContext ) :
          jQuery.event,
        // Deferreds
        deferred = jQuery.Deferred(),
        completeDeferred = jQuery.Callbacks("once memory"),
        // Status-dependent callbacks
        statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {},
        requestHeadersNames = {},
        // The jqXHR state
        state = 0,
        // Default abort message
        strAbort = "canceled",
        // Fake xhr
        jqXHR = {
          readyState: 0,

          // Builds headers hashtable if needed
          getResponseHeader: function( key ) {
            var match;
            if ( state === 2 ) {
              if ( !responseHeaders ) {
                responseHeaders = {};
                while ( (match = rheaders.exec( responseHeadersString )) ) {
                  responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                }
              }
              match = responseHeaders[ key.toLowerCase() ];
            }
            return match == null ? null : match;
          },

          // Raw string
          getAllResponseHeaders: function() {
            return state === 2 ? responseHeadersString : null;
          },

          // Caches the header
          setRequestHeader: function( name, value ) {
            var lname = name.toLowerCase();
            if ( !state ) {
              name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
              requestHeaders[ name ] = value;
            }
            return this;
          },

          // Overrides response content-type header
          overrideMimeType: function( type ) {
            if ( !state ) {
              s.mimeType = type;
            }
            return this;
          },

          // Status-dependent callbacks
          statusCode: function( map ) {
            var code;
            if ( map ) {
              if ( state < 2 ) {
                for ( code in map ) {
                  // Lazy-add the new callback in a way that preserves old ones
                  statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                }
              } else {
                // Execute the appropriate callbacks
                jqXHR.always( map[ jqXHR.status ] );
              }
            }
            return this;
          },

          // Cancel the request
          abort: function( statusText ) {
            var finalText = statusText || strAbort;
            if ( transport ) {
              transport.abort( finalText );
            }
            done( 0, finalText );
            return this;
          }
        };

      // Attach deferreds
      deferred.promise( jqXHR ).complete = completeDeferred.add;
      jqXHR.success = jqXHR.done;
      jqXHR.error = jqXHR.fail;

      // Remove hash character (#7531: and string promotion)
      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
        .replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

      // Alias method option to type as per ticket #12004
      s.type = options.method || options.type || s.method || s.type;

      // Extract dataTypes list
      s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

      // A cross-domain request is in order when we have a protocol:host:port mismatch
      if ( s.crossDomain == null ) {
        parts = rurl.exec( s.url.toLowerCase() );
        s.crossDomain = !!( parts &&
          ( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
            ( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
              ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
        );
      }

      // Convert data if not already a string
      if ( s.data && s.processData && typeof s.data !== "string" ) {
        s.data = jQuery.param( s.data, s.traditional );
      }

      // Apply prefilters
      inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

      // If request was aborted inside a prefilter, stop there
      if ( state === 2 ) {
        return jqXHR;
      }

      // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
      fireGlobals = jQuery.event && s.global;

      // Watch for a new set of requests
      if ( fireGlobals && jQuery.active++ === 0 ) {
        jQuery.event.trigger("ajaxStart");
      }

      // Uppercase the type
      s.type = s.type.toUpperCase();

      // Determine if request has content
      s.hasContent = !rnoContent.test( s.type );

      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      cacheURL = s.url;

      // More options handling for requests with no content
      if ( !s.hasContent ) {

        // If data is available, append data to url
        if ( s.data ) {
          cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
          // #9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }

        // Add anti-cache in url if needed
        if ( s.cache === false ) {
          s.url = rts.test( cacheURL ) ?

            // If there is already a '_' parameter, set its value
            cacheURL.replace( rts, "$1_=" + nonce++ ) :

            // Otherwise add one to the end
            cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
        }
      }

      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if ( s.ifModified ) {
        if ( jQuery.lastModified[ cacheURL ] ) {
          jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
        }
        if ( jQuery.etag[ cacheURL ] ) {
          jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
        }
      }

      // Set the correct header, if data is being sent
      if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
        jqXHR.setRequestHeader( "Content-Type", s.contentType );
      }

      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader(
        "Accept",
        s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
          s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
          s.accepts[ "*" ]
      );

      // Check for headers option
      for ( i in s.headers ) {
        jqXHR.setRequestHeader( i, s.headers[ i ] );
      }

      // Allow custom headers/mimetypes and early abort
      if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
        // Abort if not done already and return
        return jqXHR.abort();
      }

      // Aborting is no longer a cancellation
      strAbort = "abort";

      // Install callbacks on deferreds
      for ( i in { success: 1, error: 1, complete: 1 } ) {
        jqXHR[ i ]( s[ i ] );
      }

      // Get transport
      transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

      // If no transport, we auto-abort
      if ( !transport ) {
        done( -1, "No Transport" );
      } else {
        jqXHR.readyState = 1;

        // Send global event
        if ( fireGlobals ) {
          globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
        }
        // Timeout
        if ( s.async && s.timeout > 0 ) {
          timeoutTimer = setTimeout(function() {
            jqXHR.abort("timeout");
          }, s.timeout );
        }

        try {
          state = 1;
          transport.send( requestHeaders, done );
        } catch ( e ) {
          // Propagate exception as error if not done
          if ( state < 2 ) {
            done( -1, e );
          // Simply rethrow otherwise
          } else {
            throw e;
          }
        }
      }

      // Callback for when everything is done
      function done( status, nativeStatusText, responses, headers ) {
        var isSuccess, success, error, response, modified,
          statusText = nativeStatusText;

        // Called once
        if ( state === 2 ) {
          return;
        }

        // State is "done" now
        state = 2;

        // Clear timeout if it exists
        if ( timeoutTimer ) {
          clearTimeout( timeoutTimer );
        }

        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;

        // Cache response headers
        responseHeadersString = headers || "";

        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;

        // Determine if successful
        isSuccess = status >= 200 && status < 300 || status === 304;

        // Get response data
        if ( responses ) {
          response = ajaxHandleResponses( s, jqXHR, responses );
        }

        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert( s, response, jqXHR, isSuccess );

        // If successful, handle type chaining
        if ( isSuccess ) {

          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if ( s.ifModified ) {
            modified = jqXHR.getResponseHeader("Last-Modified");
            if ( modified ) {
              jQuery.lastModified[ cacheURL ] = modified;
            }
            modified = jqXHR.getResponseHeader("etag");
            if ( modified ) {
              jQuery.etag[ cacheURL ] = modified;
            }
          }

          // if no content
          if ( status === 204 || s.type === "HEAD" ) {
            statusText = "nocontent";

          // if not modified
          } else if ( status === 304 ) {
            statusText = "notmodified";

          // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;
          if ( status || !statusText ) {
            statusText = "error";
            if ( status < 0 ) {
              status = 0;
            }
          }
        }

        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = ( nativeStatusText || statusText ) + "";

        // Success/Error
        if ( isSuccess ) {
          deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
        } else {
          deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
        }

        // Status-dependent callbacks
        jqXHR.statusCode( statusCode );
        statusCode = undefined;

        if ( fireGlobals ) {
          globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
            [ jqXHR, s, isSuccess ? success : error ] );
        }

        // Complete
        completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

        if ( fireGlobals ) {
          globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
          // Handle the global AJAX counter
          if ( !( --jQuery.active ) ) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }

      return jqXHR;
    },

    getJSON: function( url, data, callback ) {
      return jQuery.get( url, data, callback, "json" );
    },

    getScript: function( url, callback ) {
      return jQuery.get( url, undefined, callback, "script" );
    }
  });

  jQuery.each( [ "get", "post" ], function( i, method ) {
    jQuery[ method ] = function( url, data, callback, type ) {
      // Shift arguments if data argument was omitted
      if ( jQuery.isFunction( data ) ) {
        type = type || callback;
        callback = data;
        data = undefined;
      }

      return jQuery.ajax({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      });
    };
  });


  jQuery._evalUrl = function( url ) {
    return jQuery.ajax({
      url: url,
      type: "GET",
      dataType: "script",
      async: false,
      global: false,
      "throws": true
    });
  };


  jQuery.fn.extend({
    wrapAll: function( html ) {
      var wrap;

      if ( jQuery.isFunction( html ) ) {
        return this.each(function( i ) {
          jQuery( this ).wrapAll( html.call(this, i) );
        });
      }

      if ( this[ 0 ] ) {

        // The elements to wrap the target around
        wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

        if ( this[ 0 ].parentNode ) {
          wrap.insertBefore( this[ 0 ] );
        }

        wrap.map(function() {
          var elem = this;

          while ( elem.firstElementChild ) {
            elem = elem.firstElementChild;
          }

          return elem;
        }).append( this );
      }

      return this;
    },

    wrapInner: function( html ) {
      if ( jQuery.isFunction( html ) ) {
        return this.each(function( i ) {
          jQuery( this ).wrapInner( html.call(this, i) );
        });
      }

      return this.each(function() {
        var self = jQuery( this ),
          contents = self.contents();

        if ( contents.length ) {
          contents.wrapAll( html );

        } else {
          self.append( html );
        }
      });
    },

    wrap: function( html ) {
      var isFunction = jQuery.isFunction( html );

      return this.each(function( i ) {
        jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
      });
    },

    unwrap: function() {
      return this.parent().each(function() {
        if ( !jQuery.nodeName( this, "body" ) ) {
          jQuery( this ).replaceWith( this.childNodes );
        }
      }).end();
    }
  });


  jQuery.expr.filters.hidden = function( elem ) {
    // Support: Opera <= 12.12
    // Opera reports offsetWidths and offsetHeights less than zero on some elements
    return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
  };
  jQuery.expr.filters.visible = function( elem ) {
    return !jQuery.expr.filters.hidden( elem );
  };




  var r20 = /%20/g,
    rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams( prefix, obj, traditional, add ) {
    var name;

    if ( jQuery.isArray( obj ) ) {
      // Serialize array item.
      jQuery.each( obj, function( i, v ) {
        if ( traditional || rbracket.test( prefix ) ) {
          // Treat each array item as a scalar.
          add( prefix, v );

        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
        }
      });

    } else if ( !traditional && jQuery.type( obj ) === "object" ) {
      // Serialize object item.
      for ( name in obj ) {
        buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
      }

    } else {
      // Serialize scalar item.
      add( prefix, obj );
    }
  }

  // Serialize an array of form elements or a set of
  // key/values into a query string
  jQuery.param = function( a, traditional ) {
    var prefix,
      s = [],
      add = function( key, value ) {
        // If value is a function, invoke it and return its value
        value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
        s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
      };

    // Set traditional to true for jQuery <= 1.3.2 behavior.
    if ( traditional === undefined ) {
      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    }

    // If an array was passed in, assume that it is an array of form elements.
    if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
      // Serialize the form elements
      jQuery.each( a, function() {
        add( this.name, this.value );
      });

    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for ( prefix in a ) {
        buildParams( prefix, a[ prefix ], traditional, add );
      }
    }

    // Return the resulting serialization
    return s.join( "&" ).replace( r20, "+" );
  };

  jQuery.fn.extend({
    serialize: function() {
      return jQuery.param( this.serializeArray() );
    },
    serializeArray: function() {
      return this.map(function() {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop( this, "elements" );
        return elements ? jQuery.makeArray( elements ) : this;
      })
      .filter(function() {
        var type = this.type;

        // Use .is( ":disabled" ) so that fieldset[disabled] works
        return this.name && !jQuery( this ).is( ":disabled" ) &&
          rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
          ( this.checked || !rcheckableType.test( type ) );
      })
      .map(function( i, elem ) {
        var val = jQuery( this ).val();

        return val == null ?
          null :
          jQuery.isArray( val ) ?
            jQuery.map( val, function( val ) {
              return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
            }) :
            { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
      }).get();
    }
  });


  jQuery.ajaxSettings.xhr = function() {
    try {
      return new XMLHttpRequest();
    } catch( e ) {}
  };

  var xhrId = 0,
    xhrCallbacks = {},
    xhrSuccessStatus = {
      // file protocol always yields status code 0, assume 200
      0: 200,
      // Support: IE9
      // #1450: sometimes IE returns 1223 when it should be 204
      1223: 204
    },
    xhrSupported = jQuery.ajaxSettings.xhr();

  // Support: IE9
  // Open requests must be manually aborted on unload (#5280)
  // See https://support.microsoft.com/kb/2856746 for more info
  if ( window.attachEvent ) {
    window.attachEvent( "onunload", function() {
      for ( var key in xhrCallbacks ) {
        xhrCallbacks[ key ]();
      }
    });
  }

  support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
  support.ajax = xhrSupported = !!xhrSupported;

  jQuery.ajaxTransport(function( options ) {
    var callback;

    // Cross domain only allowed if supported through XMLHttpRequest
    if ( support.cors || xhrSupported && !options.crossDomain ) {
      return {
        send: function( headers, complete ) {
          var i,
            xhr = options.xhr(),
            id = ++xhrId;

          xhr.open( options.type, options.url, options.async, options.username, options.password );

          // Apply custom fields if provided
          if ( options.xhrFields ) {
            for ( i in options.xhrFields ) {
              xhr[ i ] = options.xhrFields[ i ];
            }
          }

          // Override mime type if needed
          if ( options.mimeType && xhr.overrideMimeType ) {
            xhr.overrideMimeType( options.mimeType );
          }

          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if ( !options.crossDomain && !headers["X-Requested-With"] ) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          }

          // Set headers
          for ( i in headers ) {
            xhr.setRequestHeader( i, headers[ i ] );
          }

          // Callback
          callback = function( type ) {
            return function() {
              if ( callback ) {
                delete xhrCallbacks[ id ];
                callback = xhr.onload = xhr.onerror = null;

                if ( type === "abort" ) {
                  xhr.abort();
                } else if ( type === "error" ) {
                  complete(
                    // file: protocol always yields status 0; see #8605, #14207
                    xhr.status,
                    xhr.statusText
                  );
                } else {
                  complete(
                    xhrSuccessStatus[ xhr.status ] || xhr.status,
                    xhr.statusText,
                    // Support: IE9
                    // Accessing binary-data responseText throws an exception
                    // (#11426)
                    typeof xhr.responseText === "string" ? {
                      text: xhr.responseText
                    } : undefined,
                    xhr.getAllResponseHeaders()
                  );
                }
              }
            };
          };

          // Listen to events
          xhr.onload = callback();
          xhr.onerror = callback("error");

          // Create the abort callback
          callback = xhrCallbacks[ id ] = callback("abort");

          try {
            // Do send the request (this may raise an exception)
            xhr.send( options.hasContent && options.data || null );
          } catch ( e ) {
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if ( callback ) {
              throw e;
            }
          }
        },

        abort: function() {
          if ( callback ) {
            callback();
          }
        }
      };
    }
  });




  // Install script dataType
  jQuery.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /(?:java|ecma)script/
    },
    converters: {
      "text script": function( text ) {
        jQuery.globalEval( text );
        return text;
      }
    }
  });

  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter( "script", function( s ) {
    if ( s.cache === undefined ) {
      s.cache = false;
    }
    if ( s.crossDomain ) {
      s.type = "GET";
    }
  });

  // Bind script tag hack transport
  jQuery.ajaxTransport( "script", function( s ) {
    // This transport only deals with cross domain requests
    if ( s.crossDomain ) {
      var script, callback;
      return {
        send: function( _, complete ) {
          script = jQuery("<script>").prop({
            async: true,
            charset: s.scriptCharset,
            src: s.url
          }).on(
            "load error",
            callback = function( evt ) {
              script.remove();
              callback = null;
              if ( evt ) {
                complete( evt.type === "error" ? 404 : 200, evt.type );
              }
            }
          );
          document.head.appendChild( script[ 0 ] );
        },
        abort: function() {
          if ( callback ) {
            callback();
          }
        }
      };
    }
  });




  var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;

  // Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function() {
      var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
      this[ callback ] = true;
      return callback;
    }
  });

  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

    var callbackName, overwritten, responseContainer,
      jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
        "url" :
        typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
      );

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
        s.jsonpCallback() :
        s.jsonpCallback;

      // Insert callback into url or form data
      if ( jsonProp ) {
        s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
      } else if ( s.jsonp !== false ) {
        s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
      }

      // Use data converter to retrieve json after script execution
      s.converters["script json"] = function() {
        if ( !responseContainer ) {
          jQuery.error( callbackName + " was not called" );
        }
        return responseContainer[ 0 ];
      };

      // force json dataType
      s.dataTypes[ 0 ] = "json";

      // Install callback
      overwritten = window[ callbackName ];
      window[ callbackName ] = function() {
        responseContainer = arguments;
      };

      // Clean-up function (fires after converters)
      jqXHR.always(function() {
        // Restore preexisting value
        window[ callbackName ] = overwritten;

        // Save back as free
        if ( s[ callbackName ] ) {
          // make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;

          // save the callback name for future use
          oldCallbacks.push( callbackName );
        }

        // Call if it was a function and we have a response
        if ( responseContainer && jQuery.isFunction( overwritten ) ) {
          overwritten( responseContainer[ 0 ] );
        }

        responseContainer = overwritten = undefined;
      });

      // Delegate to script
      return "script";
    }
  });




  // data: string of html
  // context (optional): If specified, the fragment will be created in this context, defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  jQuery.parseHTML = function( data, context, keepScripts ) {
    if ( !data || typeof data !== "string" ) {
      return null;
    }
    if ( typeof context === "boolean" ) {
      keepScripts = context;
      context = false;
    }
    context = context || document;

    var parsed = rsingleTag.exec( data ),
      scripts = !keepScripts && [];

    // Single tag
    if ( parsed ) {
      return [ context.createElement( parsed[1] ) ];
    }

    parsed = jQuery.buildFragment( [ data ], context, scripts );

    if ( scripts && scripts.length ) {
      jQuery( scripts ).remove();
    }

    return jQuery.merge( [], parsed.childNodes );
  };


  // Keep a copy of the old load method
  var _load = jQuery.fn.load;

  /**
   * Load a url into a page
   */
  jQuery.fn.load = function( url, params, callback ) {
    if ( typeof url !== "string" && _load ) {
      return _load.apply( this, arguments );
    }

    var selector, type, response,
      self = this,
      off = url.indexOf(" ");

    if ( off >= 0 ) {
      selector = jQuery.trim( url.slice( off ) );
      url = url.slice( 0, off );
    }

    // If it's a function
    if ( jQuery.isFunction( params ) ) {

      // We assume that it's the callback
      callback = params;
      params = undefined;

    // Otherwise, build a param string
    } else if ( params && typeof params === "object" ) {
      type = "POST";
    }

    // If we have elements to modify, make the request
    if ( self.length > 0 ) {
      jQuery.ajax({
        url: url,

        // if "type" variable is undefined, then "GET" method will be used
        type: type,
        dataType: "html",
        data: params
      }).done(function( responseText ) {

        // Save response for use in complete callback
        response = arguments;

        self.html( selector ?

          // If a selector was specified, locate the right elements in a dummy div
          // Exclude scripts to avoid IE 'Permission Denied' errors
          jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

          // Otherwise use the full result
          responseText );

      }).complete( callback && function( jqXHR, status ) {
        self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
      });
    }

    return this;
  };




  // Attach a bunch of functions for handling common AJAX events
  jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
    jQuery.fn[ type ] = function( fn ) {
      return this.on( type, fn );
    };
  });




  jQuery.expr.filters.animated = function( elem ) {
    return jQuery.grep(jQuery.timers, function( fn ) {
      return elem === fn.elem;
    }).length;
  };




  var docElem = window.document.documentElement;

  /**
   * Gets a window from an element
   */
  function getWindow( elem ) {
    return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
  }

  jQuery.offset = {
    setOffset: function( elem, options, i ) {
      var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
        position = jQuery.css( elem, "position" ),
        curElem = jQuery( elem ),
        props = {};

      // Set position first, in-case top/left are set even on static elem
      if ( position === "static" ) {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css( elem, "top" );
      curCSSLeft = jQuery.css( elem, "left" );
      calculatePosition = ( position === "absolute" || position === "fixed" ) &&
        ( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

      // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed
      if ( calculatePosition ) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;

      } else {
        curTop = parseFloat( curCSSTop ) || 0;
        curLeft = parseFloat( curCSSLeft ) || 0;
      }

      if ( jQuery.isFunction( options ) ) {
        options = options.call( elem, i, curOffset );
      }

      if ( options.top != null ) {
        props.top = ( options.top - curOffset.top ) + curTop;
      }
      if ( options.left != null ) {
        props.left = ( options.left - curOffset.left ) + curLeft;
      }

      if ( "using" in options ) {
        options.using.call( elem, props );

      } else {
        curElem.css( props );
      }
    }
  };

  jQuery.fn.extend({
    offset: function( options ) {
      if ( arguments.length ) {
        return options === undefined ?
          this :
          this.each(function( i ) {
            jQuery.offset.setOffset( this, options, i );
          });
      }

      var docElem, win,
        elem = this[ 0 ],
        box = { top: 0, left: 0 },
        doc = elem && elem.ownerDocument;

      if ( !doc ) {
        return;
      }

      docElem = doc.documentElement;

      // Make sure it's not a disconnected DOM node
      if ( !jQuery.contains( docElem, elem ) ) {
        return box;
      }

      // Support: BlackBerry 5, iOS 3 (original iPhone)
      // If we don't have gBCR, just use 0,0 rather than error
      if ( typeof elem.getBoundingClientRect !== strundefined ) {
        box = elem.getBoundingClientRect();
      }
      win = getWindow( doc );
      return {
        top: box.top + win.pageYOffset - docElem.clientTop,
        left: box.left + win.pageXOffset - docElem.clientLeft
      };
    },

    position: function() {
      if ( !this[ 0 ] ) {
        return;
      }

      var offsetParent, offset,
        elem = this[ 0 ],
        parentOffset = { top: 0, left: 0 };

      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
      if ( jQuery.css( elem, "position" ) === "fixed" ) {
        // Assume getBoundingClientRect is there when computed position is fixed
        offset = elem.getBoundingClientRect();

      } else {
        // Get *real* offsetParent
        offsetParent = this.offsetParent();

        // Get correct offsets
        offset = this.offset();
        if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
          parentOffset = offsetParent.offset();
        }

        // Add offsetParent borders
        parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
        parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
      }

      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
        left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
      };
    },

    offsetParent: function() {
      return this.map(function() {
        var offsetParent = this.offsetParent || docElem;

        while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || docElem;
      });
    }
  });

  // Create scrollLeft and scrollTop methods
  jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
    var top = "pageYOffset" === prop;

    jQuery.fn[ method ] = function( val ) {
      return access( this, function( elem, method, val ) {
        var win = getWindow( elem );

        if ( val === undefined ) {
          return win ? win[ prop ] : elem[ method ];
        }

        if ( win ) {
          win.scrollTo(
            !top ? val : window.pageXOffset,
            top ? val : window.pageYOffset
          );

        } else {
          elem[ method ] = val;
        }
      }, method, val, arguments.length, null );
    };
  });

  // Support: Safari<7+, Chrome<37+
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here
  jQuery.each( [ "top", "left" ], function( i, prop ) {
    jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
      function( elem, computed ) {
        if ( computed ) {
          computed = curCSS( elem, prop );
          // If curCSS returns percentage, fallback to offset
          return rnumnonpx.test( computed ) ?
            jQuery( elem ).position()[ prop ] + "px" :
            computed;
        }
      }
    );
  });


  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
    jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[ funcName ] = function( margin, value ) {
        var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
          extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

        return access( this, function( elem, type, value ) {
          var doc;

          if ( jQuery.isWindow( elem ) ) {
            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
            // isn't a whole lot we can do. See pull request at this URL for discussion:
            // https://github.com/jquery/jquery/pull/764
            return elem.document.documentElement[ "client" + name ];
          }

          // Get document width or height
          if ( elem.nodeType === 9 ) {
            doc = elem.documentElement;

            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest
            return Math.max(
              elem.body[ "scroll" + name ], doc[ "scroll" + name ],
              elem.body[ "offset" + name ], doc[ "offset" + name ],
              doc[ "client" + name ]
            );
          }

          return value === undefined ?
            // Get width or height on the element, requesting but not forcing parseFloat
            jQuery.css( elem, type, extra ) :

            // Set width or height on the element
            jQuery.style( elem, type, value, extra );
        }, type, chainable ? margin : undefined, chainable, null );
      };
    });
  });


  // The number of elements contained in the matched element set
  jQuery.fn.size = function() {
    return this.length;
  };

  jQuery.fn.andSelf = jQuery.fn.addBack;




  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.

  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

  if ( true ) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return jQuery;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }




  var
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,

    // Map over the $ in case of overwrite
    _$ = window.$;

  jQuery.noConflict = function( deep ) {
    if ( window.$ === jQuery ) {
      window.$ = _$;
    }

    if ( deep && window.jQuery === jQuery ) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  };

  // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)
  if ( typeof noGlobal === strundefined ) {
    window.jQuery = window.$ = jQuery;
  }




  return jQuery;

  }));


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

  var jQuery = __webpack_require__(1);

  /*! jQuery UI - v1.10.3 - 2013-05-03
  * http://jqueryui.com
  * Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.ui.effect.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js, jquery.ui.menu.js, jquery.ui.position.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js
  * Copyright 2013 jQuery Foundation and other contributors; Licensed MIT */
  (function( $, undefined ) {

  var uuid = 0,
    runiqueId = /^ui-id-\d+$/;

  // $.ui might exist from components with no dependencies, e.g., $.ui.position
  $.ui = $.ui || {};

  $.extend( $.ui, {
    version: "1.10.3",

    keyCode: {
      BACKSPACE: 8,
      COMMA: 188,
      DELETE: 46,
      DOWN: 40,
      END: 35,
      ENTER: 13,
      ESCAPE: 27,
      HOME: 36,
      LEFT: 37,
      NUMPAD_ADD: 107,
      NUMPAD_DECIMAL: 110,
      NUMPAD_DIVIDE: 111,
      NUMPAD_ENTER: 108,
      NUMPAD_MULTIPLY: 106,
      NUMPAD_SUBTRACT: 109,
      PAGE_DOWN: 34,
      PAGE_UP: 33,
      PERIOD: 190,
      RIGHT: 39,
      SPACE: 32,
      TAB: 9,
      UP: 38
    }
  });

  // plugins
  $.fn.extend({
    focus: (function( orig ) {
      return function( delay, fn ) {
        return typeof delay === "number" ?
          this.each(function() {
            var elem = this;
            setTimeout(function() {
              $( elem ).focus();
              if ( fn ) {
                fn.call( elem );
              }
            }, delay );
          }) :
          orig.apply( this, arguments );
      };
    })( $.fn.focus ),

    scrollParent: function() {
      var scrollParent;
      if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
        scrollParent = this.parents().filter(function() {
          return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
        }).eq(0);
      } else {
        scrollParent = this.parents().filter(function() {
          return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
        }).eq(0);
      }

      return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
    },

    zIndex: function( zIndex ) {
      if ( zIndex !== undefined ) {
        return this.css( "zIndex", zIndex );
      }

      if ( this.length ) {
        var elem = $( this[ 0 ] ), position, value;
        while ( elem.length && elem[ 0 ] !== document ) {
          // Ignore z-index if position is set to a value where z-index is ignored by the browser
          // This makes behavior of this function consistent across browsers
          // WebKit always returns auto if the element is positioned
          position = elem.css( "position" );
          if ( position === "absolute" || position === "relative" || position === "fixed" ) {
            // IE returns 0 when zIndex is not specified
            // other browsers return a string
            // we ignore the case of nested elements with an explicit value of 0
            // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
            value = parseInt( elem.css( "zIndex" ), 10 );
            if ( !isNaN( value ) && value !== 0 ) {
              return value;
            }
          }
          elem = elem.parent();
        }
      }

      return 0;
    },

    uniqueId: function() {
      return this.each(function() {
        if ( !this.id ) {
          this.id = "ui-id-" + (++uuid);
        }
      });
    },

    removeUniqueId: function() {
      return this.each(function() {
        if ( runiqueId.test( this.id ) ) {
          $( this ).removeAttr( "id" );
        }
      });
    }
  });

  // selectors
  function focusable( element, isTabIndexNotNaN ) {
    var map, mapName, img,
      nodeName = element.nodeName.toLowerCase();
    if ( "area" === nodeName ) {
      map = element.parentNode;
      mapName = map.name;
      if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
        return false;
      }
      img = $( "img[usemap=#" + mapName + "]" )[0];
      return !!img && visible( img );
    }
    return ( /input|select|textarea|button|object/.test( nodeName ) ?
      !element.disabled :
      "a" === nodeName ?
        element.href || isTabIndexNotNaN :
        isTabIndexNotNaN) &&
      // the element and all of its ancestors must be visible
      visible( element );
  }

  function visible( element ) {
    return $.expr.filters.visible( element ) &&
      !$( element ).parents().addBack().filter(function() {
        return $.css( this, "visibility" ) === "hidden";
      }).length;
  }

  $.extend( $.expr[ ":" ], {
    data: $.expr.createPseudo ?
      $.expr.createPseudo(function( dataName ) {
        return function( elem ) {
          return !!$.data( elem, dataName );
        };
      }) :
      // support: jQuery <1.8
      function( elem, i, match ) {
        return !!$.data( elem, match[ 3 ] );
      },

    focusable: function( element ) {
      return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
    },

    tabbable: function( element ) {
      var tabIndex = $.attr( element, "tabindex" ),
        isTabIndexNaN = isNaN( tabIndex );
      return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
    }
  });

  // support: jQuery <1.8
  if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
    $.each( [ "Width", "Height" ], function( i, name ) {
      var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
        type = name.toLowerCase(),
        orig = {
          innerWidth: $.fn.innerWidth,
          innerHeight: $.fn.innerHeight,
          outerWidth: $.fn.outerWidth,
          outerHeight: $.fn.outerHeight
        };

      function reduce( elem, size, border, margin ) {
        $.each( side, function() {
          size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
          if ( border ) {
            size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
          }
          if ( margin ) {
            size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
          }
        });
        return size;
      }

      $.fn[ "inner" + name ] = function( size ) {
        if ( size === undefined ) {
          return orig[ "inner" + name ].call( this );
        }

        return this.each(function() {
          $( this ).css( type, reduce( this, size ) + "px" );
        });
      };

      $.fn[ "outer" + name] = function( size, margin ) {
        if ( typeof size !== "number" ) {
          return orig[ "outer" + name ].call( this, size );
        }

        return this.each(function() {
          $( this).css( type, reduce( this, size, true, margin ) + "px" );
        });
      };
    });
  }

  // support: jQuery <1.8
  if ( !$.fn.addBack ) {
    $.fn.addBack = function( selector ) {
      return this.add( selector == null ?
        this.prevObject : this.prevObject.filter( selector )
      );
    };
  }

  // support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
  if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
    $.fn.removeData = (function( removeData ) {
      return function( key ) {
        if ( arguments.length ) {
          return removeData.call( this, $.camelCase( key ) );
        } else {
          return removeData.call( this );
        }
      };
    })( $.fn.removeData );
  }





  // deprecated
  $.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

  $.support.selectstart = "onselectstart" in document.createElement( "div" );
  $.fn.extend({
    disableSelection: function() {
      return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
        ".ui-disableSelection", function( event ) {
          event.preventDefault();
        });
    },

    enableSelection: function() {
      return this.unbind( ".ui-disableSelection" );
    }
  });

  $.extend( $.ui, {
    // $.ui.plugin is deprecated. Use $.widget() extensions instead.
    plugin: {
      add: function( module, option, set ) {
        var i,
          proto = $.ui[ module ].prototype;
        for ( i in set ) {
          proto.plugins[ i ] = proto.plugins[ i ] || [];
          proto.plugins[ i ].push( [ option, set[ i ] ] );
        }
      },
      call: function( instance, name, args ) {
        var i,
          set = instance.plugins[ name ];
        if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
          return;
        }

        for ( i = 0; i < set.length; i++ ) {
          if ( instance.options[ set[ i ][ 0 ] ] ) {
            set[ i ][ 1 ].apply( instance.element, args );
          }
        }
      }
    },

    // only used by resizable
    hasScroll: function( el, a ) {

      //If overflow is hidden, the element might have extra content, but the user wants to hide it
      if ( $( el ).css( "overflow" ) === "hidden") {
        return false;
      }

      var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
        has = false;

      if ( el[ scroll ] > 0 ) {
        return true;
      }

      // TODO: determine which cases actually cause this to happen
      // if the element doesn't have the scroll set, see if it's possible to
      // set the scroll
      el[ scroll ] = 1;
      has = ( el[ scroll ] > 0 );
      el[ scroll ] = 0;
      return has;
    }
  });

  })( jQuery );

  (function( $, undefined ) {

  var uuid = 0,
    slice = Array.prototype.slice,
    _cleanData = $.cleanData;
  $.cleanData = function( elems ) {
    for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
      try {
        $( elem ).triggerHandler( "remove" );
      // http://bugs.jquery.com/ticket/8235
      } catch( e ) {}
    }
    _cleanData( elems );
  };

  $.widget = function( name, base, prototype ) {
    var fullName, existingConstructor, constructor, basePrototype,
      // proxiedPrototype allows the provided prototype to remain unmodified
      // so that it can be used as a mixin for multiple widgets (#8876)
      proxiedPrototype = {},
      namespace = name.split( "." )[ 0 ];

    name = name.split( "." )[ 1 ];
    fullName = namespace + "-" + name;

    if ( !prototype ) {
      prototype = base;
      base = $.Widget;
    }

    // create selector for plugin
    $.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
      return !!$.data( elem, fullName );
    };

    $[ namespace ] = $[ namespace ] || {};
    existingConstructor = $[ namespace ][ name ];
    constructor = $[ namespace ][ name ] = function( options, element ) {
      // allow instantiation without "new" keyword
      if ( !this._createWidget ) {
        return new constructor( options, element );
      }

      // allow instantiation without initializing for simple inheritance
      // must use "new" keyword (the code above always passes args)
      if ( arguments.length ) {
        this._createWidget( options, element );
      }
    };
    // extend with the existing constructor to carry over any static properties
    $.extend( constructor, existingConstructor, {
      version: prototype.version,
      // copy the object used to create the prototype in case we need to
      // redefine the widget later
      _proto: $.extend( {}, prototype ),
      // track widgets that inherit from this widget in case this widget is
      // redefined after a widget inherits from it
      _childConstructors: []
    });

    basePrototype = new base();
    // we need to make the options hash a property directly on the new instance
    // otherwise we'll modify the options hash on the prototype that we're
    // inheriting from
    basePrototype.options = $.widget.extend( {}, basePrototype.options );
    $.each( prototype, function( prop, value ) {
      if ( !$.isFunction( value ) ) {
        proxiedPrototype[ prop ] = value;
        return;
      }
      proxiedPrototype[ prop ] = (function() {
        var _super = function() {
            return base.prototype[ prop ].apply( this, arguments );
          },
          _superApply = function( args ) {
            return base.prototype[ prop ].apply( this, args );
          };
        return function() {
          var __super = this._super,
            __superApply = this._superApply,
            returnValue;

          this._super = _super;
          this._superApply = _superApply;

          returnValue = value.apply( this, arguments );

          this._super = __super;
          this._superApply = __superApply;

          return returnValue;
        };
      })();
    });
    constructor.prototype = $.widget.extend( basePrototype, {
      // TODO: remove support for widgetEventPrefix
      // always use the name + a colon as the prefix, e.g., draggable:start
      // don't prefix for widgets that aren't DOM-based
      widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
    }, proxiedPrototype, {
      constructor: constructor,
      namespace: namespace,
      widgetName: name,
      widgetFullName: fullName
    });

    // If this widget is being redefined then we need to find all widgets that
    // are inheriting from it and redefine all of them so that they inherit from
    // the new version of this widget. We're essentially trying to replace one
    // level in the prototype chain.
    if ( existingConstructor ) {
      $.each( existingConstructor._childConstructors, function( i, child ) {
        var childPrototype = child.prototype;

        // redefine the child widget using the same prototype that was
        // originally used, but inherit from the new version of the base
        $.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
      });
      // remove the list of existing child constructors from the old constructor
      // so the old child constructors can be garbage collected
      delete existingConstructor._childConstructors;
    } else {
      base._childConstructors.push( constructor );
    }

    $.widget.bridge( name, constructor );
  };

  $.widget.extend = function( target ) {
    var input = slice.call( arguments, 1 ),
      inputIndex = 0,
      inputLength = input.length,
      key,
      value;
    for ( ; inputIndex < inputLength; inputIndex++ ) {
      for ( key in input[ inputIndex ] ) {
        value = input[ inputIndex ][ key ];
        if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
          // Clone objects
          if ( $.isPlainObject( value ) ) {
            target[ key ] = $.isPlainObject( target[ key ] ) ?
              $.widget.extend( {}, target[ key ], value ) :
              // Don't extend strings, arrays, etc. with objects
              $.widget.extend( {}, value );
          // Copy everything else by reference
          } else {
            target[ key ] = value;
          }
        }
      }
    }
    return target;
  };

  $.widget.bridge = function( name, object ) {
    var fullName = object.prototype.widgetFullName || name;
    $.fn[ name ] = function( options ) {
      var isMethodCall = typeof options === "string",
        args = slice.call( arguments, 1 ),
        returnValue = this;

      // allow multiple hashes to be passed on init
      options = !isMethodCall && args.length ?
        $.widget.extend.apply( null, [ options ].concat(args) ) :
        options;

      if ( isMethodCall ) {
        this.each(function() {
          var methodValue,
            instance = $.data( this, fullName );
          if ( !instance ) {
            return $.error( "cannot call methods on " + name + " prior to initialization; " +
              "attempted to call method '" + options + "'" );
          }
          if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
            return $.error( "no such method '" + options + "' for " + name + " widget instance" );
          }
          methodValue = instance[ options ].apply( instance, args );
          if ( methodValue !== instance && methodValue !== undefined ) {
            returnValue = methodValue && methodValue.jquery ?
              returnValue.pushStack( methodValue.get() ) :
              methodValue;
            return false;
          }
        });
      } else {
        this.each(function() {
          var instance = $.data( this, fullName );
          if ( instance ) {
            instance.option( options || {} )._init();
          } else {
            $.data( this, fullName, new object( options, this ) );
          }
        });
      }

      return returnValue;
    };
  };

  $.Widget = function( /* options, element */ ) {};
  $.Widget._childConstructors = [];

  $.Widget.prototype = {
    widgetName: "widget",
    widgetEventPrefix: "",
    defaultElement: "<div>",
    options: {
      disabled: false,

      // callbacks
      create: null
    },
    _createWidget: function( options, element ) {
      element = $( element || this.defaultElement || this )[ 0 ];
      this.element = $( element );
      this.uuid = uuid++;
      this.eventNamespace = "." + this.widgetName + this.uuid;
      this.options = $.widget.extend( {},
        this.options,
        this._getCreateOptions(),
        options );

      this.bindings = $();
      this.hoverable = $();
      this.focusable = $();

      if ( element !== this ) {
        $.data( element, this.widgetFullName, this );
        this._on( true, this.element, {
          remove: function( event ) {
            if ( event.target === element ) {
              this.destroy();
            }
          }
        });
        this.document = $( element.style ?
          // element within the document
          element.ownerDocument :
          // element is window or document
          element.document || element );
        this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
      }

      this._create();
      this._trigger( "create", null, this._getCreateEventData() );
      this._init();
    },
    _getCreateOptions: $.noop,
    _getCreateEventData: $.noop,
    _create: $.noop,
    _init: $.noop,

    destroy: function() {
      this._destroy();
      // we can probably remove the unbind calls in 2.0
      // all event bindings should go through this._on()
      this.element
        .unbind( this.eventNamespace )
        // 1.9 BC for #7810
        // TODO remove dual storage
        .removeData( this.widgetName )
        .removeData( this.widgetFullName )
        // support: jquery <1.6.3
        // http://bugs.jquery.com/ticket/9413
        .removeData( $.camelCase( this.widgetFullName ) );
      this.widget()
        .unbind( this.eventNamespace )
        .removeAttr( "aria-disabled" )
        .removeClass(
          this.widgetFullName + "-disabled " +
          "ui-state-disabled" );

      // clean up events and states
      this.bindings.unbind( this.eventNamespace );
      this.hoverable.removeClass( "ui-state-hover" );
      this.focusable.removeClass( "ui-state-focus" );
    },
    _destroy: $.noop,

    widget: function() {
      return this.element;
    },

    option: function( key, value ) {
      var options = key,
        parts,
        curOption,
        i;

      if ( arguments.length === 0 ) {
        // don't return a reference to the internal hash
        return $.widget.extend( {}, this.options );
      }

      if ( typeof key === "string" ) {
        // handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
        options = {};
        parts = key.split( "." );
        key = parts.shift();
        if ( parts.length ) {
          curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
          for ( i = 0; i < parts.length - 1; i++ ) {
            curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
            curOption = curOption[ parts[ i ] ];
          }
          key = parts.pop();
          if ( value === undefined ) {
            return curOption[ key ] === undefined ? null : curOption[ key ];
          }
          curOption[ key ] = value;
        } else {
          if ( value === undefined ) {
            return this.options[ key ] === undefined ? null : this.options[ key ];
          }
          options[ key ] = value;
        }
      }

      this._setOptions( options );

      return this;
    },
    _setOptions: function( options ) {
      var key;

      for ( key in options ) {
        this._setOption( key, options[ key ] );
      }

      return this;
    },
    _setOption: function( key, value ) {
      this.options[ key ] = value;

      if ( key === "disabled" ) {
        this.widget()
          .toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )
          .attr( "aria-disabled", value );
        this.hoverable.removeClass( "ui-state-hover" );
        this.focusable.removeClass( "ui-state-focus" );
      }

      return this;
    },

    enable: function() {
      return this._setOption( "disabled", false );
    },
    disable: function() {
      return this._setOption( "disabled", true );
    },

    _on: function( suppressDisabledCheck, element, handlers ) {
      var delegateElement,
        instance = this;

      // no suppressDisabledCheck flag, shuffle arguments
      if ( typeof suppressDisabledCheck !== "boolean" ) {
        handlers = element;
        element = suppressDisabledCheck;
        suppressDisabledCheck = false;
      }

      // no element argument, shuffle and use this.element
      if ( !handlers ) {
        handlers = element;
        element = this.element;
        delegateElement = this.widget();
      } else {
        // accept selectors, DOM elements
        element = delegateElement = $( element );
        this.bindings = this.bindings.add( element );
      }

      $.each( handlers, function( event, handler ) {
        function handlerProxy() {
          // allow widgets to customize the disabled handling
          // - disabled as an array instead of boolean
          // - disabled class as method for disabling individual parts
          if ( !suppressDisabledCheck &&
              ( instance.options.disabled === true ||
                $( this ).hasClass( "ui-state-disabled" ) ) ) {
            return;
          }
          return ( typeof handler === "string" ? instance[ handler ] : handler )
            .apply( instance, arguments );
        }

        // copy the guid so direct unbinding works
        if ( typeof handler !== "string" ) {
          handlerProxy.guid = handler.guid =
            handler.guid || handlerProxy.guid || $.guid++;
        }

        var match = event.match( /^(\w+)\s*(.*)$/ ),
          eventName = match[1] + instance.eventNamespace,
          selector = match[2];
        if ( selector ) {
          delegateElement.delegate( selector, eventName, handlerProxy );
        } else {
          element.bind( eventName, handlerProxy );
        }
      });
    },

    _off: function( element, eventName ) {
      eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
      element.unbind( eventName ).undelegate( eventName );
    },

    _delay: function( handler, delay ) {
      function handlerProxy() {
        return ( typeof handler === "string" ? instance[ handler ] : handler )
          .apply( instance, arguments );
      }
      var instance = this;
      return setTimeout( handlerProxy, delay || 0 );
    },

    _hoverable: function( element ) {
      this.hoverable = this.hoverable.add( element );
      this._on( element, {
        mouseenter: function( event ) {
          $( event.currentTarget ).addClass( "ui-state-hover" );
        },
        mouseleave: function( event ) {
          $( event.currentTarget ).removeClass( "ui-state-hover" );
        }
      });
    },

    _focusable: function( element ) {
      this.focusable = this.focusable.add( element );
      this._on( element, {
        focusin: function( event ) {
          $( event.currentTarget ).addClass( "ui-state-focus" );
        },
        focusout: function( event ) {
          $( event.currentTarget ).removeClass( "ui-state-focus" );
        }
      });
    },

    _trigger: function( type, event, data ) {
      var prop, orig,
        callback = this.options[ type ];

      data = data || {};
      event = $.Event( event );
      event.type = ( type === this.widgetEventPrefix ?
        type :
        this.widgetEventPrefix + type ).toLowerCase();
      // the original event may come from any element
      // so we need to reset the target on the new event
      event.target = this.element[ 0 ];

      // copy original event properties over to the new event
      orig = event.originalEvent;
      if ( orig ) {
        for ( prop in orig ) {
          if ( !( prop in event ) ) {
            event[ prop ] = orig[ prop ];
          }
        }
      }

      this.element.trigger( event, data );
      return !( $.isFunction( callback ) &&
        callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
        event.isDefaultPrevented() );
    }
  };

  $.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
    $.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
      if ( typeof options === "string" ) {
        options = { effect: options };
      }
      var hasOptions,
        effectName = !options ?
          method :
          options === true || typeof options === "number" ?
            defaultEffect :
            options.effect || defaultEffect;
      options = options || {};
      if ( typeof options === "number" ) {
        options = { duration: options };
      }
      hasOptions = !$.isEmptyObject( options );
      options.complete = callback;
      if ( options.delay ) {
        element.delay( options.delay );
      }
      if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
        element[ method ]( options );
      } else if ( effectName !== method && element[ effectName ] ) {
        element[ effectName ]( options.duration, options.easing, callback );
      } else {
        element.queue(function( next ) {
          $( this )[ method ]();
          if ( callback ) {
            callback.call( element[ 0 ] );
          }
          next();
        });
      }
    };
  });

  })( jQuery );

  (function( $, undefined ) {

  var mouseHandled = false;
  $( document ).mouseup( function() {
    mouseHandled = false;
  });

  $.widget("ui.mouse", {
    version: "1.10.3",
    options: {
      cancel: "input,textarea,button,select,option",
      distance: 1,
      delay: 0
    },
    _mouseInit: function() {
      var that = this;

      this.element
        .bind("mousedown."+this.widgetName, function(event) {
          return that._mouseDown(event);
        })
        .bind("click."+this.widgetName, function(event) {
          if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
            $.removeData(event.target, that.widgetName + ".preventClickEvent");
            event.stopImmediatePropagation();
            return false;
          }
        });

      this.started = false;
    },

    // TODO: make sure destroying one instance of mouse doesn't mess with
    // other instances of mouse
    _mouseDestroy: function() {
      this.element.unbind("."+this.widgetName);
      if ( this._mouseMoveDelegate ) {
        $(document)
          .unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
          .unbind("mouseup."+this.widgetName, this._mouseUpDelegate);
      }
    },

    _mouseDown: function(event) {
      // don't let more than one widget handle mouseStart
      if( mouseHandled ) { return; }

      // we may have missed mouseup (out of window)
      (this._mouseStarted && this._mouseUp(event));

      this._mouseDownEvent = event;

      var that = this,
        btnIsLeft = (event.which === 1),
        // event.target.nodeName works around a bug in IE 8 with
        // disabled inputs (#7620)
        elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
      if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
        return true;
      }

      this.mouseDelayMet = !this.options.delay;
      if (!this.mouseDelayMet) {
        this._mouseDelayTimer = setTimeout(function() {
          that.mouseDelayMet = true;
        }, this.options.delay);
      }

      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
        this._mouseStarted = (this._mouseStart(event) !== false);
        if (!this._mouseStarted) {
          event.preventDefault();
          return true;
        }
      }

      // Click event may never have fired (Gecko & Opera)
      if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
        $.removeData(event.target, this.widgetName + ".preventClickEvent");
      }

      // these delegates are required to keep context
      this._mouseMoveDelegate = function(event) {
        return that._mouseMove(event);
      };
      this._mouseUpDelegate = function(event) {
        return that._mouseUp(event);
      };
      $(document)
        .bind("mousemove."+this.widgetName, this._mouseMoveDelegate)
        .bind("mouseup."+this.widgetName, this._mouseUpDelegate);

      event.preventDefault();

      mouseHandled = true;
      return true;
    },

    _mouseMove: function(event) {
      // IE mouseup check - mouseup happened when mouse was out of window
      if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
        return this._mouseUp(event);
      }

      if (this._mouseStarted) {
        this._mouseDrag(event);
        return event.preventDefault();
      }

      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
        this._mouseStarted =
          (this._mouseStart(this._mouseDownEvent, event) !== false);
        (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
      }

      return !this._mouseStarted;
    },

    _mouseUp: function(event) {
      $(document)
        .unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
        .unbind("mouseup."+this.widgetName, this._mouseUpDelegate);

      if (this._mouseStarted) {
        this._mouseStarted = false;

        if (event.target === this._mouseDownEvent.target) {
          $.data(event.target, this.widgetName + ".preventClickEvent", true);
        }

        this._mouseStop(event);
      }

      return false;
    },

    _mouseDistanceMet: function(event) {
      return (Math.max(
          Math.abs(this._mouseDownEvent.pageX - event.pageX),
          Math.abs(this._mouseDownEvent.pageY - event.pageY)
        ) >= this.options.distance
      );
    },

    _mouseDelayMet: function(/* event */) {
      return this.mouseDelayMet;
    },

    // These are placeholder methods, to be overriden by extending plugin
    _mouseStart: function(/* event */) {},
    _mouseDrag: function(/* event */) {},
    _mouseStop: function(/* event */) {},
    _mouseCapture: function(/* event */) { return true; }
  });

  })(jQuery);

  (function( $, undefined ) {

  $.widget("ui.draggable", $.ui.mouse, {
    version: "1.10.3",
    widgetEventPrefix: "drag",
    options: {
      addClasses: true,
      appendTo: "parent",
      axis: false,
      connectToSortable: false,
      containment: false,
      cursor: "auto",
      cursorAt: false,
      grid: false,
      handle: false,
      helper: "original",
      iframeFix: false,
      opacity: false,
      refreshPositions: false,
      revert: false,
      revertDuration: 500,
      scope: "default",
      scroll: true,
      scrollSensitivity: 20,
      scrollSpeed: 20,
      snap: false,
      snapMode: "both",
      snapTolerance: 20,
      stack: false,
      zIndex: false,

      // callbacks
      drag: null,
      start: null,
      stop: null
    },
    _create: function() {

      if (this.options.helper === "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
        this.element[0].style.position = "relative";
      }
      if (this.options.addClasses){
        this.element.addClass("ui-draggable");
      }
      if (this.options.disabled){
        this.element.addClass("ui-draggable-disabled");
      }

      this._mouseInit();

    },

    _destroy: function() {
      this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );
      this._mouseDestroy();
    },

    _mouseCapture: function(event) {

      var o = this.options;

      // among others, prevent a drag on a resizable-handle
      if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
        return false;
      }

      //Quit if we're not on a valid handle
      this.handle = this._getHandle(event);
      if (!this.handle) {
        return false;
      }

      $(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
        $("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>")
        .css({
          width: this.offsetWidth+"px", height: this.offsetHeight+"px",
          position: "absolute", opacity: "0.001", zIndex: 1000
        })
        .css($(this).offset())
        .appendTo("body");
      });

      return true;

    },

    _mouseStart: function(event) {

      var o = this.options;

      //Create and append the visible helper
      this.helper = this._createHelper(event);

      this.helper.addClass("ui-draggable-dragging");

      //Cache the helper size
      this._cacheHelperProportions();

      //If ddmanager is used for droppables, set the global draggable
      if($.ui.ddmanager) {
        $.ui.ddmanager.current = this;
      }

      /*
       * - Position generation -
       * This block generates everything position related - it's the core of draggables.
       */

      //Cache the margins of the original element
      this._cacheMargins();

      //Store the helper's css position
      this.cssPosition = this.helper.css( "position" );
      this.scrollParent = this.helper.scrollParent();
      this.offsetParent = this.helper.offsetParent();
      this.offsetParentCssPosition = this.offsetParent.css( "position" );

      //The element's absolute position on the page minus margins
      this.offset = this.positionAbs = this.element.offset();
      this.offset = {
        top: this.offset.top - this.margins.top,
        left: this.offset.left - this.margins.left
      };

      //Reset scroll cache
      this.offset.scroll = false;

      $.extend(this.offset, {
        click: { //Where the click happened, relative to the element
          left: event.pageX - this.offset.left,
          top: event.pageY - this.offset.top
        },
        parent: this._getParentOffset(),
        relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
      });

      //Generate the original position
      this.originalPosition = this.position = this._generatePosition(event);
      this.originalPageX = event.pageX;
      this.originalPageY = event.pageY;

      //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
      (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

      //Set a containment if given in the options
      this._setContainment();

      //Trigger event + callbacks
      if(this._trigger("start", event) === false) {
        this._clear();
        return false;
      }

      //Recache the helper size
      this._cacheHelperProportions();

      //Prepare the droppable offsets
      if ($.ui.ddmanager && !o.dropBehaviour) {
        $.ui.ddmanager.prepareOffsets(this, event);
      }


      this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

      //If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
      if ( $.ui.ddmanager ) {
        $.ui.ddmanager.dragStart(this, event);
      }

      return true;
    },

    _mouseDrag: function(event, noPropagation) {
      // reset any necessary cached properties (see #5009)
      if ( this.offsetParentCssPosition === "fixed" ) {
        this.offset.parent = this._getParentOffset();
      }

      //Compute the helpers position
      this.position = this._generatePosition(event);
      this.positionAbs = this._convertPositionTo("absolute");

      //Call plugins and callbacks and use the resulting position if something is returned
      if (!noPropagation) {
        var ui = this._uiHash();
        if(this._trigger("drag", event, ui) === false) {
          this._mouseUp({});
          return false;
        }
        this.position = ui.position;
      }

      if(!this.options.axis || this.options.axis !== "y") {
        this.helper[0].style.left = this.position.left+"px";
      }
      if(!this.options.axis || this.options.axis !== "x") {
        this.helper[0].style.top = this.position.top+"px";
      }
      if($.ui.ddmanager) {
        $.ui.ddmanager.drag(this, event);
      }

      return false;
    },

    _mouseStop: function(event) {

      //If we are using droppables, inform the manager about the drop
      var that = this,
        dropped = false;
      if ($.ui.ddmanager && !this.options.dropBehaviour) {
        dropped = $.ui.ddmanager.drop(this, event);
      }

      //if a drop comes from outside (a sortable)
      if(this.dropped) {
        dropped = this.dropped;
        this.dropped = false;
      }

      //if the original element is no longer in the DOM don't bother to continue (see #8269)
      if ( this.options.helper === "original" && !$.contains( this.element[ 0 ].ownerDocument, this.element[ 0 ] ) ) {
        return false;
      }

      if((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
        $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
          if(that._trigger("stop", event) !== false) {
            that._clear();
          }
        });
      } else {
        if(this._trigger("stop", event) !== false) {
          this._clear();
        }
      }

      return false;
    },

    _mouseUp: function(event) {
      //Remove frame helpers
      $("div.ui-draggable-iframeFix").each(function() {
        this.parentNode.removeChild(this);
      });

      //If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
      if( $.ui.ddmanager ) {
        $.ui.ddmanager.dragStop(this, event);
      }

      return $.ui.mouse.prototype._mouseUp.call(this, event);
    },

    cancel: function() {

      if(this.helper.is(".ui-draggable-dragging")) {
        this._mouseUp({});
      } else {
        this._clear();
      }

      return this;

    },

    _getHandle: function(event) {
      return this.options.handle ?
        !!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
        true;
    },

    _createHelper: function(event) {

      var o = this.options,
        helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element);

      if(!helper.parents("body").length) {
        helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
      }

      if(helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
        helper.css("position", "absolute");
      }

      return helper;

    },

    _adjustOffsetFromHelper: function(obj) {
      if (typeof obj === "string") {
        obj = obj.split(" ");
      }
      if ($.isArray(obj)) {
        obj = {left: +obj[0], top: +obj[1] || 0};
      }
      if ("left" in obj) {
        this.offset.click.left = obj.left + this.margins.left;
      }
      if ("right" in obj) {
        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
      }
      if ("top" in obj) {
        this.offset.click.top = obj.top + this.margins.top;
      }
      if ("bottom" in obj) {
        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
      }
    },

    _getParentOffset: function() {

      //Get the offsetParent and cache its position
      var po = this.offsetParent.offset();

      // This is a special case where we need to modify a offset calculated on start, since the following happened:
      // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
      // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
      //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
      if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
        po.left += this.scrollParent.scrollLeft();
        po.top += this.scrollParent.scrollTop();
      }

      //This needs to be actually done for all browsers, since pageX/pageY includes this information
      //Ugly IE fix
      if((this.offsetParent[0] === document.body) ||
        (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
        po = { top: 0, left: 0 };
      }

      return {
        top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
        left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
      };

    },

    _getRelativeOffset: function() {

      if(this.cssPosition === "relative") {
        var p = this.element.position();
        return {
          top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
          left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
        };
      } else {
        return { top: 0, left: 0 };
      }

    },

    _cacheMargins: function() {
      this.margins = {
        left: (parseInt(this.element.css("marginLeft"),10) || 0),
        top: (parseInt(this.element.css("marginTop"),10) || 0),
        right: (parseInt(this.element.css("marginRight"),10) || 0),
        bottom: (parseInt(this.element.css("marginBottom"),10) || 0)
      };
    },

    _cacheHelperProportions: function() {
      this.helperProportions = {
        width: this.helper.outerWidth(),
        height: this.helper.outerHeight()
      };
    },

    _setContainment: function() {

      var over, c, ce,
        o = this.options;

      if ( !o.containment ) {
        this.containment = null;
        return;
      }

      if ( o.containment === "window" ) {
        this.containment = [
          $( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
          $( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
          $( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,
          $( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
        ];
        return;
      }

      if ( o.containment === "document") {
        this.containment = [
          0,
          0,
          $( document ).width() - this.helperProportions.width - this.margins.left,
          ( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
        ];
        return;
      }

      if ( o.containment.constructor === Array ) {
        this.containment = o.containment;
        return;
      }

      if ( o.containment === "parent" ) {
        o.containment = this.helper[ 0 ].parentNode;
      }

      c = $( o.containment );
      ce = c[ 0 ];

      if( !ce ) {
        return;
      }

      over = c.css( "overflow" ) !== "hidden";

      this.containment = [
        ( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
        ( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ) ,
        ( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) - ( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) - this.helperProportions.width - this.margins.left - this.margins.right,
        ( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) - ( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) - this.helperProportions.height - this.margins.top  - this.margins.bottom
      ];
      this.relative_container = c;
    },

    _convertPositionTo: function(d, pos) {

      if(!pos) {
        pos = this.position;
      }

      var mod = d === "absolute" ? 1 : -1,
        scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent;

      //Cache the scroll
      if (!this.offset.scroll) {
        this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
      }

      return {
        top: (
          pos.top +                               // The absolute mouse position
          this.offset.relative.top * mod +                    // Only for relative positioned nodes: Relative offset from element to offset parent
          this.offset.parent.top * mod -                    // The offsetParent's offset without borders (offset + border)
          ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top ) * mod )
        ),
        left: (
          pos.left +                                // The absolute mouse position
          this.offset.relative.left * mod +                   // Only for relative positioned nodes: Relative offset from element to offset parent
          this.offset.parent.left * mod -                   // The offsetParent's offset without borders (offset + border)
          ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left ) * mod )
        )
      };

    },

    _generatePosition: function(event) {

      var containment, co, top, left,
        o = this.options,
        scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent,
        pageX = event.pageX,
        pageY = event.pageY;

      //Cache the scroll
      if (!this.offset.scroll) {
        this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
      }

      /*
       * - Position constraining -
       * Constrain the position to a mix of grid, containment.
       */

      // If we are not dragging yet, we won't check for options
      if ( this.originalPosition ) {
        if ( this.containment ) {
          if ( this.relative_container ){
            co = this.relative_container.offset();
            containment = [
              this.containment[ 0 ] + co.left,
              this.containment[ 1 ] + co.top,
              this.containment[ 2 ] + co.left,
              this.containment[ 3 ] + co.top
            ];
          }
          else {
            containment = this.containment;
          }

          if(event.pageX - this.offset.click.left < containment[0]) {
            pageX = containment[0] + this.offset.click.left;
          }
          if(event.pageY - this.offset.click.top < containment[1]) {
            pageY = containment[1] + this.offset.click.top;
          }
          if(event.pageX - this.offset.click.left > containment[2]) {
            pageX = containment[2] + this.offset.click.left;
          }
          if(event.pageY - this.offset.click.top > containment[3]) {
            pageY = containment[3] + this.offset.click.top;
          }
        }

        if(o.grid) {
          //Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
          top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
          pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

          left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
          pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
        }

      }

      return {
        top: (
          pageY -                                 // The absolute mouse position
          this.offset.click.top -                       // Click offset (relative to the element)
          this.offset.relative.top -                        // Only for relative positioned nodes: Relative offset from element to offset parent
          this.offset.parent.top +                        // The offsetParent's offset without borders (offset + border)
          ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top )
        ),
        left: (
          pageX -                                 // The absolute mouse position
          this.offset.click.left -                        // Click offset (relative to the element)
          this.offset.relative.left -                       // Only for relative positioned nodes: Relative offset from element to offset parent
          this.offset.parent.left +                       // The offsetParent's offset without borders (offset + border)
          ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left )
        )
      };

    },

    _clear: function() {
      this.helper.removeClass("ui-draggable-dragging");
      if(this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
        this.helper.remove();
      }
      this.helper = null;
      this.cancelHelperRemoval = false;
    },

    // From now on bulk stuff - mainly helpers

    _trigger: function(type, event, ui) {
      ui = ui || this._uiHash();
      $.ui.plugin.call(this, type, [event, ui]);
      //The absolute position has to be recalculated after plugins
      if(type === "drag") {
        this.positionAbs = this._convertPositionTo("absolute");
      }
      return $.Widget.prototype._trigger.call(this, type, event, ui);
    },

    plugins: {},

    _uiHash: function() {
      return {
        helper: this.helper,
        position: this.position,
        originalPosition: this.originalPosition,
        offset: this.positionAbs
      };
    }

  });

  $.ui.plugin.add("draggable", "connectToSortable", {
    start: function(event, ui) {

      var inst = $(this).data("ui-draggable"), o = inst.options,
        uiSortable = $.extend({}, ui, { item: inst.element });
      inst.sortables = [];
      $(o.connectToSortable).each(function() {
        var sortable = $.data(this, "ui-sortable");
        if (sortable && !sortable.options.disabled) {
          inst.sortables.push({
            instance: sortable,
            shouldRevert: sortable.options.revert
          });
          sortable.refreshPositions();  // Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
          sortable._trigger("activate", event, uiSortable);
        }
      });

    },
    stop: function(event, ui) {

      //If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
      var inst = $(this).data("ui-draggable"),
        uiSortable = $.extend({}, ui, { item: inst.element });

      $.each(inst.sortables, function() {
        if(this.instance.isOver) {

          this.instance.isOver = 0;

          inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
          this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

          //The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: "valid/invalid"
          if(this.shouldRevert) {
            this.instance.options.revert = this.shouldRevert;
          }

          //Trigger the stop of the sortable
          this.instance._mouseStop(event);

          this.instance.options.helper = this.instance.options._helper;

          //If the helper has been the original item, restore properties in the sortable
          if(inst.options.helper === "original") {
            this.instance.currentItem.css({ top: "auto", left: "auto" });
          }

        } else {
          this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
          this.instance._trigger("deactivate", event, uiSortable);
        }

      });

    },
    drag: function(event, ui) {

      var inst = $(this).data("ui-draggable"), that = this;

      $.each(inst.sortables, function() {

        var innermostIntersecting = false,
          thisSortable = this;

        //Copy over some variables to allow calling the sortable's native _intersectsWith
        this.instance.positionAbs = inst.positionAbs;
        this.instance.helperProportions = inst.helperProportions;
        this.instance.offset.click = inst.offset.click;

        if(this.instance._intersectsWith(this.instance.containerCache)) {
          innermostIntersecting = true;
          $.each(inst.sortables, function () {
            this.instance.positionAbs = inst.positionAbs;
            this.instance.helperProportions = inst.helperProportions;
            this.instance.offset.click = inst.offset.click;
            if (this !== thisSortable &&
              this.instance._intersectsWith(this.instance.containerCache) &&
              $.contains(thisSortable.instance.element[0], this.instance.element[0])
            ) {
              innermostIntersecting = false;
            }
            return innermostIntersecting;
          });
        }


        if(innermostIntersecting) {
          //If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
          if(!this.instance.isOver) {

            this.instance.isOver = 1;
            //Now we fake the start of dragging for the sortable instance,
            //by cloning the list group item, appending it to the sortable and using it as inst.currentItem
            //We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
            this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", true);
            this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
            this.instance.options.helper = function() { return ui.helper[0]; };

            event.target = this.instance.currentItem[0];
            this.instance._mouseCapture(event, true);
            this.instance._mouseStart(event, true, true);

            //Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
            this.instance.offset.click.top = inst.offset.click.top;
            this.instance.offset.click.left = inst.offset.click.left;
            this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
            this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

            inst._trigger("toSortable", event);
            inst.dropped = this.instance.element; //draggable revert needs that
            //hack so receive/update callbacks work (mostly)
            inst.currentItem = inst.element;
            this.instance.fromOutside = inst;

          }

          //Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
          if(this.instance.currentItem) {
            this.instance._mouseDrag(event);
          }

        } else {

          //If it doesn't intersect with the sortable, and it intersected before,
          //we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
          if(this.instance.isOver) {

            this.instance.isOver = 0;
            this.instance.cancelHelperRemoval = true;

            //Prevent reverting on this forced stop
            this.instance.options.revert = false;

            // The out event needs to be triggered independently
            this.instance._trigger("out", event, this.instance._uiHash(this.instance));

            this.instance._mouseStop(event, true);
            this.instance.options.helper = this.instance.options._helper;

            //Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
            this.instance.currentItem.remove();
            if(this.instance.placeholder) {
              this.instance.placeholder.remove();
            }

            inst._trigger("fromSortable", event);
            inst.dropped = false; //draggable revert needs that
          }

        }

      });

    }
  });

  $.ui.plugin.add("draggable", "cursor", {
    start: function() {
      var t = $("body"), o = $(this).data("ui-draggable").options;
      if (t.css("cursor")) {
        o._cursor = t.css("cursor");
      }
      t.css("cursor", o.cursor);
    },
    stop: function() {
      var o = $(this).data("ui-draggable").options;
      if (o._cursor) {
        $("body").css("cursor", o._cursor);
      }
    }
  });

  $.ui.plugin.add("draggable", "opacity", {
    start: function(event, ui) {
      var t = $(ui.helper), o = $(this).data("ui-draggable").options;
      if(t.css("opacity")) {
        o._opacity = t.css("opacity");
      }
      t.css("opacity", o.opacity);
    },
    stop: function(event, ui) {
      var o = $(this).data("ui-draggable").options;
      if(o._opacity) {
        $(ui.helper).css("opacity", o._opacity);
      }
    }
  });

  $.ui.plugin.add("draggable", "scroll", {
    start: function() {
      var i = $(this).data("ui-draggable");
      if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {
        i.overflowOffset = i.scrollParent.offset();
      }
    },
    drag: function( event ) {

      var i = $(this).data("ui-draggable"), o = i.options, scrolled = false;

      if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {

        if(!o.axis || o.axis !== "x") {
          if((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
            i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
          } else if(event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
            i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
          }
        }

        if(!o.axis || o.axis !== "y") {
          if((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
            i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
          } else if(event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
            i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
          }
        }

      } else {

        if(!o.axis || o.axis !== "x") {
          if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
            scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
          } else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
          }
        }

        if(!o.axis || o.axis !== "y") {
          if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
            scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
          } else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
          }
        }

      }

      if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
        $.ui.ddmanager.prepareOffsets(i, event);
      }

    }
  });

  $.ui.plugin.add("draggable", "snap", {
    start: function() {

      var i = $(this).data("ui-draggable"),
        o = i.options;

      i.snapElements = [];

      $(o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap).each(function() {
        var $t = $(this),
          $o = $t.offset();
        if(this !== i.element[0]) {
          i.snapElements.push({
            item: this,
            width: $t.outerWidth(), height: $t.outerHeight(),
            top: $o.top, left: $o.left
          });
        }
      });

    },
    drag: function(event, ui) {

      var ts, bs, ls, rs, l, r, t, b, i, first,
        inst = $(this).data("ui-draggable"),
        o = inst.options,
        d = o.snapTolerance,
        x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
        y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

      for (i = inst.snapElements.length - 1; i >= 0; i--){

        l = inst.snapElements[i].left;
        r = l + inst.snapElements[i].width;
        t = inst.snapElements[i].top;
        b = t + inst.snapElements[i].height;

        if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
          if(inst.snapElements[i].snapping) {
            (inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
          }
          inst.snapElements[i].snapping = false;
          continue;
        }

        if(o.snapMode !== "inner") {
          ts = Math.abs(t - y2) <= d;
          bs = Math.abs(b - y1) <= d;
          ls = Math.abs(l - x2) <= d;
          rs = Math.abs(r - x1) <= d;
          if(ts) {
            ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
          }
          if(bs) {
            ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
          }
          if(ls) {
            ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
          }
          if(rs) {
            ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
          }
        }

        first = (ts || bs || ls || rs);

        if(o.snapMode !== "outer") {
          ts = Math.abs(t - y1) <= d;
          bs = Math.abs(b - y2) <= d;
          ls = Math.abs(l - x1) <= d;
          rs = Math.abs(r - x2) <= d;
          if(ts) {
            ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
          }
          if(bs) {
            ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
          }
          if(ls) {
            ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
          }
          if(rs) {
            ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
          }
        }

        if(!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
          (inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
        }
        inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

      }

    }
  });

  $.ui.plugin.add("draggable", "stack", {
    start: function() {
      var min,
        o = this.data("ui-draggable").options,
        group = $.makeArray($(o.stack)).sort(function(a,b) {
          return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);
        });

      if (!group.length) { return; }

      min = parseInt($(group[0]).css("zIndex"), 10) || 0;
      $(group).each(function(i) {
        $(this).css("zIndex", min + i);
      });
      this.css("zIndex", (min + group.length));
    }
  });

  $.ui.plugin.add("draggable", "zIndex", {
    start: function(event, ui) {
      var t = $(ui.helper), o = $(this).data("ui-draggable").options;
      if(t.css("zIndex")) {
        o._zIndex = t.css("zIndex");
      }
      t.css("zIndex", o.zIndex);
    },
    stop: function(event, ui) {
      var o = $(this).data("ui-draggable").options;
      if(o._zIndex) {
        $(ui.helper).css("zIndex", o._zIndex);
      }
    }
  });

  })(jQuery);

  (function( $, undefined ) {

  function isOverAxis( x, reference, size ) {
    return ( x > reference ) && ( x < ( reference + size ) );
  }

  $.widget("ui.droppable", {
    version: "1.10.3",
    widgetEventPrefix: "drop",
    options: {
      accept: "*",
      activeClass: false,
      addClasses: true,
      greedy: false,
      hoverClass: false,
      scope: "default",
      tolerance: "intersect",

      // callbacks
      activate: null,
      deactivate: null,
      drop: null,
      out: null,
      over: null
    },
    _create: function() {

      var o = this.options,
        accept = o.accept;

      this.isover = false;
      this.isout = true;

      this.accept = $.isFunction(accept) ? accept : function(d) {
        return d.is(accept);
      };

      //Store the droppable's proportions
      this.proportions = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight };

      // Add the reference and positions to the manager
      $.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
      $.ui.ddmanager.droppables[o.scope].push(this);

      (o.addClasses && this.element.addClass("ui-droppable"));

    },

    _destroy: function() {
      var i = 0,
        drop = $.ui.ddmanager.droppables[this.options.scope];

      for ( ; i < drop.length; i++ ) {
        if ( drop[i] === this ) {
          drop.splice(i, 1);
        }
      }

      this.element.removeClass("ui-droppable ui-droppable-disabled");
    },

    _setOption: function(key, value) {

      if(key === "accept") {
        this.accept = $.isFunction(value) ? value : function(d) {
          return d.is(value);
        };
      }
      $.Widget.prototype._setOption.apply(this, arguments);
    },

    _activate: function(event) {
      var draggable = $.ui.ddmanager.current;
      if(this.options.activeClass) {
        this.element.addClass(this.options.activeClass);
      }
      if(draggable){
        this._trigger("activate", event, this.ui(draggable));
      }
    },

    _deactivate: function(event) {
      var draggable = $.ui.ddmanager.current;
      if(this.options.activeClass) {
        this.element.removeClass(this.options.activeClass);
      }
      if(draggable){
        this._trigger("deactivate", event, this.ui(draggable));
      }
    },

    _over: function(event) {

      var draggable = $.ui.ddmanager.current;

      // Bail if draggable and droppable are same element
      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
        return;
      }

      if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
        if(this.options.hoverClass) {
          this.element.addClass(this.options.hoverClass);
        }
        this._trigger("over", event, this.ui(draggable));
      }

    },

    _out: function(event) {

      var draggable = $.ui.ddmanager.current;

      // Bail if draggable and droppable are same element
      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
        return;
      }

      if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
        if(this.options.hoverClass) {
          this.element.removeClass(this.options.hoverClass);
        }
        this._trigger("out", event, this.ui(draggable));
      }

    },

    _drop: function(event,custom) {

      var draggable = custom || $.ui.ddmanager.current,
        childrenIntersection = false;

      // Bail if draggable and droppable are same element
      if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
        return false;
      }

      this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
        var inst = $.data(this, "ui-droppable");
        if(
          inst.options.greedy &&
          !inst.options.disabled &&
          inst.options.scope === draggable.options.scope &&
          inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) &&
          $.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance)
        ) { childrenIntersection = true; return false; }
      });
      if(childrenIntersection) {
        return false;
      }

      if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
        if(this.options.activeClass) {
          this.element.removeClass(this.options.activeClass);
        }
        if(this.options.hoverClass) {
          this.element.removeClass(this.options.hoverClass);
        }
        this._trigger("drop", event, this.ui(draggable));
        return this.element;
      }

      return false;

    },

    ui: function(c) {
      return {
        draggable: (c.currentItem || c.element),
        helper: c.helper,
        position: c.position,
        offset: c.positionAbs
      };
    }

  });

  $.ui.intersect = function(draggable, droppable, toleranceMode) {

    if (!droppable.offset) {
      return false;
    }

    var draggableLeft, draggableTop,
      x1 = (draggable.positionAbs || draggable.position.absolute).left, x2 = x1 + draggable.helperProportions.width,
      y1 = (draggable.positionAbs || draggable.position.absolute).top, y2 = y1 + draggable.helperProportions.height,
      l = droppable.offset.left, r = l + droppable.proportions.width,
      t = droppable.offset.top, b = t + droppable.proportions.height;

    switch (toleranceMode) {
      case "fit":
        return (l <= x1 && x2 <= r && t <= y1 && y2 <= b);
      case "intersect":
        return (l < x1 + (draggable.helperProportions.width / 2) && // Right Half
          x2 - (draggable.helperProportions.width / 2) < r && // Left Half
          t < y1 + (draggable.helperProportions.height / 2) && // Bottom Half
          y2 - (draggable.helperProportions.height / 2) < b ); // Top Half
      case "pointer":
        draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left);
        draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top);
        return isOverAxis( draggableTop, t, droppable.proportions.height ) && isOverAxis( draggableLeft, l, droppable.proportions.width );
      case "touch":
        return (
          (y1 >= t && y1 <= b) || // Top edge touching
          (y2 >= t && y2 <= b) || // Bottom edge touching
          (y1 < t && y2 > b)    // Surrounded vertically
        ) && (
          (x1 >= l && x1 <= r) || // Left edge touching
          (x2 >= l && x2 <= r) || // Right edge touching
          (x1 < l && x2 > r)    // Surrounded horizontally
        );
      default:
        return false;
      }

  };

  /*
    This manager tracks offsets of draggables and droppables
  */
  $.ui.ddmanager = {
    current: null,
    droppables: { "default": [] },
    prepareOffsets: function(t, event) {

      var i, j,
        m = $.ui.ddmanager.droppables[t.options.scope] || [],
        type = event ? event.type : null, // workaround for #2317
        list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();

      droppablesLoop: for (i = 0; i < m.length; i++) {

        //No disabled and non-accepted
        if(m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) {
          continue;
        }

        // Filter out elements in the current dragged item
        for (j=0; j < list.length; j++) {
          if(list[j] === m[i].element[0]) {
            m[i].proportions.height = 0;
            continue droppablesLoop;
          }
        }

        m[i].visible = m[i].element.css("display") !== "none";
        if(!m[i].visible) {
          continue;
        }

        //Activate the droppable if used directly from draggables
        if(type === "mousedown") {
          m[i]._activate.call(m[i], event);
        }

        m[i].offset = m[i].element.offset();
        m[i].proportions = { width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight };

      }

    },
    drop: function(draggable, event) {

      var dropped = false;
      // Create a copy of the droppables in case the list changes during the drop (#9116)
      $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {

        if(!this.options) {
          return;
        }
        if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance)) {
          dropped = this._drop.call(this, event) || dropped;
        }

        if (!this.options.disabled && this.visible && this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
          this.isout = true;
          this.isover = false;
          this._deactivate.call(this, event);
        }

      });
      return dropped;

    },
    dragStart: function( draggable, event ) {
      //Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
      draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
        if( !draggable.options.refreshPositions ) {
          $.ui.ddmanager.prepareOffsets( draggable, event );
        }
      });
    },
    drag: function(draggable, event) {

      //If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
      if(draggable.options.refreshPositions) {
        $.ui.ddmanager.prepareOffsets(draggable, event);
      }

      //Run through all droppables and check their positions based on specific tolerance options
      $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

        if(this.options.disabled || this.greedyChild || !this.visible) {
          return;
        }

        var parentInstance, scope, parent,
          intersects = $.ui.intersect(draggable, this, this.options.tolerance),
          c = !intersects && this.isover ? "isout" : (intersects && !this.isover ? "isover" : null);
        if(!c) {
          return;
        }

        if (this.options.greedy) {
          // find droppable parents with same scope
          scope = this.options.scope;
          parent = this.element.parents(":data(ui-droppable)").filter(function () {
            return $.data(this, "ui-droppable").options.scope === scope;
          });

          if (parent.length) {
            parentInstance = $.data(parent[0], "ui-droppable");
            parentInstance.greedyChild = (c === "isover");
          }
        }

        // we just moved into a greedy child
        if (parentInstance && c === "isover") {
          parentInstance.isover = false;
          parentInstance.isout = true;
          parentInstance._out.call(parentInstance, event);
        }

        this[c] = true;
        this[c === "isout" ? "isover" : "isout"] = false;
        this[c === "isover" ? "_over" : "_out"].call(this, event);

        // we just moved out of a greedy child
        if (parentInstance && c === "isout") {
          parentInstance.isout = false;
          parentInstance.isover = true;
          parentInstance._over.call(parentInstance, event);
        }
      });

    },
    dragStop: function( draggable, event ) {
      draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
      //Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
      if( !draggable.options.refreshPositions ) {
        $.ui.ddmanager.prepareOffsets( draggable, event );
      }
    }
  };

  })(jQuery);

  (function( $, undefined ) {

  function num(v) {
    return parseInt(v, 10) || 0;
  }

  function isNumber(value) {
    return !isNaN(parseInt(value, 10));
  }

  $.widget("ui.resizable", $.ui.mouse, {
    version: "1.10.3",
    widgetEventPrefix: "resize",
    options: {
      alsoResize: false,
      animate: false,
      animateDuration: "slow",
      animateEasing: "swing",
      aspectRatio: false,
      autoHide: false,
      containment: false,
      ghost: false,
      grid: false,
      handles: "e,s,se",
      helper: false,
      maxHeight: null,
      maxWidth: null,
      minHeight: 10,
      minWidth: 10,
      // See #7960
      zIndex: 90,

      // callbacks
      resize: null,
      start: null,
      stop: null
    },
    _create: function() {

      var n, i, handle, axis, hname,
        that = this,
        o = this.options;
      this.element.addClass("ui-resizable");

      $.extend(this, {
        _aspectRatio: !!(o.aspectRatio),
        aspectRatio: o.aspectRatio,
        originalElement: this.element,
        _proportionallyResizeElements: [],
        _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
      });

      //Wrap the element if it cannot hold child nodes
      if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

        //Create a wrapper element and set the wrapper to the new current internal element
        this.element.wrap(
          $("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
            position: this.element.css("position"),
            width: this.element.outerWidth(),
            height: this.element.outerHeight(),
            top: this.element.css("top"),
            left: this.element.css("left")
          })
        );

        //Overwrite the original this.element
        this.element = this.element.parent().data(
          "ui-resizable", this.element.data("ui-resizable")
        );

        this.elementIsWrapper = true;

        //Move margins to the wrapper
        this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
        this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

        //Prevent Safari textarea resize
        this.originalResizeStyle = this.originalElement.css("resize");
        this.originalElement.css("resize", "none");

        //Push the actual element to our proportionallyResize internal array
        this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" }));

        // avoid IE jump (hard set the margin)
        this.originalElement.css({ margin: this.originalElement.css("margin") });

        // fix handlers offset
        this._proportionallyResize();

      }

      this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" });
      if(this.handles.constructor === String) {

        if ( this.handles === "all") {
          this.handles = "n,e,s,w,se,sw,ne,nw";
        }

        n = this.handles.split(",");
        this.handles = {};

        for(i = 0; i < n.length; i++) {

          handle = $.trim(n[i]);
          hname = "ui-resizable-"+handle;
          axis = $("<div class='ui-resizable-handle " + hname + "'></div>");

          // Apply zIndex to all handles - see #7960
          axis.css({ zIndex: o.zIndex });

          //TODO : What's going on here?
          if ("se" === handle) {
            axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
          }

          //Insert into internal handles object and append to element
          this.handles[handle] = ".ui-resizable-"+handle;
          this.element.append(axis);
        }

      }

      this._renderAxis = function(target) {

        var i, axis, padPos, padWrapper;

        target = target || this.element;

        for(i in this.handles) {

          if(this.handles[i].constructor === String) {
            this.handles[i] = $(this.handles[i], this.element).show();
          }

          //Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
          if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

            axis = $(this.handles[i], this.element);

            //Checking the correct pad and border
            padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

            //The padding type i have to apply...
            padPos = [ "padding",
              /ne|nw|n/.test(i) ? "Top" :
              /se|sw|s/.test(i) ? "Bottom" :
              /^e$/.test(i) ? "Right" : "Left" ].join("");

            target.css(padPos, padWrapper);

            this._proportionallyResize();

          }

          //TODO: What's that good for? There's not anything to be executed left
          if(!$(this.handles[i]).length) {
            continue;
          }
        }
      };

      //TODO: make renderAxis a prototype function
      this._renderAxis(this.element);

      this._handles = $(".ui-resizable-handle", this.element)
        .disableSelection();

      //Matching axis name
      this._handles.mouseover(function() {
        if (!that.resizing) {
          if (this.className) {
            axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
          }
          //Axis, default = se
          that.axis = axis && axis[1] ? axis[1] : "se";
        }
      });

      //If we want to auto hide the elements
      if (o.autoHide) {
        this._handles.hide();
        $(this.element)
          .addClass("ui-resizable-autohide")
          .mouseenter(function() {
            if (o.disabled) {
              return;
            }
            $(this).removeClass("ui-resizable-autohide");
            that._handles.show();
          })
          .mouseleave(function(){
            if (o.disabled) {
              return;
            }
            if (!that.resizing) {
              $(this).addClass("ui-resizable-autohide");
              that._handles.hide();
            }
          });
      }

      //Initialize the mouse interaction
      this._mouseInit();

    },

    _destroy: function() {

      this._mouseDestroy();

      var wrapper,
        _destroy = function(exp) {
          $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
            .removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
        };

      //TODO: Unwrap at same DOM position
      if (this.elementIsWrapper) {
        _destroy(this.element);
        wrapper = this.element;
        this.originalElement.css({
          position: wrapper.css("position"),
          width: wrapper.outerWidth(),
          height: wrapper.outerHeight(),
          top: wrapper.css("top"),
          left: wrapper.css("left")
        }).insertAfter( wrapper );
        wrapper.remove();
      }

      this.originalElement.css("resize", this.originalResizeStyle);
      _destroy(this.originalElement);

      return this;
    },

    _mouseCapture: function(event) {
      var i, handle,
        capture = false;

      for (i in this.handles) {
        handle = $(this.handles[i])[0];
        if (handle === event.target || $.contains(handle, event.target)) {
          capture = true;
        }
      }

      return !this.options.disabled && capture;
    },

    _mouseStart: function(event) {

      var curleft, curtop, cursor,
        o = this.options,
        iniPos = this.element.position(),
        el = this.element;

      this.resizing = true;

      // bugfix for http://dev.jquery.com/ticket/1749
      if ( (/absolute/).test( el.css("position") ) ) {
        el.css({ position: "absolute", top: el.css("top"), left: el.css("left") });
      } else if (el.is(".ui-draggable")) {
        el.css({ position: "absolute", top: iniPos.top, left: iniPos.left });
      }

      this._renderProxy();

      curleft = num(this.helper.css("left"));
      curtop = num(this.helper.css("top"));

      if (o.containment) {
        curleft += $(o.containment).scrollLeft() || 0;
        curtop += $(o.containment).scrollTop() || 0;
      }

      //Store needed variables
      this.offset = this.helper.offset();
      this.position = { left: curleft, top: curtop };
      this.size = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
      this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
      this.originalPosition = { left: curleft, top: curtop };
      this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
      this.originalMousePosition = { left: event.pageX, top: event.pageY };

      //Aspect Ratio
      this.aspectRatio = (typeof o.aspectRatio === "number") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

      cursor = $(".ui-resizable-" + this.axis).css("cursor");
      $("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

      el.addClass("ui-resizable-resizing");
      this._propagate("start", event);
      return true;
    },

    _mouseDrag: function(event) {

      //Increase performance, avoid regex
      var data,
        el = this.helper, props = {},
        smp = this.originalMousePosition,
        a = this.axis,
        prevTop = this.position.top,
        prevLeft = this.position.left,
        prevWidth = this.size.width,
        prevHeight = this.size.height,
        dx = (event.pageX-smp.left)||0,
        dy = (event.pageY-smp.top)||0,
        trigger = this._change[a];

      if (!trigger) {
        return false;
      }

      // Calculate the attrs that will be change
      data = trigger.apply(this, [event, dx, dy]);

      // Put this in the mouseDrag handler since the user can start pressing shift while resizing
      this._updateVirtualBoundaries(event.shiftKey);
      if (this._aspectRatio || event.shiftKey) {
        data = this._updateRatio(data, event);
      }

      data = this._respectSize(data, event);

      this._updateCache(data);

      // plugins callbacks need to be called first
      this._propagate("resize", event);

      if (this.position.top !== prevTop) {
        props.top = this.position.top + "px";
      }
      if (this.position.left !== prevLeft) {
        props.left = this.position.left + "px";
      }
      if (this.size.width !== prevWidth) {
        props.width = this.size.width + "px";
      }
      if (this.size.height !== prevHeight) {
        props.height = this.size.height + "px";
      }
      el.css(props);

      if (!this._helper && this._proportionallyResizeElements.length) {
        this._proportionallyResize();
      }

      // Call the user callback if the element was resized
      if ( ! $.isEmptyObject(props) ) {
        this._trigger("resize", event, this.ui());
      }

      return false;
    },

    _mouseStop: function(event) {

      this.resizing = false;
      var pr, ista, soffseth, soffsetw, s, left, top,
        o = this.options, that = this;

      if(this._helper) {

        pr = this._proportionallyResizeElements;
        ista = pr.length && (/textarea/i).test(pr[0].nodeName);
        soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height;
        soffsetw = ista ? 0 : that.sizeDiff.width;

        s = { width: (that.helper.width()  - soffsetw), height: (that.helper.height() - soffseth) };
        left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null;
        top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

        if (!o.animate) {
          this.element.css($.extend(s, { top: top, left: left }));
        }

        that.helper.height(that.size.height);
        that.helper.width(that.size.width);

        if (this._helper && !o.animate) {
          this._proportionallyResize();
        }
      }

      $("body").css("cursor", "auto");

      this.element.removeClass("ui-resizable-resizing");

      this._propagate("stop", event);

      if (this._helper) {
        this.helper.remove();
      }

      return false;

    },

    _updateVirtualBoundaries: function(forceAspectRatio) {
      var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
        o = this.options;

      b = {
        minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
        maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
        minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
        maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
      };

      if(this._aspectRatio || forceAspectRatio) {
        // We want to create an enclosing box whose aspect ration is the requested one
        // First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
        pMinWidth = b.minHeight * this.aspectRatio;
        pMinHeight = b.minWidth / this.aspectRatio;
        pMaxWidth = b.maxHeight * this.aspectRatio;
        pMaxHeight = b.maxWidth / this.aspectRatio;

        if(pMinWidth > b.minWidth) {
          b.minWidth = pMinWidth;
        }
        if(pMinHeight > b.minHeight) {
          b.minHeight = pMinHeight;
        }
        if(pMaxWidth < b.maxWidth) {
          b.maxWidth = pMaxWidth;
        }
        if(pMaxHeight < b.maxHeight) {
          b.maxHeight = pMaxHeight;
        }
      }
      this._vBoundaries = b;
    },

    _updateCache: function(data) {
      this.offset = this.helper.offset();
      if (isNumber(data.left)) {
        this.position.left = data.left;
      }
      if (isNumber(data.top)) {
        this.position.top = data.top;
      }
      if (isNumber(data.height)) {
        this.size.height = data.height;
      }
      if (isNumber(data.width)) {
        this.size.width = data.width;
      }
    },

    _updateRatio: function( data ) {

      var cpos = this.position,
        csize = this.size,
        a = this.axis;

      if (isNumber(data.height)) {
        data.width = (data.height * this.aspectRatio);
      } else if (isNumber(data.width)) {
        data.height = (data.width / this.aspectRatio);
      }

      if (a === "sw") {
        data.left = cpos.left + (csize.width - data.width);
        data.top = null;
      }
      if (a === "nw") {
        data.top = cpos.top + (csize.height - data.height);
        data.left = cpos.left + (csize.width - data.width);
      }

      return data;
    },

    _respectSize: function( data ) {

      var o = this._vBoundaries,
        a = this.axis,
        ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
        isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
        dw = this.originalPosition.left + this.originalSize.width,
        dh = this.position.top + this.size.height,
        cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
      if (isminw) {
        data.width = o.minWidth;
      }
      if (isminh) {
        data.height = o.minHeight;
      }
      if (ismaxw) {
        data.width = o.maxWidth;
      }
      if (ismaxh) {
        data.height = o.maxHeight;
      }

      if (isminw && cw) {
        data.left = dw - o.minWidth;
      }
      if (ismaxw && cw) {
        data.left = dw - o.maxWidth;
      }
      if (isminh && ch) {
        data.top = dh - o.minHeight;
      }
      if (ismaxh && ch) {
        data.top = dh - o.maxHeight;
      }

      // fixing jump error on top/left - bug #2330
      if (!data.width && !data.height && !data.left && data.top) {
        data.top = null;
      } else if (!data.width && !data.height && !data.top && data.left) {
        data.left = null;
      }

      return data;
    },

    _proportionallyResize: function() {

      if (!this._proportionallyResizeElements.length) {
        return;
      }

      var i, j, borders, paddings, prel,
        element = this.helper || this.element;

      for ( i=0; i < this._proportionallyResizeElements.length; i++) {

        prel = this._proportionallyResizeElements[i];

        if (!this.borderDif) {
          this.borderDif = [];
          borders = [prel.css("borderTopWidth"), prel.css("borderRightWidth"), prel.css("borderBottomWidth"), prel.css("borderLeftWidth")];
          paddings = [prel.css("paddingTop"), prel.css("paddingRight"), prel.css("paddingBottom"), prel.css("paddingLeft")];

          for ( j = 0; j < borders.length; j++ ) {
            this.borderDif[ j ] = ( parseInt( borders[ j ], 10 ) || 0 ) + ( parseInt( paddings[ j ], 10 ) || 0 );
          }
        }

        prel.css({
          height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
          width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
        });

      }

    },

    _renderProxy: function() {

      var el = this.element, o = this.options;
      this.elementOffset = el.offset();

      if(this._helper) {

        this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

        this.helper.addClass(this._helper).css({
          width: this.element.outerWidth() - 1,
          height: this.element.outerHeight() - 1,
          position: "absolute",
          left: this.elementOffset.left +"px",
          top: this.elementOffset.top +"px",
          zIndex: ++o.zIndex //TODO: Don't modify option
        });

        this.helper
          .appendTo("body")
          .disableSelection();

      } else {
        this.helper = this.element;
      }

    },

    _change: {
      e: function(event, dx) {
        return { width: this.originalSize.width + dx };
      },
      w: function(event, dx) {
        var cs = this.originalSize, sp = this.originalPosition;
        return { left: sp.left + dx, width: cs.width - dx };
      },
      n: function(event, dx, dy) {
        var cs = this.originalSize, sp = this.originalPosition;
        return { top: sp.top + dy, height: cs.height - dy };
      },
      s: function(event, dx, dy) {
        return { height: this.originalSize.height + dy };
      },
      se: function(event, dx, dy) {
        return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
      },
      sw: function(event, dx, dy) {
        return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
      },
      ne: function(event, dx, dy) {
        return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
      },
      nw: function(event, dx, dy) {
        return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
      }
    },

    _propagate: function(n, event) {
      $.ui.plugin.call(this, n, [event, this.ui()]);
      (n !== "resize" && this._trigger(n, event, this.ui()));
    },

    plugins: {},

    ui: function() {
      return {
        originalElement: this.originalElement,
        element: this.element,
        helper: this.helper,
        position: this.position,
        size: this.size,
        originalSize: this.originalSize,
        originalPosition: this.originalPosition
      };
    }

  });

  /*
   * Resizable Extensions
   */

  $.ui.plugin.add("resizable", "animate", {

    stop: function( event ) {
      var that = $(this).data("ui-resizable"),
        o = that.options,
        pr = that._proportionallyResizeElements,
        ista = pr.length && (/textarea/i).test(pr[0].nodeName),
        soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height,
        soffsetw = ista ? 0 : that.sizeDiff.width,
        style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
        left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null,
        top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

      that.element.animate(
        $.extend(style, top && left ? { top: top, left: left } : {}), {
          duration: o.animateDuration,
          easing: o.animateEasing,
          step: function() {

            var data = {
              width: parseInt(that.element.css("width"), 10),
              height: parseInt(that.element.css("height"), 10),
              top: parseInt(that.element.css("top"), 10),
              left: parseInt(that.element.css("left"), 10)
            };

            if (pr && pr.length) {
              $(pr[0]).css({ width: data.width, height: data.height });
            }

            // propagating resize, and updating values for each animation step
            that._updateCache(data);
            that._propagate("resize", event);

          }
        }
      );
    }

  });

  $.ui.plugin.add("resizable", "containment", {

    start: function() {
      var element, p, co, ch, cw, width, height,
        that = $(this).data("ui-resizable"),
        o = that.options,
        el = that.element,
        oc = o.containment,
        ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;

      if (!ce) {
        return;
      }

      that.containerElement = $(ce);

      if (/document/.test(oc) || oc === document) {
        that.containerOffset = { left: 0, top: 0 };
        that.containerPosition = { left: 0, top: 0 };

        that.parentData = {
          element: $(document), left: 0, top: 0,
          width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
        };
      }

      // i'm a node, so compute top, left, right, bottom
      else {
        element = $(ce);
        p = [];
        $([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

        that.containerOffset = element.offset();
        that.containerPosition = element.position();
        that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

        co = that.containerOffset;
        ch = that.containerSize.height;
        cw = that.containerSize.width;
        width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw );
        height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);

        that.parentData = {
          element: ce, left: co.left, top: co.top, width: width, height: height
        };
      }
    },

    resize: function( event ) {
      var woset, hoset, isParent, isOffsetRelative,
        that = $(this).data("ui-resizable"),
        o = that.options,
        co = that.containerOffset, cp = that.position,
        pRatio = that._aspectRatio || event.shiftKey,
        cop = { top:0, left:0 }, ce = that.containerElement;

      if (ce[0] !== document && (/static/).test(ce.css("position"))) {
        cop = co;
      }

      if (cp.left < (that._helper ? co.left : 0)) {
        that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));
        if (pRatio) {
          that.size.height = that.size.width / that.aspectRatio;
        }
        that.position.left = o.helper ? co.left : 0;
      }

      if (cp.top < (that._helper ? co.top : 0)) {
        that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);
        if (pRatio) {
          that.size.width = that.size.height * that.aspectRatio;
        }
        that.position.top = that._helper ? co.top : 0;
      }

      that.offset.left = that.parentData.left+that.position.left;
      that.offset.top = that.parentData.top+that.position.top;

      woset = Math.abs( (that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width );
      hoset = Math.abs( (that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height );

      isParent = that.containerElement.get(0) === that.element.parent().get(0);
      isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));

      if(isParent && isOffsetRelative) {
        woset -= that.parentData.left;
      }

      if (woset + that.size.width >= that.parentData.width) {
        that.size.width = that.parentData.width - woset;
        if (pRatio) {
          that.size.height = that.size.width / that.aspectRatio;
        }
      }

      if (hoset + that.size.height >= that.parentData.height) {
        that.size.height = that.parentData.height - hoset;
        if (pRatio) {
          that.size.width = that.size.height * that.aspectRatio;
        }
      }
    },

    stop: function(){
      var that = $(this).data("ui-resizable"),
        o = that.options,
        co = that.containerOffset,
        cop = that.containerPosition,
        ce = that.containerElement,
        helper = $(that.helper),
        ho = helper.offset(),
        w = helper.outerWidth() - that.sizeDiff.width,
        h = helper.outerHeight() - that.sizeDiff.height;

      if (that._helper && !o.animate && (/relative/).test(ce.css("position"))) {
        $(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
      }

      if (that._helper && !o.animate && (/static/).test(ce.css("position"))) {
        $(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
      }

    }
  });

  $.ui.plugin.add("resizable", "alsoResize", {

    start: function () {
      var that = $(this).data("ui-resizable"),
        o = that.options,
        _store = function (exp) {
          $(exp).each(function() {
            var el = $(this);
            el.data("ui-resizable-alsoresize", {
              width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
              left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
            });
          });
        };

      if (typeof(o.alsoResize) === "object" && !o.alsoResize.parentNode) {
        if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
        else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
      }else{
        _store(o.alsoResize);
      }
    },

    resize: function (event, ui) {
      var that = $(this).data("ui-resizable"),
        o = that.options,
        os = that.originalSize,
        op = that.originalPosition,
        delta = {
          height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,
          top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0
        },

        _alsoResize = function (exp, c) {
          $(exp).each(function() {
            var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {},
              css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];

            $.each(css, function (i, prop) {
              var sum = (start[prop]||0) + (delta[prop]||0);
              if (sum && sum >= 0) {
                style[prop] = sum || null;
              }
            });

            el.css(style);
          });
        };

      if (typeof(o.alsoResize) === "object" && !o.alsoResize.nodeType) {
        $.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
      }else{
        _alsoResize(o.alsoResize);
      }
    },

    stop: function () {
      $(this).removeData("resizable-alsoresize");
    }
  });

  $.ui.plugin.add("resizable", "ghost", {

    start: function() {

      var that = $(this).data("ui-resizable"), o = that.options, cs = that.size;

      that.ghost = that.originalElement.clone();
      that.ghost
        .css({ opacity: 0.25, display: "block", position: "relative", height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
        .addClass("ui-resizable-ghost")
        .addClass(typeof o.ghost === "string" ? o.ghost : "");

      that.ghost.appendTo(that.helper);

    },

    resize: function(){
      var that = $(this).data("ui-resizable");
      if (that.ghost) {
        that.ghost.css({ position: "relative", height: that.size.height, width: that.size.width });
      }
    },

    stop: function() {
      var that = $(this).data("ui-resizable");
      if (that.ghost && that.helper) {
        that.helper.get(0).removeChild(that.ghost.get(0));
      }
    }

  });

  $.ui.plugin.add("resizable", "grid", {

    resize: function() {
      var that = $(this).data("ui-resizable"),
        o = that.options,
        cs = that.size,
        os = that.originalSize,
        op = that.originalPosition,
        a = that.axis,
        grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
        gridX = (grid[0]||1),
        gridY = (grid[1]||1),
        ox = Math.round((cs.width - os.width) / gridX) * gridX,
        oy = Math.round((cs.height - os.height) / gridY) * gridY,
        newWidth = os.width + ox,
        newHeight = os.height + oy,
        isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
        isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
        isMinWidth = o.minWidth && (o.minWidth > newWidth),
        isMinHeight = o.minHeight && (o.minHeight > newHeight);

      o.grid = grid;

      if (isMinWidth) {
        newWidth = newWidth + gridX;
      }
      if (isMinHeight) {
        newHeight = newHeight + gridY;
      }
      if (isMaxWidth) {
        newWidth = newWidth - gridX;
      }
      if (isMaxHeight) {
        newHeight = newHeight - gridY;
      }

      if (/^(se|s|e)$/.test(a)) {
        that.size.width = newWidth;
        that.size.height = newHeight;
      } else if (/^(ne)$/.test(a)) {
        that.size.width = newWidth;
        that.size.height = newHeight;
        that.position.top = op.top - oy;
      } else if (/^(sw)$/.test(a)) {
        that.size.width = newWidth;
        that.size.height = newHeight;
        that.position.left = op.left - ox;
      } else {
        that.size.width = newWidth;
        that.size.height = newHeight;
        that.position.top = op.top - oy;
        that.position.left = op.left - ox;
      }
    }

  });

  })(jQuery);

  (function( $, undefined ) {

  $.widget("ui.selectable", $.ui.mouse, {
    version: "1.10.3",
    options: {
      appendTo: "body",
      autoRefresh: true,
      distance: 0,
      filter: "*",
      tolerance: "touch",

      // callbacks
      selected: null,
      selecting: null,
      start: null,
      stop: null,
      unselected: null,
      unselecting: null
    },
    _create: function() {
      var selectees,
        that = this;

      this.element.addClass("ui-selectable");

      this.dragged = false;

      // cache selectee children based on filter
      this.refresh = function() {
        selectees = $(that.options.filter, that.element[0]);
        selectees.addClass("ui-selectee");
        selectees.each(function() {
          var $this = $(this),
            pos = $this.offset();
          $.data(this, "selectable-item", {
            element: this,
            $element: $this,
            left: pos.left,
            top: pos.top,
            right: pos.left + $this.outerWidth(),
            bottom: pos.top + $this.outerHeight(),
            startselected: false,
            selected: $this.hasClass("ui-selected"),
            selecting: $this.hasClass("ui-selecting"),
            unselecting: $this.hasClass("ui-unselecting")
          });
        });
      };
      this.refresh();

      this.selectees = selectees.addClass("ui-selectee");

      this._mouseInit();

      this.helper = $("<div class='ui-selectable-helper'></div>");
    },

    _destroy: function() {
      this.selectees
        .removeClass("ui-selectee")
        .removeData("selectable-item");
      this.element
        .removeClass("ui-selectable ui-selectable-disabled");
      this._mouseDestroy();
    },

    _mouseStart: function(event) {
      var that = this,
        options = this.options;

      this.opos = [event.pageX, event.pageY];

      if (this.options.disabled) {
        return;
      }

      this.selectees = $(options.filter, this.element[0]);

      this._trigger("start", event);

      $(options.appendTo).append(this.helper);
      // position helper (lasso)
      this.helper.css({
        "left": event.pageX,
        "top": event.pageY,
        "width": 0,
        "height": 0
      });

      if (options.autoRefresh) {
        this.refresh();
      }

      this.selectees.filter(".ui-selected").each(function() {
        var selectee = $.data(this, "selectable-item");
        selectee.startselected = true;
        if (!event.metaKey && !event.ctrlKey) {
          selectee.$element.removeClass("ui-selected");
          selectee.selected = false;
          selectee.$element.addClass("ui-unselecting");
          selectee.unselecting = true;
          // selectable UNSELECTING callback
          that._trigger("unselecting", event, {
            unselecting: selectee.element
          });
        }
      });

      $(event.target).parents().addBack().each(function() {
        var doSelect,
          selectee = $.data(this, "selectable-item");
        if (selectee) {
          doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected");
          selectee.$element
            .removeClass(doSelect ? "ui-unselecting" : "ui-selected")
            .addClass(doSelect ? "ui-selecting" : "ui-unselecting");
          selectee.unselecting = !doSelect;
          selectee.selecting = doSelect;
          selectee.selected = doSelect;
          // selectable (UN)SELECTING callback
          if (doSelect) {
            that._trigger("selecting", event, {
              selecting: selectee.element
            });
          } else {
            that._trigger("unselecting", event, {
              unselecting: selectee.element
            });
          }
          return false;
        }
      });

    },

    _mouseDrag: function(event) {

      this.dragged = true;

      if (this.options.disabled) {
        return;
      }

      var tmp,
        that = this,
        options = this.options,
        x1 = this.opos[0],
        y1 = this.opos[1],
        x2 = event.pageX,
        y2 = event.pageY;

      if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
      if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
      this.helper.css({left: x1, top: y1, width: x2-x1, height: y2-y1});

      this.selectees.each(function() {
        var selectee = $.data(this, "selectable-item"),
          hit = false;

        //prevent helper from being selected if appendTo: selectable
        if (!selectee || selectee.element === that.element[0]) {
          return;
        }

        if (options.tolerance === "touch") {
          hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
        } else if (options.tolerance === "fit") {
          hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
        }

        if (hit) {
          // SELECT
          if (selectee.selected) {
            selectee.$element.removeClass("ui-selected");
            selectee.selected = false;
          }
          if (selectee.unselecting) {
            selectee.$element.removeClass("ui-unselecting");
            selectee.unselecting = false;
          }
          if (!selectee.selecting) {
            selectee.$element.addClass("ui-selecting");
            selectee.selecting = true;
            // selectable SELECTING callback
            that._trigger("selecting", event, {
              selecting: selectee.element
            });
          }
        } else {
          // UNSELECT
          if (selectee.selecting) {
            if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
              selectee.$element.removeClass("ui-selecting");
              selectee.selecting = false;
              selectee.$element.addClass("ui-selected");
              selectee.selected = true;
            } else {
              selectee.$element.removeClass("ui-selecting");
              selectee.selecting = false;
              if (selectee.startselected) {
                selectee.$element.addClass("ui-unselecting");
                selectee.unselecting = true;
              }
              // selectable UNSELECTING callback
              that._trigger("unselecting", event, {
                unselecting: selectee.element
              });
            }
          }
          if (selectee.selected) {
            if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
              selectee.$element.removeClass("ui-selected");
              selectee.selected = false;

              selectee.$element.addClass("ui-unselecting");
              selectee.unselecting = true;
              // selectable UNSELECTING callback
              that._trigger("unselecting", event, {
                unselecting: selectee.element
              });
            }
          }
        }
      });

      return false;
    },

    _mouseStop: function(event) {
      var that = this;

      this.dragged = false;

      $(".ui-unselecting", this.element[0]).each(function() {
        var selectee = $.data(this, "selectable-item");
        selectee.$element.removeClass("ui-unselecting");
        selectee.unselecting = false;
        selectee.startselected = false;
        that._trigger("unselected", event, {
          unselected: selectee.element
        });
      });
      $(".ui-selecting", this.element[0]).each(function() {
        var selectee = $.data(this, "selectable-item");
        selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
        selectee.selecting = false;
        selectee.selected = true;
        selectee.startselected = true;
        that._trigger("selected", event, {
          selected: selectee.element
        });
      });
      this._trigger("stop", event);

      this.helper.remove();

      return false;
    }

  });

  })(jQuery);

  (function( $, undefined ) {

  /*jshint loopfunc: true */

  function isOverAxis( x, reference, size ) {
    return ( x > reference ) && ( x < ( reference + size ) );
  }

  function isFloating(item) {
    return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
  }

  $.widget("ui.sortable", $.ui.mouse, {
    version: "1.10.3",
    widgetEventPrefix: "sort",
    ready: false,
    options: {
      appendTo: "parent",
      axis: false,
      connectWith: false,
      containment: false,
      cursor: "auto",
      cursorAt: false,
      dropOnEmpty: true,
      forcePlaceholderSize: false,
      forceHelperSize: false,
      grid: false,
      handle: false,
      helper: "original",
      items: "> *",
      opacity: false,
      placeholder: false,
      revert: false,
      scroll: true,
      scrollSensitivity: 20,
      scrollSpeed: 20,
      scope: "default",
      tolerance: "intersect",
      zIndex: 1000,

      // callbacks
      activate: null,
      beforeStop: null,
      change: null,
      deactivate: null,
      out: null,
      over: null,
      receive: null,
      remove: null,
      sort: null,
      start: null,
      stop: null,
      update: null
    },
    _create: function() {

      var o = this.options;
      this.containerCache = {};
      this.element.addClass("ui-sortable");

      //Get the items
      this.refresh();

      //Let's determine if the items are being displayed horizontally
      this.floating = this.items.length ? o.axis === "x" || isFloating(this.items[0].item) : false;

      //Let's determine the parent's offset
      this.offset = this.element.offset();

      //Initialize mouse events for interaction
      this._mouseInit();

      //We're ready to go
      this.ready = true;

    },

    _destroy: function() {
      this.element
        .removeClass("ui-sortable ui-sortable-disabled");
      this._mouseDestroy();

      for ( var i = this.items.length - 1; i >= 0; i-- ) {
        this.items[i].item.removeData(this.widgetName + "-item");
      }

      return this;
    },

    _setOption: function(key, value){
      if ( key === "disabled" ) {
        this.options[ key ] = value;

        this.widget().toggleClass( "ui-sortable-disabled", !!value );
      } else {
        // Don't call widget base _setOption for disable as it adds ui-state-disabled class
        $.Widget.prototype._setOption.apply(this, arguments);
      }
    },

    _mouseCapture: function(event, overrideHandle) {
      var currentItem = null,
        validHandle = false,
        that = this;

      if (this.reverting) {
        return false;
      }

      if(this.options.disabled || this.options.type === "static") {
        return false;
      }

      //We have to refresh the items data once first
      this._refreshItems(event);

      //Find out if the clicked node (or one of its parents) is a actual item in this.items
      $(event.target).parents().each(function() {
        if($.data(this, that.widgetName + "-item") === that) {
          currentItem = $(this);
          return false;
        }
      });
      if($.data(event.target, that.widgetName + "-item") === that) {
        currentItem = $(event.target);
      }

      if(!currentItem) {
        return false;
      }
      if(this.options.handle && !overrideHandle) {
        $(this.options.handle, currentItem).find("*").addBack().each(function() {
          if(this === event.target) {
            validHandle = true;
          }
        });
        if(!validHandle) {
          return false;
        }
      }

      this.currentItem = currentItem;
      this._removeCurrentsFromItems();
      return true;

    },

    _mouseStart: function(event, overrideHandle, noActivation) {

      var i, body,
        o = this.options;

      this.currentContainer = this;

      //We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
      this.refreshPositions();

      //Create and append the visible helper
      this.helper = this._createHelper(event);

      //Cache the helper size
      this._cacheHelperProportions();

      /*
       * - Position generation -
       * This block generates everything position related - it's the core of draggables.
       */

      //Cache the margins of the original element
      this._cacheMargins();

      //Get the next scrolling parent
      this.scrollParent = this.helper.scrollParent();

      //The element's absolute position on the page minus margins
      this.offset = this.currentItem.offset();
      this.offset = {
        top: this.offset.top - this.margins.top,
        left: this.offset.left - this.margins.left
      };

      $.extend(this.offset, {
        click: { //Where the click happened, relative to the element
          left: event.pageX - this.offset.left,
          top: event.pageY - this.offset.top
        },
        parent: this._getParentOffset(),
        relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
      });

      // Only after we got the offset, we can change the helper's position to absolute
      // TODO: Still need to figure out a way to make relative sorting possible
      this.helper.css("position", "absolute");
      this.cssPosition = this.helper.css("position");

      //Generate the original position
      this.originalPosition = this._generatePosition(event);
      this.originalPageX = event.pageX;
      this.originalPageY = event.pageY;

      //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
      (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

      //Cache the former DOM position
      this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

      //If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
      if(this.helper[0] !== this.currentItem[0]) {
        this.currentItem.hide();
      }

      //Create the placeholder
      this._createPlaceholder();

      //Set a containment if given in the options
      if(o.containment) {
        this._setContainment();
      }

      if( o.cursor && o.cursor !== "auto" ) { // cursor option
        body = this.document.find( "body" );

        // support: IE
        this.storedCursor = body.css( "cursor" );
        body.css( "cursor", o.cursor );

        this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
      }

      if(o.opacity) { // opacity option
        if (this.helper.css("opacity")) {
          this._storedOpacity = this.helper.css("opacity");
        }
        this.helper.css("opacity", o.opacity);
      }

      if(o.zIndex) { // zIndex option
        if (this.helper.css("zIndex")) {
          this._storedZIndex = this.helper.css("zIndex");
        }
        this.helper.css("zIndex", o.zIndex);
      }

      //Prepare scrolling
      if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
        this.overflowOffset = this.scrollParent.offset();
      }

      //Call callbacks
      this._trigger("start", event, this._uiHash());

      //Recache the helper size
      if(!this._preserveHelperProportions) {
        this._cacheHelperProportions();
      }


      //Post "activate" events to possible containers
      if( !noActivation ) {
        for ( i = this.containers.length - 1; i >= 0; i-- ) {
          this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
        }
      }

      //Prepare possible droppables
      if($.ui.ddmanager) {
        $.ui.ddmanager.current = this;
      }

      if ($.ui.ddmanager && !o.dropBehaviour) {
        $.ui.ddmanager.prepareOffsets(this, event);
      }

      this.dragging = true;

      this.helper.addClass("ui-sortable-helper");
      this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
      return true;

    },

    _mouseDrag: function(event) {
      var i, item, itemElement, intersection,
        o = this.options,
        scrolled = false;

      //Compute the helpers position
      this.position = this._generatePosition(event);
      this.positionAbs = this._convertPositionTo("absolute");

      if (!this.lastPositionAbs) {
        this.lastPositionAbs = this.positionAbs;
      }

      //Do scrolling
      if(this.options.scroll) {
        if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {

          if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
          } else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
          }

          if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
          } else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
          }

        } else {

          if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
            scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
          } else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
          }

          if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
            scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
          } else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
          }

        }

        if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
          $.ui.ddmanager.prepareOffsets(this, event);
        }
      }

      //Regenerate the absolute position used for position checks
      this.positionAbs = this._convertPositionTo("absolute");

      //Set the helper position
      if(!this.options.axis || this.options.axis !== "y") {
        this.helper[0].style.left = this.position.left+"px";
      }
      if(!this.options.axis || this.options.axis !== "x") {
        this.helper[0].style.top = this.position.top+"px";
      }

      //Rearrange
      for (i = this.items.length - 1; i >= 0; i--) {

        //Cache variables and intersection, continue if no intersection
        item = this.items[i];
        itemElement = item.item[0];
        intersection = this._intersectsWithPointer(item);
        if (!intersection) {
          continue;
        }

        // Only put the placeholder inside the current Container, skip all
        // items form other containers. This works because when moving
        // an item from one container to another the
        // currentContainer is switched before the placeholder is moved.
        //
        // Without this moving items in "sub-sortables" can cause the placeholder to jitter
        // beetween the outer and inner container.
        if (item.instance !== this.currentContainer) {
          continue;
        }

        // cannot intersect with itself
        // no useless actions that have been done before
        // no action if the item moved is the parent of the item checked
        if (itemElement !== this.currentItem[0] &&
          this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
          !$.contains(this.placeholder[0], itemElement) &&
          (this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
        ) {

          this.direction = intersection === 1 ? "down" : "up";

          if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
            this._rearrange(event, item);
          } else {
            break;
          }

          this._trigger("change", event, this._uiHash());
          break;
        }
      }

      //Post events to containers
      this._contactContainers(event);

      //Interconnect with droppables
      if($.ui.ddmanager) {
        $.ui.ddmanager.drag(this, event);
      }

      //Call callbacks
      this._trigger("sort", event, this._uiHash());

      this.lastPositionAbs = this.positionAbs;
      return false;

    },

    _mouseStop: function(event, noPropagation) {

      if(!event) {
        return;
      }

      //If we are using droppables, inform the manager about the drop
      if ($.ui.ddmanager && !this.options.dropBehaviour) {
        $.ui.ddmanager.drop(this, event);
      }

      if(this.options.revert) {
        var that = this,
          cur = this.placeholder.offset(),
          axis = this.options.axis,
          animation = {};

        if ( !axis || axis === "x" ) {
          animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
        }
        if ( !axis || axis === "y" ) {
          animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
        }
        this.reverting = true;
        $(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
          that._clear(event);
        });
      } else {
        this._clear(event, noPropagation);
      }

      return false;

    },

    cancel: function() {

      if(this.dragging) {

        this._mouseUp({ target: null });

        if(this.options.helper === "original") {
          this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
        } else {
          this.currentItem.show();
        }

        //Post deactivating events to containers
        for (var i = this.containers.length - 1; i >= 0; i--){
          this.containers[i]._trigger("deactivate", null, this._uiHash(this));
          if(this.containers[i].containerCache.over) {
            this.containers[i]._trigger("out", null, this._uiHash(this));
            this.containers[i].containerCache.over = 0;
          }
        }

      }

      if (this.placeholder) {
        //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
        if(this.placeholder[0].parentNode) {
          this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
        }
        if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
          this.helper.remove();
        }

        $.extend(this, {
          helper: null,
          dragging: false,
          reverting: false,
          _noFinalSort: null
        });

        if(this.domPosition.prev) {
          $(this.domPosition.prev).after(this.currentItem);
        } else {
          $(this.domPosition.parent).prepend(this.currentItem);
        }
      }

      return this;

    },

    serialize: function(o) {

      var items = this._getItemsAsjQuery(o && o.connected),
        str = [];
      o = o || {};

      $(items).each(function() {
        var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
        if (res) {
          str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
        }
      });

      if(!str.length && o.key) {
        str.push(o.key + "=");
      }

      return str.join("&");

    },

    toArray: function(o) {

      var items = this._getItemsAsjQuery(o && o.connected),
        ret = [];

      o = o || {};

      items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
      return ret;

    },

    /* Be careful with the following core functions */
    _intersectsWith: function(item) {

      var x1 = this.positionAbs.left,
        x2 = x1 + this.helperProportions.width,
        y1 = this.positionAbs.top,
        y2 = y1 + this.helperProportions.height,
        l = item.left,
        r = l + item.width,
        t = item.top,
        b = t + item.height,
        dyClick = this.offset.click.top,
        dxClick = this.offset.click.left,
        isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
        isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
        isOverElement = isOverElementHeight && isOverElementWidth;

      if ( this.options.tolerance === "pointer" ||
        this.options.forcePointerForContainers ||
        (this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
      ) {
        return isOverElement;
      } else {

        return (l < x1 + (this.helperProportions.width / 2) && // Right Half
          x2 - (this.helperProportions.width / 2) < r && // Left Half
          t < y1 + (this.helperProportions.height / 2) && // Bottom Half
          y2 - (this.helperProportions.height / 2) < b ); // Top Half

      }
    },

    _intersectsWithPointer: function(item) {

      var isOverElementHeight = (this.options.axis === "x") || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
        isOverElementWidth = (this.options.axis === "y") || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
        isOverElement = isOverElementHeight && isOverElementWidth,
        verticalDirection = this._getDragVerticalDirection(),
        horizontalDirection = this._getDragHorizontalDirection();

      if (!isOverElement) {
        return false;
      }

      return this.floating ?
        ( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
        : ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );

    },

    _intersectsWithSides: function(item) {

      var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
        isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
        verticalDirection = this._getDragVerticalDirection(),
        horizontalDirection = this._getDragHorizontalDirection();

      if (this.floating && horizontalDirection) {
        return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
      } else {
        return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
      }

    },

    _getDragVerticalDirection: function() {
      var delta = this.positionAbs.top - this.lastPositionAbs.top;
      return delta !== 0 && (delta > 0 ? "down" : "up");
    },

    _getDragHorizontalDirection: function() {
      var delta = this.positionAbs.left - this.lastPositionAbs.left;
      return delta !== 0 && (delta > 0 ? "right" : "left");
    },

    refresh: function(event) {
      this._refreshItems(event);
      this.refreshPositions();
      return this;
    },

    _connectWith: function() {
      var options = this.options;
      return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
    },

    _getItemsAsjQuery: function(connected) {

      var i, j, cur, inst,
        items = [],
        queries = [],
        connectWith = this._connectWith();

      if(connectWith && connected) {
        for (i = connectWith.length - 1; i >= 0; i--){
          cur = $(connectWith[i]);
          for ( j = cur.length - 1; j >= 0; j--){
            inst = $.data(cur[j], this.widgetFullName);
            if(inst && inst !== this && !inst.options.disabled) {
              queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
            }
          }
        }
      }

      queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);

      for (i = queries.length - 1; i >= 0; i--){
        queries[i][0].each(function() {
          items.push(this);
        });
      }

      return $(items);

    },

    _removeCurrentsFromItems: function() {

      var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

      this.items = $.grep(this.items, function (item) {
        for (var j=0; j < list.length; j++) {
          if(list[j] === item.item[0]) {
            return false;
          }
        }
        return true;
      });

    },

    _refreshItems: function(event) {

      this.items = [];
      this.containers = [this];

      var i, j, cur, inst, targetData, _queries, item, queriesLength,
        items = this.items,
        queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
        connectWith = this._connectWith();

      if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
        for (i = connectWith.length - 1; i >= 0; i--){
          cur = $(connectWith[i]);
          for (j = cur.length - 1; j >= 0; j--){
            inst = $.data(cur[j], this.widgetFullName);
            if(inst && inst !== this && !inst.options.disabled) {
              queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
              this.containers.push(inst);
            }
          }
        }
      }

      for (i = queries.length - 1; i >= 0; i--) {
        targetData = queries[i][1];
        _queries = queries[i][0];

        for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
          item = $(_queries[j]);

          item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)

          items.push({
            item: item,
            instance: targetData,
            width: 0, height: 0,
            left: 0, top: 0
          });
        }
      }

    },

    refreshPositions: function(fast) {

      //This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
      if(this.offsetParent && this.helper) {
        this.offset.parent = this._getParentOffset();
      }

      var i, item, t, p;

      for (i = this.items.length - 1; i >= 0; i--){
        item = this.items[i];

        //We ignore calculating positions of all connected containers when we're not over them
        if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
          continue;
        }

        t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

        if (!fast) {
          item.width = t.outerWidth();
          item.height = t.outerHeight();
        }

        p = t.offset();
        item.left = p.left;
        item.top = p.top;
      }

      if(this.options.custom && this.options.custom.refreshContainers) {
        this.options.custom.refreshContainers.call(this);
      } else {
        for (i = this.containers.length - 1; i >= 0; i--){
          p = this.containers[i].element.offset();
          this.containers[i].containerCache.left = p.left;
          this.containers[i].containerCache.top = p.top;
          this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
          this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
        }
      }

      return this;
    },

    _createPlaceholder: function(that) {
      that = that || this;
      var className,
        o = that.options;

      if(!o.placeholder || o.placeholder.constructor === String) {
        className = o.placeholder;
        o.placeholder = {
          element: function() {

            var nodeName = that.currentItem[0].nodeName.toLowerCase(),
              element = $( "<" + nodeName + ">", that.document[0] )
                .addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
                .removeClass("ui-sortable-helper");

            if ( nodeName === "tr" ) {
              that.currentItem.children().each(function() {
                $( "<td>&#160;</td>", that.document[0] )
                  .attr( "colspan", $( this ).attr( "colspan" ) || 1 )
                  .appendTo( element );
              });
            } else if ( nodeName === "img" ) {
              element.attr( "src", that.currentItem.attr( "src" ) );
            }

            if ( !className ) {
              element.css( "visibility", "hidden" );
            }

            return element;
          },
          update: function(container, p) {

            // 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
            // 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
            if(className && !o.forcePlaceholderSize) {
              return;
            }

            //If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
            if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
            if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
          }
        };
      }

      //Create the placeholder
      that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

      //Append it after the actual current item
      that.currentItem.after(that.placeholder);

      //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
      o.placeholder.update(that, that.placeholder);

    },

    _contactContainers: function(event) {
      var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, base, cur, nearBottom, floating,
        innermostContainer = null,
        innermostIndex = null;

      // get innermost container that intersects with item
      for (i = this.containers.length - 1; i >= 0; i--) {

        // never consider a container that's located within the item itself
        if($.contains(this.currentItem[0], this.containers[i].element[0])) {
          continue;
        }

        if(this._intersectsWith(this.containers[i].containerCache)) {

          // if we've already found a container and it's more "inner" than this, then continue
          if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
            continue;
          }

          innermostContainer = this.containers[i];
          innermostIndex = i;

        } else {
          // container doesn't intersect. trigger "out" event if necessary
          if(this.containers[i].containerCache.over) {
            this.containers[i]._trigger("out", event, this._uiHash(this));
            this.containers[i].containerCache.over = 0;
          }
        }

      }

      // if no intersecting containers found, return
      if(!innermostContainer) {
        return;
      }

      // move the item into the container if it's not there already
      if(this.containers.length === 1) {
        if (!this.containers[innermostIndex].containerCache.over) {
          this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
          this.containers[innermostIndex].containerCache.over = 1;
        }
      } else {

        //When entering a new container, we will find the item with the least distance and append our item near it
        dist = 10000;
        itemWithLeastDistance = null;
        floating = innermostContainer.floating || isFloating(this.currentItem);
        posProperty = floating ? "left" : "top";
        sizeProperty = floating ? "width" : "height";
        base = this.positionAbs[posProperty] + this.offset.click[posProperty];
        for (j = this.items.length - 1; j >= 0; j--) {
          if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
            continue;
          }
          if(this.items[j].item[0] === this.currentItem[0]) {
            continue;
          }
          if (floating && !isOverAxis(this.positionAbs.top + this.offset.click.top, this.items[j].top, this.items[j].height)) {
            continue;
          }
          cur = this.items[j].item.offset()[posProperty];
          nearBottom = false;
          if(Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)){
            nearBottom = true;
            cur += this.items[j][sizeProperty];
          }

          if(Math.abs(cur - base) < dist) {
            dist = Math.abs(cur - base); itemWithLeastDistance = this.items[j];
            this.direction = nearBottom ? "up": "down";
          }
        }

        //Check if dropOnEmpty is enabled
        if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
          return;
        }

        if(this.currentContainer === this.containers[innermostIndex]) {
          return;
        }

        itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
        this._trigger("change", event, this._uiHash());
        this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
        this.currentContainer = this.containers[innermostIndex];

        //Update the placeholder
        this.options.placeholder.update(this.currentContainer, this.placeholder);

        this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
        this.containers[innermostIndex].containerCache.over = 1;
      }


    },

    _createHelper: function(event) {

      var o = this.options,
        helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);

      //Add the helper to the DOM if that didn't happen already
      if(!helper.parents("body").length) {
        $(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
      }

      if(helper[0] === this.currentItem[0]) {
        this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
      }

      if(!helper[0].style.width || o.forceHelperSize) {
        helper.width(this.currentItem.width());
      }
      if(!helper[0].style.height || o.forceHelperSize) {
        helper.height(this.currentItem.height());
      }

      return helper;

    },

    _adjustOffsetFromHelper: function(obj) {
      if (typeof obj === "string") {
        obj = obj.split(" ");
      }
      if ($.isArray(obj)) {
        obj = {left: +obj[0], top: +obj[1] || 0};
      }
      if ("left" in obj) {
        this.offset.click.left = obj.left + this.margins.left;
      }
      if ("right" in obj) {
        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
      }
      if ("top" in obj) {
        this.offset.click.top = obj.top + this.margins.top;
      }
      if ("bottom" in obj) {
        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
      }
    },

    _getParentOffset: function() {


      //Get the offsetParent and cache its position
      this.offsetParent = this.helper.offsetParent();
      var po = this.offsetParent.offset();

      // This is a special case where we need to modify a offset calculated on start, since the following happened:
      // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
      // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
      //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
      if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
        po.left += this.scrollParent.scrollLeft();
        po.top += this.scrollParent.scrollTop();
      }

      // This needs to be actually done for all browsers, since pageX/pageY includes this information
      // with an ugly IE fix
      if( this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
        po = { top: 0, left: 0 };
      }

      return {
        top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
        left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
      };

    },

    _getRelativeOffset: function() {

      if(this.cssPosition === "relative") {
        var p = this.currentItem.position();
        return {
          top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
          left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
        };
      } else {
        return { top: 0, left: 0 };
      }

    },

    _cacheMargins: function() {
      this.margins = {
        left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
        top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
      };
    },

    _cacheHelperProportions: function() {
      this.helperProportions = {
        width: this.helper.outerWidth(),
        height: this.helper.outerHeight()
      };
    },

    _setContainment: function() {

      var ce, co, over,
        o = this.options;
      if(o.containment === "parent") {
        o.containment = this.helper[0].parentNode;
      }
      if(o.containment === "document" || o.containment === "window") {
        this.containment = [
          0 - this.offset.relative.left - this.offset.parent.left,
          0 - this.offset.relative.top - this.offset.parent.top,
          $(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,
          ($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
        ];
      }

      if(!(/^(document|window|parent)$/).test(o.containment)) {
        ce = $(o.containment)[0];
        co = $(o.containment).offset();
        over = ($(ce).css("overflow") !== "hidden");

        this.containment = [
          co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
          co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
          co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
          co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
        ];
      }

    },

    _convertPositionTo: function(d, pos) {

      if(!pos) {
        pos = this.position;
      }
      var mod = d === "absolute" ? 1 : -1,
        scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
        scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

      return {
        top: (
          pos.top +                               // The absolute mouse position
          this.offset.relative.top * mod +                    // Only for relative positioned nodes: Relative offset from element to offset parent
          this.offset.parent.top * mod -                      // The offsetParent's offset without borders (offset + border)
          ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
        ),
        left: (
          pos.left +                                // The absolute mouse position
          this.offset.relative.left * mod +                   // Only for relative positioned nodes: Relative offset from element to offset parent
          this.offset.parent.left * mod -                   // The offsetParent's offset without borders (offset + border)
          ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
        )
      };

    },

    _generatePosition: function(event) {

      var top, left,
        o = this.options,
        pageX = event.pageX,
        pageY = event.pageY,
        scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

      // This is another very weird special case that only happens for relative elements:
      // 1. If the css position is relative
      // 2. and the scroll parent is the document or similar to the offset parent
      // we have to refresh the relative offset during the scroll so there are no jumps
      if(this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
        this.offset.relative = this._getRelativeOffset();
      }

      /*
       * - Position constraining -
       * Constrain the position to a mix of grid, containment.
       */

      if(this.originalPosition) { //If we are not dragging yet, we won't check for options

        if(this.containment) {
          if(event.pageX - this.offset.click.left < this.containment[0]) {
            pageX = this.containment[0] + this.offset.click.left;
          }
          if(event.pageY - this.offset.click.top < this.containment[1]) {
            pageY = this.containment[1] + this.offset.click.top;
          }
          if(event.pageX - this.offset.click.left > this.containment[2]) {
            pageX = this.containment[2] + this.offset.click.left;
          }
          if(event.pageY - this.offset.click.top > this.containment[3]) {
            pageY = this.containment[3] + this.offset.click.top;
          }
        }

        if(o.grid) {
          top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
          pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

          left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
          pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
        }

      }

      return {
        top: (
          pageY -                               // The absolute mouse position
          this.offset.click.top -                         // Click offset (relative to the element)
          this.offset.relative.top  -                     // Only for relative positioned nodes: Relative offset from element to offset parent
          this.offset.parent.top +                        // The offsetParent's offset without borders (offset + border)
          ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
        ),
        left: (
          pageX -                               // The absolute mouse position
          this.offset.click.left -                        // Click offset (relative to the element)
          this.offset.relative.left -                     // Only for relative positioned nodes: Relative offset from element to offset parent
          this.offset.parent.left +                       // The offsetParent's offset without borders (offset + border)
          ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
        )
      };

    },

    _rearrange: function(event, i, a, hardRefresh) {

      a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));

      //Various things done here to improve the performance:
      // 1. we create a setTimeout, that calls refreshPositions
      // 2. on the instance, we have a counter variable, that get's higher after every append
      // 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
      // 4. this lets only the last addition to the timeout stack through
      this.counter = this.counter ? ++this.counter : 1;
      var counter = this.counter;

      this._delay(function() {
        if(counter === this.counter) {
          this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
        }
      });

    },

    _clear: function(event, noPropagation) {

      this.reverting = false;
      // We delay all events that have to be triggered to after the point where the placeholder has been removed and
      // everything else normalized again
      var i,
        delayedTriggers = [];

      // We first have to update the dom position of the actual currentItem
      // Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
      if(!this._noFinalSort && this.currentItem.parent().length) {
        this.placeholder.before(this.currentItem);
      }
      this._noFinalSort = null;

      if(this.helper[0] === this.currentItem[0]) {
        for(i in this._storedCSS) {
          if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
            this._storedCSS[i] = "";
          }
        }
        this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
      } else {
        this.currentItem.show();
      }

      if(this.fromOutside && !noPropagation) {
        delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
      }
      if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
        delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
      }

      // Check if the items Container has Changed and trigger appropriate
      // events.
      if (this !== this.currentContainer) {
        if(!noPropagation) {
          delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
          delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
          delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
        }
      }


      //Post events to containers
      for (i = this.containers.length - 1; i >= 0; i--){
        if(!noPropagation) {
          delayedTriggers.push((function(c) { return function(event) { c._trigger("deactivate", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
        }
        if(this.containers[i].containerCache.over) {
          delayedTriggers.push((function(c) { return function(event) { c._trigger("out", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
          this.containers[i].containerCache.over = 0;
        }
      }

      //Do what was originally in plugins
      if ( this.storedCursor ) {
        this.document.find( "body" ).css( "cursor", this.storedCursor );
        this.storedStylesheet.remove();
      }
      if(this._storedOpacity) {
        this.helper.css("opacity", this._storedOpacity);
      }
      if(this._storedZIndex) {
        this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
      }

      this.dragging = false;
      if(this.cancelHelperRemoval) {
        if(!noPropagation) {
          this._trigger("beforeStop", event, this._uiHash());
          for (i=0; i < delayedTriggers.length; i++) {
            delayedTriggers[i].call(this, event);
          } //Trigger all delayed events
          this._trigger("stop", event, this._uiHash());
        }

        this.fromOutside = false;
        return false;
      }

      if(!noPropagation) {
        this._trigger("beforeStop", event, this._uiHash());
      }

      //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
      this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

      if(this.helper[0] !== this.currentItem[0]) {
        this.helper.remove();
      }
      this.helper = null;

      if(!noPropagation) {
        for (i=0; i < delayedTriggers.length; i++) {
          delayedTriggers[i].call(this, event);
        } //Trigger all delayed events
        this._trigger("stop", event, this._uiHash());
      }

      this.fromOutside = false;
      return true;

    },

    _trigger: function() {
      if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
        this.cancel();
      }
    },

    _uiHash: function(_inst) {
      var inst = _inst || this;
      return {
        helper: inst.helper,
        placeholder: inst.placeholder || $([]),
        position: inst.position,
        originalPosition: inst.originalPosition,
        offset: inst.positionAbs,
        item: inst.currentItem,
        sender: _inst ? _inst.element : null
      };
    }

  });

  })(jQuery);

  (function($, undefined) {

  var dataSpace = "ui-effects-";

  $.effects = {
    effect: {}
  };

  /*!
   * jQuery Color Animations v2.1.2
   * https://github.com/jquery/jquery-color
   *
   * Copyright 2013 jQuery Foundation and other contributors
   * Released under the MIT license.
   * http://jquery.org/license
   *
   * Date: Wed Jan 16 08:47:09 2013 -0600
   */
  (function( jQuery, undefined ) {

    var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

    // plusequals test for += 100 -= 100
    rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
    // a set of RE's that can match strings and generate color tuples.
    stringParsers = [{
        re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
        parse: function( execResult ) {
          return [
            execResult[ 1 ],
            execResult[ 2 ],
            execResult[ 3 ],
            execResult[ 4 ]
          ];
        }
      }, {
        re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
        parse: function( execResult ) {
          return [
            execResult[ 1 ] * 2.55,
            execResult[ 2 ] * 2.55,
            execResult[ 3 ] * 2.55,
            execResult[ 4 ]
          ];
        }
      }, {
        // this regex ignores A-F because it's compared against an already lowercased string
        re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
        parse: function( execResult ) {
          return [
            parseInt( execResult[ 1 ], 16 ),
            parseInt( execResult[ 2 ], 16 ),
            parseInt( execResult[ 3 ], 16 )
          ];
        }
      }, {
        // this regex ignores A-F because it's compared against an already lowercased string
        re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
        parse: function( execResult ) {
          return [
            parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
            parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
            parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
          ];
        }
      }, {
        re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
        space: "hsla",
        parse: function( execResult ) {
          return [
            execResult[ 1 ],
            execResult[ 2 ] / 100,
            execResult[ 3 ] / 100,
            execResult[ 4 ]
          ];
        }
      }],

    // jQuery.Color( )
    color = jQuery.Color = function( color, green, blue, alpha ) {
      return new jQuery.Color.fn.parse( color, green, blue, alpha );
    },
    spaces = {
      rgba: {
        props: {
          red: {
            idx: 0,
            type: "byte"
          },
          green: {
            idx: 1,
            type: "byte"
          },
          blue: {
            idx: 2,
            type: "byte"
          }
        }
      },

      hsla: {
        props: {
          hue: {
            idx: 0,
            type: "degrees"
          },
          saturation: {
            idx: 1,
            type: "percent"
          },
          lightness: {
            idx: 2,
            type: "percent"
          }
        }
      }
    },
    propTypes = {
      "byte": {
        floor: true,
        max: 255
      },
      "percent": {
        max: 1
      },
      "degrees": {
        mod: 360,
        floor: true
      }
    },
    support = color.support = {},

    // element for support tests
    supportElem = jQuery( "<p>" )[ 0 ],

    // colors = jQuery.Color.names
    colors,

    // local aliases of functions called often
    each = jQuery.each;

  // determine rgba support immediately
  supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
  support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

  // define cache name and alpha properties
  // for rgba and hsla spaces
  each( spaces, function( spaceName, space ) {
    space.cache = "_" + spaceName;
    space.props.alpha = {
      idx: 3,
      type: "percent",
      def: 1
    };
  });

  function clamp( value, prop, allowEmpty ) {
    var type = propTypes[ prop.type ] || {};

    if ( value == null ) {
      return (allowEmpty || !prop.def) ? null : prop.def;
    }

    // ~~ is an short way of doing floor for positive numbers
    value = type.floor ? ~~value : parseFloat( value );

    // IE will pass in empty strings as value for alpha,
    // which will hit this case
    if ( isNaN( value ) ) {
      return prop.def;
    }

    if ( type.mod ) {
      // we add mod before modding to make sure that negatives values
      // get converted properly: -10 -> 350
      return (value + type.mod) % type.mod;
    }

    // for now all property types without mod have min and max
    return 0 > value ? 0 : type.max < value ? type.max : value;
  }

  function stringParse( string ) {
    var inst = color(),
      rgba = inst._rgba = [];

    string = string.toLowerCase();

    each( stringParsers, function( i, parser ) {
      var parsed,
        match = parser.re.exec( string ),
        values = match && parser.parse( match ),
        spaceName = parser.space || "rgba";

      if ( values ) {
        parsed = inst[ spaceName ]( values );

        // if this was an rgba parse the assignment might happen twice
        // oh well....
        inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
        rgba = inst._rgba = parsed._rgba;

        // exit each( stringParsers ) here because we matched
        return false;
      }
    });

    // Found a stringParser that handled it
    if ( rgba.length ) {

      // if this came from a parsed string, force "transparent" when alpha is 0
      // chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
      if ( rgba.join() === "0,0,0,0" ) {
        jQuery.extend( rgba, colors.transparent );
      }
      return inst;
    }

    // named colors
    return colors[ string ];
  }

  color.fn = jQuery.extend( color.prototype, {
    parse: function( red, green, blue, alpha ) {
      if ( red === undefined ) {
        this._rgba = [ null, null, null, null ];
        return this;
      }
      if ( red.jquery || red.nodeType ) {
        red = jQuery( red ).css( green );
        green = undefined;
      }

      var inst = this,
        type = jQuery.type( red ),
        rgba = this._rgba = [];

      // more than 1 argument specified - assume ( red, green, blue, alpha )
      if ( green !== undefined ) {
        red = [ red, green, blue, alpha ];
        type = "array";
      }

      if ( type === "string" ) {
        return this.parse( stringParse( red ) || colors._default );
      }

      if ( type === "array" ) {
        each( spaces.rgba.props, function( key, prop ) {
          rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
        });
        return this;
      }

      if ( type === "object" ) {
        if ( red instanceof color ) {
          each( spaces, function( spaceName, space ) {
            if ( red[ space.cache ] ) {
              inst[ space.cache ] = red[ space.cache ].slice();
            }
          });
        } else {
          each( spaces, function( spaceName, space ) {
            var cache = space.cache;
            each( space.props, function( key, prop ) {

              // if the cache doesn't exist, and we know how to convert
              if ( !inst[ cache ] && space.to ) {

                // if the value was null, we don't need to copy it
                // if the key was alpha, we don't need to copy it either
                if ( key === "alpha" || red[ key ] == null ) {
                  return;
                }
                inst[ cache ] = space.to( inst._rgba );
              }

              // this is the only case where we allow nulls for ALL properties.
              // call clamp with alwaysAllowEmpty
              inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
            });

            // everything defined but alpha?
            if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
              // use the default of 1
              inst[ cache ][ 3 ] = 1;
              if ( space.from ) {
                inst._rgba = space.from( inst[ cache ] );
              }
            }
          });
        }
        return this;
      }
    },
    is: function( compare ) {
      var is = color( compare ),
        same = true,
        inst = this;

      each( spaces, function( _, space ) {
        var localCache,
          isCache = is[ space.cache ];
        if (isCache) {
          localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
          each( space.props, function( _, prop ) {
            if ( isCache[ prop.idx ] != null ) {
              same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
              return same;
            }
          });
        }
        return same;
      });
      return same;
    },
    _space: function() {
      var used = [],
        inst = this;
      each( spaces, function( spaceName, space ) {
        if ( inst[ space.cache ] ) {
          used.push( spaceName );
        }
      });
      return used.pop();
    },
    transition: function( other, distance ) {
      var end = color( other ),
        spaceName = end._space(),
        space = spaces[ spaceName ],
        startColor = this.alpha() === 0 ? color( "transparent" ) : this,
        start = startColor[ space.cache ] || space.to( startColor._rgba ),
        result = start.slice();

      end = end[ space.cache ];
      each( space.props, function( key, prop ) {
        var index = prop.idx,
          startValue = start[ index ],
          endValue = end[ index ],
          type = propTypes[ prop.type ] || {};

        // if null, don't override start value
        if ( endValue === null ) {
          return;
        }
        // if null - use end
        if ( startValue === null ) {
          result[ index ] = endValue;
        } else {
          if ( type.mod ) {
            if ( endValue - startValue > type.mod / 2 ) {
              startValue += type.mod;
            } else if ( startValue - endValue > type.mod / 2 ) {
              startValue -= type.mod;
            }
          }
          result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
        }
      });
      return this[ spaceName ]( result );
    },
    blend: function( opaque ) {
      // if we are already opaque - return ourself
      if ( this._rgba[ 3 ] === 1 ) {
        return this;
      }

      var rgb = this._rgba.slice(),
        a = rgb.pop(),
        blend = color( opaque )._rgba;

      return color( jQuery.map( rgb, function( v, i ) {
        return ( 1 - a ) * blend[ i ] + a * v;
      }));
    },
    toRgbaString: function() {
      var prefix = "rgba(",
        rgba = jQuery.map( this._rgba, function( v, i ) {
          return v == null ? ( i > 2 ? 1 : 0 ) : v;
        });

      if ( rgba[ 3 ] === 1 ) {
        rgba.pop();
        prefix = "rgb(";
      }

      return prefix + rgba.join() + ")";
    },
    toHslaString: function() {
      var prefix = "hsla(",
        hsla = jQuery.map( this.hsla(), function( v, i ) {
          if ( v == null ) {
            v = i > 2 ? 1 : 0;
          }

          // catch 1 and 2
          if ( i && i < 3 ) {
            v = Math.round( v * 100 ) + "%";
          }
          return v;
        });

      if ( hsla[ 3 ] === 1 ) {
        hsla.pop();
        prefix = "hsl(";
      }
      return prefix + hsla.join() + ")";
    },
    toHexString: function( includeAlpha ) {
      var rgba = this._rgba.slice(),
        alpha = rgba.pop();

      if ( includeAlpha ) {
        rgba.push( ~~( alpha * 255 ) );
      }

      return "#" + jQuery.map( rgba, function( v ) {

        // default to 0 when nulls exist
        v = ( v || 0 ).toString( 16 );
        return v.length === 1 ? "0" + v : v;
      }).join("");
    },
    toString: function() {
      return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
    }
  });
  color.fn.parse.prototype = color.fn;

  // hsla conversions adapted from:
  // https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

  function hue2rgb( p, q, h ) {
    h = ( h + 1 ) % 1;
    if ( h * 6 < 1 ) {
      return p + (q - p) * h * 6;
    }
    if ( h * 2 < 1) {
      return q;
    }
    if ( h * 3 < 2 ) {
      return p + (q - p) * ((2/3) - h) * 6;
    }
    return p;
  }

  spaces.hsla.to = function ( rgba ) {
    if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
      return [ null, null, null, rgba[ 3 ] ];
    }
    var r = rgba[ 0 ] / 255,
      g = rgba[ 1 ] / 255,
      b = rgba[ 2 ] / 255,
      a = rgba[ 3 ],
      max = Math.max( r, g, b ),
      min = Math.min( r, g, b ),
      diff = max - min,
      add = max + min,
      l = add * 0.5,
      h, s;

    if ( min === max ) {
      h = 0;
    } else if ( r === max ) {
      h = ( 60 * ( g - b ) / diff ) + 360;
    } else if ( g === max ) {
      h = ( 60 * ( b - r ) / diff ) + 120;
    } else {
      h = ( 60 * ( r - g ) / diff ) + 240;
    }

    // chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
    // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
    if ( diff === 0 ) {
      s = 0;
    } else if ( l <= 0.5 ) {
      s = diff / add;
    } else {
      s = diff / ( 2 - add );
    }
    return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
  };

  spaces.hsla.from = function ( hsla ) {
    if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
      return [ null, null, null, hsla[ 3 ] ];
    }
    var h = hsla[ 0 ] / 360,
      s = hsla[ 1 ],
      l = hsla[ 2 ],
      a = hsla[ 3 ],
      q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
      p = 2 * l - q;

    return [
      Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
      Math.round( hue2rgb( p, q, h ) * 255 ),
      Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
      a
    ];
  };


  each( spaces, function( spaceName, space ) {
    var props = space.props,
      cache = space.cache,
      to = space.to,
      from = space.from;

    // makes rgba() and hsla()
    color.fn[ spaceName ] = function( value ) {

      // generate a cache for this space if it doesn't exist
      if ( to && !this[ cache ] ) {
        this[ cache ] = to( this._rgba );
      }
      if ( value === undefined ) {
        return this[ cache ].slice();
      }

      var ret,
        type = jQuery.type( value ),
        arr = ( type === "array" || type === "object" ) ? value : arguments,
        local = this[ cache ].slice();

      each( props, function( key, prop ) {
        var val = arr[ type === "object" ? key : prop.idx ];
        if ( val == null ) {
          val = local[ prop.idx ];
        }
        local[ prop.idx ] = clamp( val, prop );
      });

      if ( from ) {
        ret = color( from( local ) );
        ret[ cache ] = local;
        return ret;
      } else {
        return color( local );
      }
    };

    // makes red() green() blue() alpha() hue() saturation() lightness()
    each( props, function( key, prop ) {
      // alpha is included in more than one space
      if ( color.fn[ key ] ) {
        return;
      }
      color.fn[ key ] = function( value ) {
        var vtype = jQuery.type( value ),
          fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
          local = this[ fn ](),
          cur = local[ prop.idx ],
          match;

        if ( vtype === "undefined" ) {
          return cur;
        }

        if ( vtype === "function" ) {
          value = value.call( this, cur );
          vtype = jQuery.type( value );
        }
        if ( value == null && prop.empty ) {
          return this;
        }
        if ( vtype === "string" ) {
          match = rplusequals.exec( value );
          if ( match ) {
            value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
          }
        }
        local[ prop.idx ] = value;
        return this[ fn ]( local );
      };
    });
  });

  // add cssHook and .fx.step function for each named hook.
  // accept a space separated string of properties
  color.hook = function( hook ) {
    var hooks = hook.split( " " );
    each( hooks, function( i, hook ) {
      jQuery.cssHooks[ hook ] = {
        set: function( elem, value ) {
          var parsed, curElem,
            backgroundColor = "";

          if ( value !== "transparent" && ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {
            value = color( parsed || value );
            if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
              curElem = hook === "backgroundColor" ? elem.parentNode : elem;
              while (
                (backgroundColor === "" || backgroundColor === "transparent") &&
                curElem && curElem.style
              ) {
                try {
                  backgroundColor = jQuery.css( curElem, "backgroundColor" );
                  curElem = curElem.parentNode;
                } catch ( e ) {
                }
              }

              value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
                backgroundColor :
                "_default" );
            }

            value = value.toRgbaString();
          }
          try {
            elem.style[ hook ] = value;
          } catch( e ) {
            // wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
          }
        }
      };
      jQuery.fx.step[ hook ] = function( fx ) {
        if ( !fx.colorInit ) {
          fx.start = color( fx.elem, hook );
          fx.end = color( fx.end );
          fx.colorInit = true;
        }
        jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
      };
    });

  };

  color.hook( stepHooks );

  jQuery.cssHooks.borderColor = {
    expand: function( value ) {
      var expanded = {};

      each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
        expanded[ "border" + part + "Color" ] = value;
      });
      return expanded;
    }
  };

  // Basic color names only.
  // Usage of any of the other color names requires adding yourself or including
  // jquery.color.svg-names.js.
  colors = jQuery.Color.names = {
    // 4.1. Basic color keywords
    aqua: "#00ffff",
    black: "#000000",
    blue: "#0000ff",
    fuchsia: "#ff00ff",
    gray: "#808080",
    green: "#008000",
    lime: "#00ff00",
    maroon: "#800000",
    navy: "#000080",
    olive: "#808000",
    purple: "#800080",
    red: "#ff0000",
    silver: "#c0c0c0",
    teal: "#008080",
    white: "#ffffff",
    yellow: "#ffff00",

    // 4.2.3. "transparent" color keyword
    transparent: [ null, null, null, 0 ],

    _default: "#ffffff"
  };

  })( jQuery );


  /******************************************************************************/
  /****************************** CLASS ANIMATIONS ******************************/
  /******************************************************************************/
  (function() {

  var classAnimationActions = [ "add", "remove", "toggle" ],
    shorthandStyles = {
      border: 1,
      borderBottom: 1,
      borderColor: 1,
      borderLeft: 1,
      borderRight: 1,
      borderTop: 1,
      borderWidth: 1,
      margin: 1,
      padding: 1
    };

  $.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {
    $.fx.step[ prop ] = function( fx ) {
      if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
        jQuery.style( fx.elem, prop, fx.end );
        fx.setAttr = true;
      }
    };
  });

  function getElementStyles( elem ) {
    var key, len,
      style = elem.ownerDocument.defaultView ?
        elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
        elem.currentStyle,
      styles = {};

    if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
      len = style.length;
      while ( len-- ) {
        key = style[ len ];
        if ( typeof style[ key ] === "string" ) {
          styles[ $.camelCase( key ) ] = style[ key ];
        }
      }
    // support: Opera, IE <9
    } else {
      for ( key in style ) {
        if ( typeof style[ key ] === "string" ) {
          styles[ key ] = style[ key ];
        }
      }
    }

    return styles;
  }


  function styleDifference( oldStyle, newStyle ) {
    var diff = {},
      name, value;

    for ( name in newStyle ) {
      value = newStyle[ name ];
      if ( oldStyle[ name ] !== value ) {
        if ( !shorthandStyles[ name ] ) {
          if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
            diff[ name ] = value;
          }
        }
      }
    }

    return diff;
  }

  // support: jQuery <1.8
  if ( !$.fn.addBack ) {
    $.fn.addBack = function( selector ) {
      return this.add( selector == null ?
        this.prevObject : this.prevObject.filter( selector )
      );
    };
  }

  $.effects.animateClass = function( value, duration, easing, callback ) {
    var o = $.speed( duration, easing, callback );

    return this.queue( function() {
      var animated = $( this ),
        baseClass = animated.attr( "class" ) || "",
        applyClassChange,
        allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

      // map the animated objects to store the original styles.
      allAnimations = allAnimations.map(function() {
        var el = $( this );
        return {
          el: el,
          start: getElementStyles( this )
        };
      });

      // apply class change
      applyClassChange = function() {
        $.each( classAnimationActions, function(i, action) {
          if ( value[ action ] ) {
            animated[ action + "Class" ]( value[ action ] );
          }
        });
      };
      applyClassChange();

      // map all animated objects again - calculate new styles and diff
      allAnimations = allAnimations.map(function() {
        this.end = getElementStyles( this.el[ 0 ] );
        this.diff = styleDifference( this.start, this.end );
        return this;
      });

      // apply original class
      animated.attr( "class", baseClass );

      // map all animated objects again - this time collecting a promise
      allAnimations = allAnimations.map(function() {
        var styleInfo = this,
          dfd = $.Deferred(),
          opts = $.extend({}, o, {
            queue: false,
            complete: function() {
              dfd.resolve( styleInfo );
            }
          });

        this.el.animate( this.diff, opts );
        return dfd.promise();
      });

      // once all animations have completed:
      $.when.apply( $, allAnimations.get() ).done(function() {

        // set the final class
        applyClassChange();

        // for each animated element,
        // clear all css properties that were animated
        $.each( arguments, function() {
          var el = this.el;
          $.each( this.diff, function(key) {
            el.css( key, "" );
          });
        });

        // this is guarnteed to be there if you use jQuery.speed()
        // it also handles dequeuing the next anim...
        o.complete.call( animated[ 0 ] );
      });
    });
  };

  $.fn.extend({
    addClass: (function( orig ) {
      return function( classNames, speed, easing, callback ) {
        return speed ?
          $.effects.animateClass.call( this,
            { add: classNames }, speed, easing, callback ) :
          orig.apply( this, arguments );
      };
    })( $.fn.addClass ),

    removeClass: (function( orig ) {
      return function( classNames, speed, easing, callback ) {
        return arguments.length > 1 ?
          $.effects.animateClass.call( this,
            { remove: classNames }, speed, easing, callback ) :
          orig.apply( this, arguments );
      };
    })( $.fn.removeClass ),

    toggleClass: (function( orig ) {
      return function( classNames, force, speed, easing, callback ) {
        if ( typeof force === "boolean" || force === undefined ) {
          if ( !speed ) {
            // without speed parameter
            return orig.apply( this, arguments );
          } else {
            return $.effects.animateClass.call( this,
              (force ? { add: classNames } : { remove: classNames }),
              speed, easing, callback );
          }
        } else {
          // without force parameter
          return $.effects.animateClass.call( this,
            { toggle: classNames }, force, speed, easing );
        }
      };
    })( $.fn.toggleClass ),

    switchClass: function( remove, add, speed, easing, callback) {
      return $.effects.animateClass.call( this, {
        add: add,
        remove: remove
      }, speed, easing, callback );
    }
  });

  })();

  /******************************************************************************/
  /*********************************** EFFECTS **********************************/
  /******************************************************************************/

  (function() {

  $.extend( $.effects, {
    version: "1.10.3",

    // Saves a set of properties in a data storage
    save: function( element, set ) {
      for( var i=0; i < set.length; i++ ) {
        if ( set[ i ] !== null ) {
          element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
        }
      }
    },

    // Restores a set of previously saved properties from a data storage
    restore: function( element, set ) {
      var val, i;
      for( i=0; i < set.length; i++ ) {
        if ( set[ i ] !== null ) {
          val = element.data( dataSpace + set[ i ] );
          // support: jQuery 1.6.2
          // http://bugs.jquery.com/ticket/9917
          // jQuery 1.6.2 incorrectly returns undefined for any falsy value.
          // We can't differentiate between "" and 0 here, so we just assume
          // empty string since it's likely to be a more common value...
          if ( val === undefined ) {
            val = "";
          }
          element.css( set[ i ], val );
        }
      }
    },

    setMode: function( el, mode ) {
      if (mode === "toggle") {
        mode = el.is( ":hidden" ) ? "show" : "hide";
      }
      return mode;
    },

    // Translates a [top,left] array into a baseline value
    // this should be a little more flexible in the future to handle a string & hash
    getBaseline: function( origin, original ) {
      var y, x;
      switch ( origin[ 0 ] ) {
        case "top": y = 0; break;
        case "middle": y = 0.5; break;
        case "bottom": y = 1; break;
        default: y = origin[ 0 ] / original.height;
      }
      switch ( origin[ 1 ] ) {
        case "left": x = 0; break;
        case "center": x = 0.5; break;
        case "right": x = 1; break;
        default: x = origin[ 1 ] / original.width;
      }
      return {
        x: x,
        y: y
      };
    },

    // Wraps the element around a wrapper that copies position properties
    createWrapper: function( element ) {

      // if the element is already wrapped, return it
      if ( element.parent().is( ".ui-effects-wrapper" )) {
        return element.parent();
      }

      // wrap the element
      var props = {
          width: element.outerWidth(true),
          height: element.outerHeight(true),
          "float": element.css( "float" )
        },
        wrapper = $( "<div></div>" )
          .addClass( "ui-effects-wrapper" )
          .css({
            fontSize: "100%",
            background: "transparent",
            border: "none",
            margin: 0,
            padding: 0
          }),
        // Store the size in case width/height are defined in % - Fixes #5245
        size = {
          width: element.width(),
          height: element.height()
        },
        active = document.activeElement;

      // support: Firefox
      // Firefox incorrectly exposes anonymous content
      // https://bugzilla.mozilla.org/show_bug.cgi?id=561664
      try {
        active.id;
      } catch( e ) {
        active = document.body;
      }

      element.wrap( wrapper );

      // Fixes #7595 - Elements lose focus when wrapped.
      if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
        $( active ).focus();
      }

      wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element

      // transfer positioning properties to the wrapper
      if ( element.css( "position" ) === "static" ) {
        wrapper.css({ position: "relative" });
        element.css({ position: "relative" });
      } else {
        $.extend( props, {
          position: element.css( "position" ),
          zIndex: element.css( "z-index" )
        });
        $.each([ "top", "left", "bottom", "right" ], function(i, pos) {
          props[ pos ] = element.css( pos );
          if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
            props[ pos ] = "auto";
          }
        });
        element.css({
          position: "relative",
          top: 0,
          left: 0,
          right: "auto",
          bottom: "auto"
        });
      }
      element.css(size);

      return wrapper.css( props ).show();
    },

    removeWrapper: function( element ) {
      var active = document.activeElement;

      if ( element.parent().is( ".ui-effects-wrapper" ) ) {
        element.parent().replaceWith( element );

        // Fixes #7595 - Elements lose focus when wrapped.
        if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
          $( active ).focus();
        }
      }


      return element;
    },

    setTransition: function( element, list, factor, value ) {
      value = value || {};
      $.each( list, function( i, x ) {
        var unit = element.cssUnit( x );
        if ( unit[ 0 ] > 0 ) {
          value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
        }
      });
      return value;
    }
  });

  // return an effect options object for the given parameters:
  function _normalizeArguments( effect, options, speed, callback ) {

    // allow passing all options as the first parameter
    if ( $.isPlainObject( effect ) ) {
      options = effect;
      effect = effect.effect;
    }

    // convert to an object
    effect = { effect: effect };

    // catch (effect, null, ...)
    if ( options == null ) {
      options = {};
    }

    // catch (effect, callback)
    if ( $.isFunction( options ) ) {
      callback = options;
      speed = null;
      options = {};
    }

    // catch (effect, speed, ?)
    if ( typeof options === "number" || $.fx.speeds[ options ] ) {
      callback = speed;
      speed = options;
      options = {};
    }

    // catch (effect, options, callback)
    if ( $.isFunction( speed ) ) {
      callback = speed;
      speed = null;
    }

    // add options to effect
    if ( options ) {
      $.extend( effect, options );
    }

    speed = speed || options.duration;
    effect.duration = $.fx.off ? 0 :
      typeof speed === "number" ? speed :
      speed in $.fx.speeds ? $.fx.speeds[ speed ] :
      $.fx.speeds._default;

    effect.complete = callback || options.complete;

    return effect;
  }

  function standardAnimationOption( option ) {
    // Valid standard speeds (nothing, number, named speed)
    if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
      return true;
    }

    // Invalid strings - treat as "normal" speed
    if ( typeof option === "string" && !$.effects.effect[ option ] ) {
      return true;
    }

    // Complete callback
    if ( $.isFunction( option ) ) {
      return true;
    }

    // Options hash (but not naming an effect)
    if ( typeof option === "object" && !option.effect ) {
      return true;
    }

    // Didn't match any standard API
    return false;
  }

  $.fn.extend({
    effect: function( /* effect, options, speed, callback */ ) {
      var args = _normalizeArguments.apply( this, arguments ),
        mode = args.mode,
        queue = args.queue,
        effectMethod = $.effects.effect[ args.effect ];

      if ( $.fx.off || !effectMethod ) {
        // delegate to the original method (e.g., .show()) if possible
        if ( mode ) {
          return this[ mode ]( args.duration, args.complete );
        } else {
          return this.each( function() {
            if ( args.complete ) {
              args.complete.call( this );
            }
          });
        }
      }

      function run( next ) {
        var elem = $( this ),
          complete = args.complete,
          mode = args.mode;

        function done() {
          if ( $.isFunction( complete ) ) {
            complete.call( elem[0] );
          }
          if ( $.isFunction( next ) ) {
            next();
          }
        }

        // If the element already has the correct final state, delegate to
        // the core methods so the internal tracking of "olddisplay" works.
        if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {
          elem[ mode ]();
          done();
        } else {
          effectMethod.call( elem[0], args, done );
        }
      }

      return queue === false ? this.each( run ) : this.queue( queue || "fx", run );
    },

    show: (function( orig ) {
      return function( option ) {
        if ( standardAnimationOption( option ) ) {
          return orig.apply( this, arguments );
        } else {
          var args = _normalizeArguments.apply( this, arguments );
          args.mode = "show";
          return this.effect.call( this, args );
        }
      };
    })( $.fn.show ),

    hide: (function( orig ) {
      return function( option ) {
        if ( standardAnimationOption( option ) ) {
          return orig.apply( this, arguments );
        } else {
          var args = _normalizeArguments.apply( this, arguments );
          args.mode = "hide";
          return this.effect.call( this, args );
        }
      };
    })( $.fn.hide ),

    toggle: (function( orig ) {
      return function( option ) {
        if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
          return orig.apply( this, arguments );
        } else {
          var args = _normalizeArguments.apply( this, arguments );
          args.mode = "toggle";
          return this.effect.call( this, args );
        }
      };
    })( $.fn.toggle ),

    // helper functions
    cssUnit: function(key) {
      var style = this.css( key ),
        val = [];

      $.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
        if ( style.indexOf( unit ) > 0 ) {
          val = [ parseFloat( style ), unit ];
        }
      });
      return val;
    }
  });

  })();

  /******************************************************************************/
  /*********************************** EASING ***********************************/
  /******************************************************************************/

  (function() {

  // based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

  var baseEasings = {};

  $.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
    baseEasings[ name ] = function( p ) {
      return Math.pow( p, i + 2 );
    };
  });

  $.extend( baseEasings, {
    Sine: function ( p ) {
      return 1 - Math.cos( p * Math.PI / 2 );
    },
    Circ: function ( p ) {
      return 1 - Math.sqrt( 1 - p * p );
    },
    Elastic: function( p ) {
      return p === 0 || p === 1 ? p :
        -Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
    },
    Back: function( p ) {
      return p * p * ( 3 * p - 2 );
    },
    Bounce: function ( p ) {
      var pow2,
        bounce = 4;

      while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
      return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
    }
  });

  $.each( baseEasings, function( name, easeIn ) {
    $.easing[ "easeIn" + name ] = easeIn;
    $.easing[ "easeOut" + name ] = function( p ) {
      return 1 - easeIn( 1 - p );
    };
    $.easing[ "easeInOut" + name ] = function( p ) {
      return p < 0.5 ?
        easeIn( p * 2 ) / 2 :
        1 - easeIn( p * -2 + 2 ) / 2;
    };
  });

  })();

  })(jQuery);

  (function( $, undefined ) {

  var uid = 0,
    hideProps = {},
    showProps = {};

  hideProps.height = hideProps.paddingTop = hideProps.paddingBottom =
    hideProps.borderTopWidth = hideProps.borderBottomWidth = "hide";
  showProps.height = showProps.paddingTop = showProps.paddingBottom =
    showProps.borderTopWidth = showProps.borderBottomWidth = "show";

  $.widget( "ui.accordion", {
    version: "1.10.3",
    options: {
      active: 0,
      animate: {},
      collapsible: false,
      event: "click",
      header: "> li > :first-child,> :not(li):even",
      heightStyle: "auto",
      icons: {
        activeHeader: "ui-icon-triangle-1-s",
        header: "ui-icon-triangle-1-e"
      },

      // callbacks
      activate: null,
      beforeActivate: null
    },

    _create: function() {
      var options = this.options;
      this.prevShow = this.prevHide = $();
      this.element.addClass( "ui-accordion ui-widget ui-helper-reset" )
        // ARIA
        .attr( "role", "tablist" );

      // don't allow collapsible: false and active: false / null
      if ( !options.collapsible && (options.active === false || options.active == null) ) {
        options.active = 0;
      }

      this._processPanels();
      // handle negative values
      if ( options.active < 0 ) {
        options.active += this.headers.length;
      }
      this._refresh();
    },

    _getCreateEventData: function() {
      return {
        header: this.active,
        panel: !this.active.length ? $() : this.active.next(),
        content: !this.active.length ? $() : this.active.next()
      };
    },

    _createIcons: function() {
      var icons = this.options.icons;
      if ( icons ) {
        $( "<span>" )
          .addClass( "ui-accordion-header-icon ui-icon " + icons.header )
          .prependTo( this.headers );
        this.active.children( ".ui-accordion-header-icon" )
          .removeClass( icons.header )
          .addClass( icons.activeHeader );
        this.headers.addClass( "ui-accordion-icons" );
      }
    },

    _destroyIcons: function() {
      this.headers
        .removeClass( "ui-accordion-icons" )
        .children( ".ui-accordion-header-icon" )
          .remove();
    },

    _destroy: function() {
      var contents;

      // clean up main element
      this.element
        .removeClass( "ui-accordion ui-widget ui-helper-reset" )
        .removeAttr( "role" );

      // clean up headers
      this.headers
        .removeClass( "ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top" )
        .removeAttr( "role" )
        .removeAttr( "aria-selected" )
        .removeAttr( "aria-controls" )
        .removeAttr( "tabIndex" )
        .each(function() {
          if ( /^ui-accordion/.test( this.id ) ) {
            this.removeAttribute( "id" );
          }
        });
      this._destroyIcons();

      // clean up content panels
      contents = this.headers.next()
        .css( "display", "" )
        .removeAttr( "role" )
        .removeAttr( "aria-expanded" )
        .removeAttr( "aria-hidden" )
        .removeAttr( "aria-labelledby" )
        .removeClass( "ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled" )
        .each(function() {
          if ( /^ui-accordion/.test( this.id ) ) {
            this.removeAttribute( "id" );
          }
        });
      if ( this.options.heightStyle !== "content" ) {
        contents.css( "height", "" );
      }
    },

    _setOption: function( key, value ) {
      if ( key === "active" ) {
        // _activate() will handle invalid values and update this.options
        this._activate( value );
        return;
      }

      if ( key === "event" ) {
        if ( this.options.event ) {
          this._off( this.headers, this.options.event );
        }
        this._setupEvents( value );
      }

      this._super( key, value );

      // setting collapsible: false while collapsed; open first panel
      if ( key === "collapsible" && !value && this.options.active === false ) {
        this._activate( 0 );
      }

      if ( key === "icons" ) {
        this._destroyIcons();
        if ( value ) {
          this._createIcons();
        }
      }

      // #5332 - opacity doesn't cascade to positioned elements in IE
      // so we need to add the disabled class to the headers and panels
      if ( key === "disabled" ) {
        this.headers.add( this.headers.next() )
          .toggleClass( "ui-state-disabled", !!value );
      }
    },

    _keydown: function( event ) {
      /*jshint maxcomplexity:15*/
      if ( event.altKey || event.ctrlKey ) {
        return;
      }

      var keyCode = $.ui.keyCode,
        length = this.headers.length,
        currentIndex = this.headers.index( event.target ),
        toFocus = false;

      switch ( event.keyCode ) {
        case keyCode.RIGHT:
        case keyCode.DOWN:
          toFocus = this.headers[ ( currentIndex + 1 ) % length ];
          break;
        case keyCode.LEFT:
        case keyCode.UP:
          toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
          break;
        case keyCode.SPACE:
        case keyCode.ENTER:
          this._eventHandler( event );
          break;
        case keyCode.HOME:
          toFocus = this.headers[ 0 ];
          break;
        case keyCode.END:
          toFocus = this.headers[ length - 1 ];
          break;
      }

      if ( toFocus ) {
        $( event.target ).attr( "tabIndex", -1 );
        $( toFocus ).attr( "tabIndex", 0 );
        toFocus.focus();
        event.preventDefault();
      }
    },

    _panelKeyDown : function( event ) {
      if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
        $( event.currentTarget ).prev().focus();
      }
    },

    refresh: function() {
      var options = this.options;
      this._processPanels();

      // was collapsed or no panel
      if ( ( options.active === false && options.collapsible === true ) || !this.headers.length ) {
        options.active = false;
        this.active = $();
      // active false only when collapsible is true
      } else if ( options.active === false ) {
        this._activate( 0 );
      // was active, but active panel is gone
      } else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
        // all remaining panel are disabled
        if ( this.headers.length === this.headers.find(".ui-state-disabled").length ) {
          options.active = false;
          this.active = $();
        // activate previous panel
        } else {
          this._activate( Math.max( 0, options.active - 1 ) );
        }
      // was active, active panel still exists
      } else {
        // make sure active index is correct
        options.active = this.headers.index( this.active );
      }

      this._destroyIcons();

      this._refresh();
    },

    _processPanels: function() {
      this.headers = this.element.find( this.options.header )
        .addClass( "ui-accordion-header ui-helper-reset ui-state-default ui-corner-all" );

      this.headers.next()
        .addClass( "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom" )
        .filter(":not(.ui-accordion-content-active)")
        .hide();
    },

    _refresh: function() {
      var maxHeight,
        options = this.options,
        heightStyle = options.heightStyle,
        parent = this.element.parent(),
        accordionId = this.accordionId = "ui-accordion-" +
          (this.element.attr( "id" ) || ++uid);

      this.active = this._findActive( options.active )
        .addClass( "ui-accordion-header-active ui-state-active ui-corner-top" )
        .removeClass( "ui-corner-all" );
      this.active.next()
        .addClass( "ui-accordion-content-active" )
        .show();

      this.headers
        .attr( "role", "tab" )
        .each(function( i ) {
          var header = $( this ),
            headerId = header.attr( "id" ),
            panel = header.next(),
            panelId = panel.attr( "id" );
          if ( !headerId ) {
            headerId = accordionId + "-header-" + i;
            header.attr( "id", headerId );
          }
          if ( !panelId ) {
            panelId = accordionId + "-panel-" + i;
            panel.attr( "id", panelId );
          }
          header.attr( "aria-controls", panelId );
          panel.attr( "aria-labelledby", headerId );
        })
        .next()
          .attr( "role", "tabpanel" );

      this.headers
        .not( this.active )
        .attr({
          "aria-selected": "false",
          tabIndex: -1
        })
        .next()
          .attr({
            "aria-expanded": "false",
            "aria-hidden": "true"
          })
          .hide();

      // make sure at least one header is in the tab order
      if ( !this.active.length ) {
        this.headers.eq( 0 ).attr( "tabIndex", 0 );
      } else {
        this.active.attr({
          "aria-selected": "true",
          tabIndex: 0
        })
        .next()
          .attr({
            "aria-expanded": "true",
            "aria-hidden": "false"
          });
      }

      this._createIcons();

      this._setupEvents( options.event );

      if ( heightStyle === "fill" ) {
        maxHeight = parent.height();
        this.element.siblings( ":visible" ).each(function() {
          var elem = $( this ),
            position = elem.css( "position" );

          if ( position === "absolute" || position === "fixed" ) {
            return;
          }
          maxHeight -= elem.outerHeight( true );
        });

        this.headers.each(function() {
          maxHeight -= $( this ).outerHeight( true );
        });

        this.headers.next()
          .each(function() {
            $( this ).height( Math.max( 0, maxHeight -
              $( this ).innerHeight() + $( this ).height() ) );
          })
          .css( "overflow", "auto" );
      } else if ( heightStyle === "auto" ) {
        maxHeight = 0;
        this.headers.next()
          .each(function() {
            maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
          })
          .height( maxHeight );
      }
    },

    _activate: function( index ) {
      var active = this._findActive( index )[ 0 ];

      // trying to activate the already active panel
      if ( active === this.active[ 0 ] ) {
        return;
      }

      // trying to collapse, simulate a click on the currently active header
      active = active || this.active[ 0 ];

      this._eventHandler({
        target: active,
        currentTarget: active,
        preventDefault: $.noop
      });
    },

    _findActive: function( selector ) {
      return typeof selector === "number" ? this.headers.eq( selector ) : $();
    },

    _setupEvents: function( event ) {
      var events = {
        keydown: "_keydown"
      };
      if ( event ) {
        $.each( event.split(" "), function( index, eventName ) {
          events[ eventName ] = "_eventHandler";
        });
      }

      this._off( this.headers.add( this.headers.next() ) );
      this._on( this.headers, events );
      this._on( this.headers.next(), { keydown: "_panelKeyDown" });
      this._hoverable( this.headers );
      this._focusable( this.headers );
    },

    _eventHandler: function( event ) {
      var options = this.options,
        active = this.active,
        clicked = $( event.currentTarget ),
        clickedIsActive = clicked[ 0 ] === active[ 0 ],
        collapsing = clickedIsActive && options.collapsible,
        toShow = collapsing ? $() : clicked.next(),
        toHide = active.next(),
        eventData = {
          oldHeader: active,
          oldPanel: toHide,
          newHeader: collapsing ? $() : clicked,
          newPanel: toShow
        };

      event.preventDefault();

      if (
          // click on active header, but not collapsible
          ( clickedIsActive && !options.collapsible ) ||
          // allow canceling activation
          ( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
        return;
      }

      options.active = collapsing ? false : this.headers.index( clicked );

      // when the call to ._toggle() comes after the class changes
      // it causes a very odd bug in IE 8 (see #6720)
      this.active = clickedIsActive ? $() : clicked;
      this._toggle( eventData );

      // switch classes
      // corner classes on the previously active header stay after the animation
      active.removeClass( "ui-accordion-header-active ui-state-active" );
      if ( options.icons ) {
        active.children( ".ui-accordion-header-icon" )
          .removeClass( options.icons.activeHeader )
          .addClass( options.icons.header );
      }

      if ( !clickedIsActive ) {
        clicked
          .removeClass( "ui-corner-all" )
          .addClass( "ui-accordion-header-active ui-state-active ui-corner-top" );
        if ( options.icons ) {
          clicked.children( ".ui-accordion-header-icon" )
            .removeClass( options.icons.header )
            .addClass( options.icons.activeHeader );
        }

        clicked
          .next()
          .addClass( "ui-accordion-content-active" );
      }
    },

    _toggle: function( data ) {
      var toShow = data.newPanel,
        toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

      // handle activating a panel during the animation for another activation
      this.prevShow.add( this.prevHide ).stop( true, true );
      this.prevShow = toShow;
      this.prevHide = toHide;

      if ( this.options.animate ) {
        this._animate( toShow, toHide, data );
      } else {
        toHide.hide();
        toShow.show();
        this._toggleComplete( data );
      }

      toHide.attr({
        "aria-expanded": "false",
        "aria-hidden": "true"
      });
      toHide.prev().attr( "aria-selected", "false" );
      // if we're switching panels, remove the old header from the tab order
      // if we're opening from collapsed state, remove the previous header from the tab order
      // if we're collapsing, then keep the collapsing header in the tab order
      if ( toShow.length && toHide.length ) {
        toHide.prev().attr( "tabIndex", -1 );
      } else if ( toShow.length ) {
        this.headers.filter(function() {
          return $( this ).attr( "tabIndex" ) === 0;
        })
        .attr( "tabIndex", -1 );
      }

      toShow
        .attr({
          "aria-expanded": "true",
          "aria-hidden": "false"
        })
        .prev()
          .attr({
            "aria-selected": "true",
            tabIndex: 0
          });
    },

    _animate: function( toShow, toHide, data ) {
      var total, easing, duration,
        that = this,
        adjust = 0,
        down = toShow.length &&
          ( !toHide.length || ( toShow.index() < toHide.index() ) ),
        animate = this.options.animate || {},
        options = down && animate.down || animate,
        complete = function() {
          that._toggleComplete( data );
        };

      if ( typeof options === "number" ) {
        duration = options;
      }
      if ( typeof options === "string" ) {
        easing = options;
      }
      // fall back from options to animation in case of partial down settings
      easing = easing || options.easing || animate.easing;
      duration = duration || options.duration || animate.duration;

      if ( !toHide.length ) {
        return toShow.animate( showProps, duration, easing, complete );
      }
      if ( !toShow.length ) {
        return toHide.animate( hideProps, duration, easing, complete );
      }

      total = toShow.show().outerHeight();
      toHide.animate( hideProps, {
        duration: duration,
        easing: easing,
        step: function( now, fx ) {
          fx.now = Math.round( now );
        }
      });
      toShow
        .hide()
        .animate( showProps, {
          duration: duration,
          easing: easing,
          complete: complete,
          step: function( now, fx ) {
            fx.now = Math.round( now );
            if ( fx.prop !== "height" ) {
              adjust += fx.now;
            } else if ( that.options.heightStyle !== "content" ) {
              fx.now = Math.round( total - toHide.outerHeight() - adjust );
              adjust = 0;
            }
          }
        });
    },

    _toggleComplete: function( data ) {
      var toHide = data.oldPanel;

      toHide
        .removeClass( "ui-accordion-content-active" )
        .prev()
          .removeClass( "ui-corner-top" )
          .addClass( "ui-corner-all" );

      // Work around for rendering bug in IE (#5421)
      if ( toHide.length ) {
        toHide.parent()[0].className = toHide.parent()[0].className;
      }

      this._trigger( "activate", null, data );
    }
  });

  })( jQuery );

  (function( $, undefined ) {

  // used to prevent race conditions with remote data sources
  var requestIndex = 0;

  $.widget( "ui.autocomplete", {
    version: "1.10.3",
    defaultElement: "<input>",
    options: {
      appendTo: null,
      autoFocus: false,
      delay: 300,
      minLength: 1,
      position: {
        my: "left top",
        at: "left bottom",
        collision: "none"
      },
      source: null,

      // callbacks
      change: null,
      close: null,
      focus: null,
      open: null,
      response: null,
      search: null,
      select: null
    },

    pending: 0,

    _create: function() {
      // Some browsers only repeat keydown events, not keypress events,
      // so we use the suppressKeyPress flag to determine if we've already
      // handled the keydown event. #7269
      // Unfortunately the code for & in keypress is the same as the up arrow,
      // so we use the suppressKeyPressRepeat flag to avoid handling keypress
      // events when we know the keydown event was used to modify the
      // search term. #7799
      var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
        nodeName = this.element[0].nodeName.toLowerCase(),
        isTextarea = nodeName === "textarea",
        isInput = nodeName === "input";

      this.isMultiLine =
        // Textareas are always multi-line
        isTextarea ? true :
        // Inputs are always single-line, even if inside a contentEditable element
        // IE also treats inputs as contentEditable
        isInput ? false :
        // All other element types are determined by whether or not they're contentEditable
        this.element.prop( "isContentEditable" );

      this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
      this.isNewMenu = true;

      this.element
        .addClass( "ui-autocomplete-input" )
        .attr( "autocomplete", "off" );

      this._on( this.element, {
        keydown: function( event ) {
          /*jshint maxcomplexity:15*/
          if ( this.element.prop( "readOnly" ) ) {
            suppressKeyPress = true;
            suppressInput = true;
            suppressKeyPressRepeat = true;
            return;
          }

          suppressKeyPress = false;
          suppressInput = false;
          suppressKeyPressRepeat = false;
          var keyCode = $.ui.keyCode;
          switch( event.keyCode ) {
          case keyCode.PAGE_UP:
            suppressKeyPress = true;
            this._move( "previousPage", event );
            break;
          case keyCode.PAGE_DOWN:
            suppressKeyPress = true;
            this._move( "nextPage", event );
            break;
          case keyCode.UP:
            suppressKeyPress = true;
            this._keyEvent( "previous", event );
            break;
          case keyCode.DOWN:
            suppressKeyPress = true;
            this._keyEvent( "next", event );
            break;
          case keyCode.ENTER:
          case keyCode.NUMPAD_ENTER:
            // when menu is open and has focus
            if ( this.menu.active ) {
              // #6055 - Opera still allows the keypress to occur
              // which causes forms to submit
              suppressKeyPress = true;
              event.preventDefault();
              this.menu.select( event );
            }
            break;
          case keyCode.TAB:
            if ( this.menu.active ) {
              this.menu.select( event );
            }
            break;
          case keyCode.ESCAPE:
            if ( this.menu.element.is( ":visible" ) ) {
              this._value( this.term );
              this.close( event );
              // Different browsers have different default behavior for escape
              // Single press can mean undo or clear
              // Double press in IE means clear the whole form
              event.preventDefault();
            }
            break;
          default:
            suppressKeyPressRepeat = true;
            // search timeout should be triggered before the input value is changed
            this._searchTimeout( event );
            break;
          }
        },
        keypress: function( event ) {
          if ( suppressKeyPress ) {
            suppressKeyPress = false;
            if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
              event.preventDefault();
            }
            return;
          }
          if ( suppressKeyPressRepeat ) {
            return;
          }

          // replicate some key handlers to allow them to repeat in Firefox and Opera
          var keyCode = $.ui.keyCode;
          switch( event.keyCode ) {
          case keyCode.PAGE_UP:
            this._move( "previousPage", event );
            break;
          case keyCode.PAGE_DOWN:
            this._move( "nextPage", event );
            break;
          case keyCode.UP:
            this._keyEvent( "previous", event );
            break;
          case keyCode.DOWN:
            this._keyEvent( "next", event );
            break;
          }
        },
        input: function( event ) {
          if ( suppressInput ) {
            suppressInput = false;
            event.preventDefault();
            return;
          }
          this._searchTimeout( event );
        },
        focus: function() {
          this.selectedItem = null;
          this.previous = this._value();
        },
        blur: function( event ) {
          if ( this.cancelBlur ) {
            delete this.cancelBlur;
            return;
          }

          clearTimeout( this.searching );
          this.close( event );
          this._change( event );
        }
      });

      this._initSource();
      this.menu = $( "<ul>" )
        .addClass( "ui-autocomplete ui-front" )
        .appendTo( this._appendTo() )
        .menu({
          // disable ARIA support, the live region takes care of that
          role: null
        })
        .hide()
        .data( "ui-menu" );

      this._on( this.menu.element, {
        mousedown: function( event ) {
          // prevent moving focus out of the text field
          event.preventDefault();

          // IE doesn't prevent moving focus even with event.preventDefault()
          // so we set a flag to know when we should ignore the blur event
          this.cancelBlur = true;
          this._delay(function() {
            delete this.cancelBlur;
          });

          // clicking on the scrollbar causes focus to shift to the body
          // but we can't detect a mouseup or a click immediately afterward
          // so we have to track the next mousedown and close the menu if
          // the user clicks somewhere outside of the autocomplete
          var menuElement = this.menu.element[ 0 ];
          if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
            this._delay(function() {
              var that = this;
              this.document.one( "mousedown", function( event ) {
                if ( event.target !== that.element[ 0 ] &&
                    event.target !== menuElement &&
                    !$.contains( menuElement, event.target ) ) {
                  that.close();
                }
              });
            });
          }
        },
        menufocus: function( event, ui ) {
          // support: Firefox
          // Prevent accidental activation of menu items in Firefox (#7024 #9118)
          if ( this.isNewMenu ) {
            this.isNewMenu = false;
            if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
              this.menu.blur();

              this.document.one( "mousemove", function() {
                $( event.target ).trigger( event.originalEvent );
              });

              return;
            }
          }

          var item = ui.item.data( "ui-autocomplete-item" );
          if ( false !== this._trigger( "focus", event, { item: item } ) ) {
            // use value to match what will end up in the input, if it was a key event
            if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
              this._value( item.value );
            }
          } else {
            // Normally the input is populated with the item's value as the
            // menu is navigated, causing screen readers to notice a change and
            // announce the item. Since the focus event was canceled, this doesn't
            // happen, so we update the live region so that screen readers can
            // still notice the change and announce it.
            this.liveRegion.text( item.value );
          }
        },
        menuselect: function( event, ui ) {
          var item = ui.item.data( "ui-autocomplete-item" ),
            previous = this.previous;

          // only trigger when focus was lost (click on menu)
          if ( this.element[0] !== this.document[0].activeElement ) {
            this.element.focus();
            this.previous = previous;
            // #6109 - IE triggers two focus events and the second
            // is asynchronous, so we need to reset the previous
            // term synchronously and asynchronously :-(
            this._delay(function() {
              this.previous = previous;
              this.selectedItem = item;
            });
          }

          if ( false !== this._trigger( "select", event, { item: item } ) ) {
            this._value( item.value );
          }
          // reset the term after the select event
          // this allows custom select handling to work properly
          this.term = this._value();

          this.close( event );
          this.selectedItem = item;
        }
      });

      this.liveRegion = $( "<span>", {
          role: "status",
          "aria-live": "polite"
        })
        .addClass( "ui-helper-hidden-accessible" )
        .insertBefore( this.element );

      // turning off autocomplete prevents the browser from remembering the
      // value when navigating through history, so we re-enable autocomplete
      // if the page is unloaded before the widget is destroyed. #7790
      this._on( this.window, {
        beforeunload: function() {
          this.element.removeAttr( "autocomplete" );
        }
      });
    },

    _destroy: function() {
      clearTimeout( this.searching );
      this.element
        .removeClass( "ui-autocomplete-input" )
        .removeAttr( "autocomplete" );
      this.menu.element.remove();
      this.liveRegion.remove();
    },

    _setOption: function( key, value ) {
      this._super( key, value );
      if ( key === "source" ) {
        this._initSource();
      }
      if ( key === "appendTo" ) {
        this.menu.element.appendTo( this._appendTo() );
      }
      if ( key === "disabled" && value && this.xhr ) {
        this.xhr.abort();
      }
    },

    _appendTo: function() {
      var element = this.options.appendTo;

      if ( element ) {
        element = element.jquery || element.nodeType ?
          $( element ) :
          this.document.find( element ).eq( 0 );
      }

      if ( !element ) {
        element = this.element.closest( ".ui-front" );
      }

      if ( !element.length ) {
        element = this.document[0].body;
      }

      return element;
    },

    _initSource: function() {
      var array, url,
        that = this;
      if ( $.isArray(this.options.source) ) {
        array = this.options.source;
        this.source = function( request, response ) {
          response( $.ui.autocomplete.filter( array, request.term ) );
        };
      } else if ( typeof this.options.source === "string" ) {
        url = this.options.source;
        this.source = function( request, response ) {
          if ( that.xhr ) {
            that.xhr.abort();
          }
          that.xhr = $.ajax({
            url: url,
            data: request,
            dataType: "json",
            success: function( data ) {
              response( data );
            },
            error: function() {
              response( [] );
            }
          });
        };
      } else {
        this.source = this.options.source;
      }
    },

    _searchTimeout: function( event ) {
      clearTimeout( this.searching );
      this.searching = this._delay(function() {
        // only search if the value has changed
        if ( this.term !== this._value() ) {
          this.selectedItem = null;
          this.search( null, event );
        }
      }, this.options.delay );
    },

    search: function( value, event ) {
      value = value != null ? value : this._value();

      // always save the actual value, not the one passed as an argument
      this.term = this._value();

      if ( value.length < this.options.minLength ) {
        return this.close( event );
      }

      if ( this._trigger( "search", event ) === false ) {
        return;
      }

      return this._search( value );
    },

    _search: function( value ) {
      this.pending++;
      this.element.addClass( "ui-autocomplete-loading" );
      this.cancelSearch = false;

      this.source( { term: value }, this._response() );
    },

    _response: function() {
      var that = this,
        index = ++requestIndex;

      return function( content ) {
        if ( index === requestIndex ) {
          that.__response( content );
        }

        that.pending--;
        if ( !that.pending ) {
          that.element.removeClass( "ui-autocomplete-loading" );
        }
      };
    },

    __response: function( content ) {
      if ( content ) {
        content = this._normalize( content );
      }
      this._trigger( "response", null, { content: content } );
      if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
        this._suggest( content );
        this._trigger( "open" );
      } else {
        // use ._close() instead of .close() so we don't cancel future searches
        this._close();
      }
    },

    close: function( event ) {
      this.cancelSearch = true;
      this._close( event );
    },

    _close: function( event ) {
      if ( this.menu.element.is( ":visible" ) ) {
        this.menu.element.hide();
        this.menu.blur();
        this.isNewMenu = true;
        this._trigger( "close", event );
      }
    },

    _change: function( event ) {
      if ( this.previous !== this._value() ) {
        this._trigger( "change", event, { item: this.selectedItem } );
      }
    },

    _normalize: function( items ) {
      // assume all items have the right format when the first item is complete
      if ( items.length && items[0].label && items[0].value ) {
        return items;
      }
      return $.map( items, function( item ) {
        if ( typeof item === "string" ) {
          return {
            label: item,
            value: item
          };
        }
        return $.extend({
          label: item.label || item.value,
          value: item.value || item.label
        }, item );
      });
    },

    _suggest: function( items ) {
      var ul = this.menu.element.empty();
      this._renderMenu( ul, items );
      this.isNewMenu = true;
      this.menu.refresh();

      // size and position menu
      ul.show();
      this._resizeMenu();
      ul.position( $.extend({
        of: this.element
      }, this.options.position ));

      if ( this.options.autoFocus ) {
        this.menu.next();
      }
    },

    _resizeMenu: function() {
      var ul = this.menu.element;
      ul.outerWidth( Math.max(
        // Firefox wraps long text (possibly a rounding bug)
        // so we add 1px to avoid the wrapping (#7513)
        ul.width( "" ).outerWidth() + 1,
        this.element.outerWidth()
      ) );
    },

    _renderMenu: function( ul, items ) {
      var that = this;
      $.each( items, function( index, item ) {
        that._renderItemData( ul, item );
      });
    },

    _renderItemData: function( ul, item ) {
      return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
    },

    _renderItem: function( ul, item ) {
      return $( "<li>" )
        .append( $( "<a>" ).text( item.label ) )
        .appendTo( ul );
    },

    _move: function( direction, event ) {
      if ( !this.menu.element.is( ":visible" ) ) {
        this.search( null, event );
        return;
      }
      if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
          this.menu.isLastItem() && /^next/.test( direction ) ) {
        this._value( this.term );
        this.menu.blur();
        return;
      }
      this.menu[ direction ]( event );
    },

    widget: function() {
      return this.menu.element;
    },

    _value: function() {
      return this.valueMethod.apply( this.element, arguments );
    },

    _keyEvent: function( keyEvent, event ) {
      if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
        this._move( keyEvent, event );

        // prevents moving cursor to beginning/end of the text field in some browsers
        event.preventDefault();
      }
    }
  });

  $.extend( $.ui.autocomplete, {
    escapeRegex: function( value ) {
      return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    },
    filter: function(array, term) {
      var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );
      return $.grep( array, function(value) {
        return matcher.test( value.label || value.value || value );
      });
    }
  });


  // live region extension, adding a `messages` option
  // NOTE: This is an experimental API. We are still investigating
  // a full solution for string manipulation and internationalization.
  $.widget( "ui.autocomplete", $.ui.autocomplete, {
    options: {
      messages: {
        noResults: "No search results.",
        results: function( amount ) {
          return amount + ( amount > 1 ? " results are" : " result is" ) +
            " available, use up and down arrow keys to navigate.";
        }
      }
    },

    __response: function( content ) {
      var message;
      this._superApply( arguments );
      if ( this.options.disabled || this.cancelSearch ) {
        return;
      }
      if ( content && content.length ) {
        message = this.options.messages.results( content.length );
      } else {
        message = this.options.messages.noResults;
      }
      this.liveRegion.text( message );
    }
  });

  }( jQuery ));

  (function( $, undefined ) {

  var lastActive, startXPos, startYPos, clickDragged,
    baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
    stateClasses = "ui-state-hover ui-state-active ",
    typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
    formResetHandler = function() {
      var form = $( this );
      setTimeout(function() {
        form.find( ":ui-button" ).button( "refresh" );
      }, 1 );
    },
    radioGroup = function( radio ) {
      var name = radio.name,
        form = radio.form,
        radios = $( [] );
      if ( name ) {
        name = name.replace( /'/g, "\\'" );
        if ( form ) {
          radios = $( form ).find( "[name='" + name + "']" );
        } else {
          radios = $( "[name='" + name + "']", radio.ownerDocument )
            .filter(function() {
              return !this.form;
            });
        }
      }
      return radios;
    };

  $.widget( "ui.button", {
    version: "1.10.3",
    defaultElement: "<button>",
    options: {
      disabled: null,
      text: true,
      label: null,
      icons: {
        primary: null,
        secondary: null
      }
    },
    _create: function() {
      this.element.closest( "form" )
        .unbind( "reset" + this.eventNamespace )
        .bind( "reset" + this.eventNamespace, formResetHandler );

      if ( typeof this.options.disabled !== "boolean" ) {
        this.options.disabled = !!this.element.prop( "disabled" );
      } else {
        this.element.prop( "disabled", this.options.disabled );
      }

      this._determineButtonType();
      this.hasTitle = !!this.buttonElement.attr( "title" );

      var that = this,
        options = this.options,
        toggleButton = this.type === "checkbox" || this.type === "radio",
        activeClass = !toggleButton ? "ui-state-active" : "",
        focusClass = "ui-state-focus";

      if ( options.label === null ) {
        options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
      }

      this._hoverable( this.buttonElement );

      this.buttonElement
        .addClass( baseClasses )
        .attr( "role", "button" )
        .bind( "mouseenter" + this.eventNamespace, function() {
          if ( options.disabled ) {
            return;
          }
          if ( this === lastActive ) {
            $( this ).addClass( "ui-state-active" );
          }
        })
        .bind( "mouseleave" + this.eventNamespace, function() {
          if ( options.disabled ) {
            return;
          }
          $( this ).removeClass( activeClass );
        })
        .bind( "click" + this.eventNamespace, function( event ) {
          if ( options.disabled ) {
            event.preventDefault();
            event.stopImmediatePropagation();
          }
        });

      this.element
        .bind( "focus" + this.eventNamespace, function() {
          // no need to check disabled, focus won't be triggered anyway
          that.buttonElement.addClass( focusClass );
        })
        .bind( "blur" + this.eventNamespace, function() {
          that.buttonElement.removeClass( focusClass );
        });

      if ( toggleButton ) {
        this.element.bind( "change" + this.eventNamespace, function() {
          if ( clickDragged ) {
            return;
          }
          that.refresh();
        });
        // if mouse moves between mousedown and mouseup (drag) set clickDragged flag
        // prevents issue where button state changes but checkbox/radio checked state
        // does not in Firefox (see ticket #6970)
        this.buttonElement
          .bind( "mousedown" + this.eventNamespace, function( event ) {
            if ( options.disabled ) {
              return;
            }
            clickDragged = false;
            startXPos = event.pageX;
            startYPos = event.pageY;
          })
          .bind( "mouseup" + this.eventNamespace, function( event ) {
            if ( options.disabled ) {
              return;
            }
            if ( startXPos !== event.pageX || startYPos !== event.pageY ) {
              clickDragged = true;
            }
        });
      }

      if ( this.type === "checkbox" ) {
        this.buttonElement.bind( "click" + this.eventNamespace, function() {
          if ( options.disabled || clickDragged ) {
            return false;
          }
        });
      } else if ( this.type === "radio" ) {
        this.buttonElement.bind( "click" + this.eventNamespace, function() {
          if ( options.disabled || clickDragged ) {
            return false;
          }
          $( this ).addClass( "ui-state-active" );
          that.buttonElement.attr( "aria-pressed", "true" );

          var radio = that.element[ 0 ];
          radioGroup( radio )
            .not( radio )
            .map(function() {
              return $( this ).button( "widget" )[ 0 ];
            })
            .removeClass( "ui-state-active" )
            .attr( "aria-pressed", "false" );
        });
      } else {
        this.buttonElement
          .bind( "mousedown" + this.eventNamespace, function() {
            if ( options.disabled ) {
              return false;
            }
            $( this ).addClass( "ui-state-active" );
            lastActive = this;
            that.document.one( "mouseup", function() {
              lastActive = null;
            });
          })
          .bind( "mouseup" + this.eventNamespace, function() {
            if ( options.disabled ) {
              return false;
            }
            $( this ).removeClass( "ui-state-active" );
          })
          .bind( "keydown" + this.eventNamespace, function(event) {
            if ( options.disabled ) {
              return false;
            }
            if ( event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER ) {
              $( this ).addClass( "ui-state-active" );
            }
          })
          // see #8559, we bind to blur here in case the button element loses
          // focus between keydown and keyup, it would be left in an "active" state
          .bind( "keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
            $( this ).removeClass( "ui-state-active" );
          });

        if ( this.buttonElement.is("a") ) {
          this.buttonElement.keyup(function(event) {
            if ( event.keyCode === $.ui.keyCode.SPACE ) {
              // TODO pass through original event correctly (just as 2nd argument doesn't work)
              $( this ).click();
            }
          });
        }
      }

      // TODO: pull out $.Widget's handling for the disabled option into
      // $.Widget.prototype._setOptionDisabled so it's easy to proxy and can
      // be overridden by individual plugins
      this._setOption( "disabled", options.disabled );
      this._resetButton();
    },

    _determineButtonType: function() {
      var ancestor, labelSelector, checked;

      if ( this.element.is("[type=checkbox]") ) {
        this.type = "checkbox";
      } else if ( this.element.is("[type=radio]") ) {
        this.type = "radio";
      } else if ( this.element.is("input") ) {
        this.type = "input";
      } else {
        this.type = "button";
      }

      if ( this.type === "checkbox" || this.type === "radio" ) {
        // we don't search against the document in case the element
        // is disconnected from the DOM
        ancestor = this.element.parents().last();
        labelSelector = "label[for='" + this.element.attr("id") + "']";
        this.buttonElement = ancestor.find( labelSelector );
        if ( !this.buttonElement.length ) {
          ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
          this.buttonElement = ancestor.filter( labelSelector );
          if ( !this.buttonElement.length ) {
            this.buttonElement = ancestor.find( labelSelector );
          }
        }
        this.element.addClass( "ui-helper-hidden-accessible" );

        checked = this.element.is( ":checked" );
        if ( checked ) {
          this.buttonElement.addClass( "ui-state-active" );
        }
        this.buttonElement.prop( "aria-pressed", checked );
      } else {
        this.buttonElement = this.element;
      }
    },

    widget: function() {
      return this.buttonElement;
    },

    _destroy: function() {
      this.element
        .removeClass( "ui-helper-hidden-accessible" );
      this.buttonElement
        .removeClass( baseClasses + " " + stateClasses + " " + typeClasses )
        .removeAttr( "role" )
        .removeAttr( "aria-pressed" )
        .html( this.buttonElement.find(".ui-button-text").html() );

      if ( !this.hasTitle ) {
        this.buttonElement.removeAttr( "title" );
      }
    },

    _setOption: function( key, value ) {
      this._super( key, value );
      if ( key === "disabled" ) {
        if ( value ) {
          this.element.prop( "disabled", true );
        } else {
          this.element.prop( "disabled", false );
        }
        return;
      }
      this._resetButton();
    },

    refresh: function() {
      //See #8237 & #8828
      var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "ui-button-disabled" );

      if ( isDisabled !== this.options.disabled ) {
        this._setOption( "disabled", isDisabled );
      }
      if ( this.type === "radio" ) {
        radioGroup( this.element[0] ).each(function() {
          if ( $( this ).is( ":checked" ) ) {
            $( this ).button( "widget" )
              .addClass( "ui-state-active" )
              .attr( "aria-pressed", "true" );
          } else {
            $( this ).button( "widget" )
              .removeClass( "ui-state-active" )
              .attr( "aria-pressed", "false" );
          }
        });
      } else if ( this.type === "checkbox" ) {
        if ( this.element.is( ":checked" ) ) {
          this.buttonElement
            .addClass( "ui-state-active" )
            .attr( "aria-pressed", "true" );
        } else {
          this.buttonElement
            .removeClass( "ui-state-active" )
            .attr( "aria-pressed", "false" );
        }
      }
    },

    _resetButton: function() {
      if ( this.type === "input" ) {
        if ( this.options.label ) {
          this.element.val( this.options.label );
        }
        return;
      }
      var buttonElement = this.buttonElement.removeClass( typeClasses ),
        buttonText = $( "<span></span>", this.document[0] )
          .addClass( "ui-button-text" )
          .html( this.options.label )
          .appendTo( buttonElement.empty() )
          .text(),
        icons = this.options.icons,
        multipleIcons = icons.primary && icons.secondary,
        buttonClasses = [];

      if ( icons.primary || icons.secondary ) {
        if ( this.options.text ) {
          buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
        }

        if ( icons.primary ) {
          buttonElement.prepend( "<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>" );
        }

        if ( icons.secondary ) {
          buttonElement.append( "<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>" );
        }

        if ( !this.options.text ) {
          buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );

          if ( !this.hasTitle ) {
            buttonElement.attr( "title", $.trim( buttonText ) );
          }
        }
      } else {
        buttonClasses.push( "ui-button-text-only" );
      }
      buttonElement.addClass( buttonClasses.join( " " ) );
    }
  });

  $.widget( "ui.buttonset", {
    version: "1.10.3",
    options: {
      items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
    },

    _create: function() {
      this.element.addClass( "ui-buttonset" );
    },

    _init: function() {
      this.refresh();
    },

    _setOption: function( key, value ) {
      if ( key === "disabled" ) {
        this.buttons.button( "option", key, value );
      }

      this._super( key, value );
    },

    refresh: function() {
      var rtl = this.element.css( "direction" ) === "rtl";

      this.buttons = this.element.find( this.options.items )
        .filter( ":ui-button" )
          .button( "refresh" )
        .end()
        .not( ":ui-button" )
          .button()
        .end()
        .map(function() {
          return $( this ).button( "widget" )[ 0 ];
        })
          .removeClass( "ui-corner-all ui-corner-left ui-corner-right" )
          .filter( ":first" )
            .addClass( rtl ? "ui-corner-right" : "ui-corner-left" )
          .end()
          .filter( ":last" )
            .addClass( rtl ? "ui-corner-left" : "ui-corner-right" )
          .end()
        .end();
    },

    _destroy: function() {
      this.element.removeClass( "ui-buttonset" );
      this.buttons
        .map(function() {
          return $( this ).button( "widget" )[ 0 ];
        })
          .removeClass( "ui-corner-left ui-corner-right" )
        .end()
        .button( "destroy" );
    }
  });

  }( jQuery ) );

  (function( $, undefined ) {

  $.extend($.ui, { datepicker: { version: "1.10.3" } });

  var PROP_NAME = "datepicker",
    instActive;

  /* Date picker manager.
     Use the singleton instance of this class, $.datepicker, to interact with the date picker.
     Settings for (groups of) date pickers are maintained in an instance object,
     allowing multiple different settings on the same page. */

  function Datepicker() {
    this._curInst = null; // The current instance in use
    this._keyEvent = false; // If the last event was a key event
    this._disabledInputs = []; // List of date picker inputs that have been disabled
    this._datepickerShowing = false; // True if the popup picker is showing , false if not
    this._inDialog = false; // True if showing within a "dialog", false if not
    this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
    this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
    this._appendClass = "ui-datepicker-append"; // The name of the append marker class
    this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
    this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
    this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
    this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
    this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
    this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
    this.regional = []; // Available regional settings, indexed by language code
    this.regional[""] = { // Default regional settings
      closeText: "Done", // Display text for close link
      prevText: "Prev", // Display text for previous month link
      nextText: "Next", // Display text for next month link
      currentText: "Today", // Display text for current month link
      monthNames: ["January","February","March","April","May","June",
        "July","August","September","October","November","December"], // Names of months for drop-down and formatting
      monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
      dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
      dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
      dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
      weekHeader: "Wk", // Column header for week of the year
      dateFormat: "mm/dd/yy", // See format options on parseDate
      firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
      isRTL: false, // True if right-to-left language, false if left-to-right
      showMonthAfterYear: false, // True if the year select precedes month, false for month then year
      yearSuffix: "" // Additional text to append to the year in the month headers
    };
    this._defaults = { // Global defaults for all the date picker instances
      showOn: "focus", // "focus" for popup on focus,
        // "button" for trigger button, or "both" for either
      showAnim: "fadeIn", // Name of jQuery animation for popup
      showOptions: {}, // Options for enhanced animations
      defaultDate: null, // Used when field is blank: actual date,
        // +/-number for offset from today, null for today
      appendText: "", // Display text following the input box, e.g. showing the format
      buttonText: "...", // Text for trigger button
      buttonImage: "", // URL for trigger button image
      buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
      hideIfNoPrevNext: false, // True to hide next/previous month links
        // if not applicable, false to just disable them
      navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
      gotoCurrent: false, // True if today link goes back to current selection instead
      changeMonth: false, // True if month can be selected directly, false if only prev/next
      changeYear: false, // True if year can be selected directly, false if only prev/next
      yearRange: "c-10:c+10", // Range of years to display in drop-down,
        // either relative to today's year (-nn:+nn), relative to currently displayed year
        // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
      showOtherMonths: false, // True to show dates in other months, false to leave blank
      selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
      showWeek: false, // True to show week of the year, false to not show it
      calculateWeek: this.iso8601Week, // How to calculate the week of the year,
        // takes a Date and returns the number of the week for it
      shortYearCutoff: "+10", // Short year values < this are in the current century,
        // > this are in the previous century,
        // string value starting with "+" for current year + value
      minDate: null, // The earliest selectable date, or null for no limit
      maxDate: null, // The latest selectable date, or null for no limit
      duration: "fast", // Duration of display/closure
      beforeShowDay: null, // Function that takes a date and returns an array with
        // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
        // [2] = cell title (optional), e.g. $.datepicker.noWeekends
      beforeShow: null, // Function that takes an input field and
        // returns a set of custom settings for the date picker
      onSelect: null, // Define a callback function when a date is selected
      onChangeMonthYear: null, // Define a callback function when the month or year is changed
      onClose: null, // Define a callback function when the datepicker is closed
      numberOfMonths: 1, // Number of months to show at a time
      showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
      stepMonths: 1, // Number of months to step back/forward
      stepBigMonths: 12, // Number of months to step back/forward for the big links
      altField: "", // Selector for an alternate field to store selected dates into
      altFormat: "", // The date format to use for the alternate field
      constrainInput: true, // The input is constrained by the current date format
      showButtonPanel: false, // True to show button panel, false to not show it
      autoSize: false, // True to size the input for the date format, false to leave as is
      disabled: false // The initial disabled state
    };
    $.extend(this._defaults, this.regional[""]);
    this.dpDiv = bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
  }

  $.extend(Datepicker.prototype, {
    /* Class name added to elements to indicate already configured with a date picker. */
    markerClassName: "hasDatepicker",

    //Keep track of the maximum number of rows displayed (see #7043)
    maxRows: 4,

    // TODO rename to "widget" when switching to widget factory
    _widgetDatepicker: function() {
      return this.dpDiv;
    },

    /* Override the default settings for all instances of the date picker.
     * @param  settings  object - the new settings to use as defaults (anonymous object)
     * @return the manager object
     */
    setDefaults: function(settings) {
      extendRemove(this._defaults, settings || {});
      return this;
    },

    /* Attach the date picker to a jQuery selection.
     * @param  target element - the target input field or division or span
     * @param  settings  object - the new settings to use for this date picker instance (anonymous)
     */
    _attachDatepicker: function(target, settings) {
      var nodeName, inline, inst;
      nodeName = target.nodeName.toLowerCase();
      inline = (nodeName === "div" || nodeName === "span");
      if (!target.id) {
        this.uuid += 1;
        target.id = "dp" + this.uuid;
      }
      inst = this._newInst($(target), inline);
      inst.settings = $.extend({}, settings || {});
      if (nodeName === "input") {
        this._connectDatepicker(target, inst);
      } else if (inline) {
        this._inlineDatepicker(target, inst);
      }
    },

    /* Create a new instance object. */
    _newInst: function(target, inline) {
      var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
      return {id: id, input: target, // associated target
        selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
        drawMonth: 0, drawYear: 0, // month being drawn
        inline: inline, // is datepicker inline or not
        dpDiv: (!inline ? this.dpDiv : // presentation div
        bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
    },

    /* Attach the date picker to an input field. */
    _connectDatepicker: function(target, inst) {
      var input = $(target);
      inst.append = $([]);
      inst.trigger = $([]);
      if (input.hasClass(this.markerClassName)) {
        return;
      }
      this._attachments(input, inst);
      input.addClass(this.markerClassName).keydown(this._doKeyDown).
        keypress(this._doKeyPress).keyup(this._doKeyUp);
      this._autoSize(inst);
      $.data(target, PROP_NAME, inst);
      //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
      if( inst.settings.disabled ) {
        this._disableDatepicker( target );
      }
    },

    /* Make attachments based on settings. */
    _attachments: function(input, inst) {
      var showOn, buttonText, buttonImage,
        appendText = this._get(inst, "appendText"),
        isRTL = this._get(inst, "isRTL");

      if (inst.append) {
        inst.append.remove();
      }
      if (appendText) {
        inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
        input[isRTL ? "before" : "after"](inst.append);
      }

      input.unbind("focus", this._showDatepicker);

      if (inst.trigger) {
        inst.trigger.remove();
      }

      showOn = this._get(inst, "showOn");
      if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
        input.focus(this._showDatepicker);
      }
      if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
        buttonText = this._get(inst, "buttonText");
        buttonImage = this._get(inst, "buttonImage");
        inst.trigger = $(this._get(inst, "buttonImageOnly") ?
          $("<img/>").addClass(this._triggerClass).
            attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
          $("<button type='button'></button>").addClass(this._triggerClass).
            html(!buttonImage ? buttonText : $("<img/>").attr(
            { src:buttonImage, alt:buttonText, title:buttonText })));
        input[isRTL ? "before" : "after"](inst.trigger);
        inst.trigger.click(function() {
          if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
            $.datepicker._hideDatepicker();
          } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
            $.datepicker._hideDatepicker();
            $.datepicker._showDatepicker(input[0]);
          } else {
            $.datepicker._showDatepicker(input[0]);
          }
          return false;
        });
      }
    },

    /* Apply the maximum length for the date format. */
    _autoSize: function(inst) {
      if (this._get(inst, "autoSize") && !inst.inline) {
        var findMax, max, maxI, i,
          date = new Date(2009, 12 - 1, 20), // Ensure double digits
          dateFormat = this._get(inst, "dateFormat");

        if (dateFormat.match(/[DM]/)) {
          findMax = function(names) {
            max = 0;
            maxI = 0;
            for (i = 0; i < names.length; i++) {
              if (names[i].length > max) {
                max = names[i].length;
                maxI = i;
              }
            }
            return maxI;
          };
          date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
            "monthNames" : "monthNamesShort"))));
          date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
            "dayNames" : "dayNamesShort"))) + 20 - date.getDay());
        }
        inst.input.attr("size", this._formatDate(inst, date).length);
      }
    },

    /* Attach an inline date picker to a div. */
    _inlineDatepicker: function(target, inst) {
      var divSpan = $(target);
      if (divSpan.hasClass(this.markerClassName)) {
        return;
      }
      divSpan.addClass(this.markerClassName).append(inst.dpDiv);
      $.data(target, PROP_NAME, inst);
      this._setDate(inst, this._getDefaultDate(inst), true);
      this._updateDatepicker(inst);
      this._updateAlternate(inst);
      //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
      if( inst.settings.disabled ) {
        this._disableDatepicker( target );
      }
      // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
      // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
      inst.dpDiv.css( "display", "block" );
    },

    /* Pop-up the date picker in a "dialog" box.
     * @param  input element - ignored
     * @param  date string or Date - the initial date to display
     * @param  onSelect  function - the function to call when a date is selected
     * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
     * @param  pos int[2] - coordinates for the dialog's position within the screen or
     *          event - with x/y coordinates or
     *          leave empty for default (screen centre)
     * @return the manager object
     */
    _dialogDatepicker: function(input, date, onSelect, settings, pos) {
      var id, browserWidth, browserHeight, scrollX, scrollY,
        inst = this._dialogInst; // internal instance

      if (!inst) {
        this.uuid += 1;
        id = "dp" + this.uuid;
        this._dialogInput = $("<input type='text' id='" + id +
          "' style='position: absolute; top: -100px; width: 0px;'/>");
        this._dialogInput.keydown(this._doKeyDown);
        $("body").append(this._dialogInput);
        inst = this._dialogInst = this._newInst(this._dialogInput, false);
        inst.settings = {};
        $.data(this._dialogInput[0], PROP_NAME, inst);
      }
      extendRemove(inst.settings, settings || {});
      date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
      this._dialogInput.val(date);

      this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
      if (!this._pos) {
        browserWidth = document.documentElement.clientWidth;
        browserHeight = document.documentElement.clientHeight;
        scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
        scrollY = document.documentElement.scrollTop || document.body.scrollTop;
        this._pos = // should use actual width/height below
          [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
      }

      // move input on screen for focus, but hidden behind dialog
      this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
      inst.settings.onSelect = onSelect;
      this._inDialog = true;
      this.dpDiv.addClass(this._dialogClass);
      this._showDatepicker(this._dialogInput[0]);
      if ($.blockUI) {
        $.blockUI(this.dpDiv);
      }
      $.data(this._dialogInput[0], PROP_NAME, inst);
      return this;
    },

    /* Detach a datepicker from its control.
     * @param  target element - the target input field or division or span
     */
    _destroyDatepicker: function(target) {
      var nodeName,
        $target = $(target),
        inst = $.data(target, PROP_NAME);

      if (!$target.hasClass(this.markerClassName)) {
        return;
      }

      nodeName = target.nodeName.toLowerCase();
      $.removeData(target, PROP_NAME);
      if (nodeName === "input") {
        inst.append.remove();
        inst.trigger.remove();
        $target.removeClass(this.markerClassName).
          unbind("focus", this._showDatepicker).
          unbind("keydown", this._doKeyDown).
          unbind("keypress", this._doKeyPress).
          unbind("keyup", this._doKeyUp);
      } else if (nodeName === "div" || nodeName === "span") {
        $target.removeClass(this.markerClassName).empty();
      }
    },

    /* Enable the date picker to a jQuery selection.
     * @param  target element - the target input field or division or span
     */
    _enableDatepicker: function(target) {
      var nodeName, inline,
        $target = $(target),
        inst = $.data(target, PROP_NAME);

      if (!$target.hasClass(this.markerClassName)) {
        return;
      }

      nodeName = target.nodeName.toLowerCase();
      if (nodeName === "input") {
        target.disabled = false;
        inst.trigger.filter("button").
          each(function() { this.disabled = false; }).end().
          filter("img").css({opacity: "1.0", cursor: ""});
      } else if (nodeName === "div" || nodeName === "span") {
        inline = $target.children("." + this._inlineClass);
        inline.children().removeClass("ui-state-disabled");
        inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
          prop("disabled", false);
      }
      this._disabledInputs = $.map(this._disabledInputs,
        function(value) { return (value === target ? null : value); }); // delete entry
    },

    /* Disable the date picker to a jQuery selection.
     * @param  target element - the target input field or division or span
     */
    _disableDatepicker: function(target) {
      var nodeName, inline,
        $target = $(target),
        inst = $.data(target, PROP_NAME);

      if (!$target.hasClass(this.markerClassName)) {
        return;
      }

      nodeName = target.nodeName.toLowerCase();
      if (nodeName === "input") {
        target.disabled = true;
        inst.trigger.filter("button").
          each(function() { this.disabled = true; }).end().
          filter("img").css({opacity: "0.5", cursor: "default"});
      } else if (nodeName === "div" || nodeName === "span") {
        inline = $target.children("." + this._inlineClass);
        inline.children().addClass("ui-state-disabled");
        inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
          prop("disabled", true);
      }
      this._disabledInputs = $.map(this._disabledInputs,
        function(value) { return (value === target ? null : value); }); // delete entry
      this._disabledInputs[this._disabledInputs.length] = target;
    },

    /* Is the first field in a jQuery collection disabled as a datepicker?
     * @param  target element - the target input field or division or span
     * @return boolean - true if disabled, false if enabled
     */
    _isDisabledDatepicker: function(target) {
      if (!target) {
        return false;
      }
      for (var i = 0; i < this._disabledInputs.length; i++) {
        if (this._disabledInputs[i] === target) {
          return true;
        }
      }
      return false;
    },

    /* Retrieve the instance data for the target control.
     * @param  target  element - the target input field or division or span
     * @return  object - the associated instance data
     * @throws  error if a jQuery problem getting data
     */
    _getInst: function(target) {
      try {
        return $.data(target, PROP_NAME);
      }
      catch (err) {
        throw "Missing instance data for this datepicker";
      }
    },

    /* Update or retrieve the settings for a date picker attached to an input field or division.
     * @param  target  element - the target input field or division or span
     * @param  name object - the new settings to update or
     *        string - the name of the setting to change or retrieve,
     *        when retrieving also "all" for all instance settings or
     *        "defaults" for all global defaults
     * @param  value   any - the new value for the setting
     *        (omit if above is an object or to retrieve a value)
     */
    _optionDatepicker: function(target, name, value) {
      var settings, date, minDate, maxDate,
        inst = this._getInst(target);

      if (arguments.length === 2 && typeof name === "string") {
        return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
          (inst ? (name === "all" ? $.extend({}, inst.settings) :
          this._get(inst, name)) : null));
      }

      settings = name || {};
      if (typeof name === "string") {
        settings = {};
        settings[name] = value;
      }

      if (inst) {
        if (this._curInst === inst) {
          this._hideDatepicker();
        }

        date = this._getDateDatepicker(target, true);
        minDate = this._getMinMaxDate(inst, "min");
        maxDate = this._getMinMaxDate(inst, "max");
        extendRemove(inst.settings, settings);
        // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
        if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
          inst.settings.minDate = this._formatDate(inst, minDate);
        }
        if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
          inst.settings.maxDate = this._formatDate(inst, maxDate);
        }
        if ( "disabled" in settings ) {
          if ( settings.disabled ) {
            this._disableDatepicker(target);
          } else {
            this._enableDatepicker(target);
          }
        }
        this._attachments($(target), inst);
        this._autoSize(inst);
        this._setDate(inst, date);
        this._updateAlternate(inst);
        this._updateDatepicker(inst);
      }
    },

    // change method deprecated
    _changeDatepicker: function(target, name, value) {
      this._optionDatepicker(target, name, value);
    },

    /* Redraw the date picker attached to an input field or division.
     * @param  target  element - the target input field or division or span
     */
    _refreshDatepicker: function(target) {
      var inst = this._getInst(target);
      if (inst) {
        this._updateDatepicker(inst);
      }
    },

    /* Set the dates for a jQuery selection.
     * @param  target element - the target input field or division or span
     * @param  date Date - the new date
     */
    _setDateDatepicker: function(target, date) {
      var inst = this._getInst(target);
      if (inst) {
        this._setDate(inst, date);
        this._updateDatepicker(inst);
        this._updateAlternate(inst);
      }
    },

    /* Get the date(s) for the first entry in a jQuery selection.
     * @param  target element - the target input field or division or span
     * @param  noDefault boolean - true if no default date is to be used
     * @return Date - the current date
     */
    _getDateDatepicker: function(target, noDefault) {
      var inst = this._getInst(target);
      if (inst && !inst.inline) {
        this._setDateFromField(inst, noDefault);
      }
      return (inst ? this._getDate(inst) : null);
    },

    /* Handle keystrokes. */
    _doKeyDown: function(event) {
      var onSelect, dateStr, sel,
        inst = $.datepicker._getInst(event.target),
        handled = true,
        isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

      inst._keyEvent = true;
      if ($.datepicker._datepickerShowing) {
        switch (event.keyCode) {
          case 9: $.datepicker._hideDatepicker();
              handled = false;
              break; // hide on tab out
          case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
                    $.datepicker._currentClass + ")", inst.dpDiv);
              if (sel[0]) {
                $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
              }

              onSelect = $.datepicker._get(inst, "onSelect");
              if (onSelect) {
                dateStr = $.datepicker._formatDate(inst);

                // trigger custom callback
                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
              } else {
                $.datepicker._hideDatepicker();
              }

              return false; // don't submit the form
          case 27: $.datepicker._hideDatepicker();
              break; // hide on escape
          case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                -$.datepicker._get(inst, "stepBigMonths") :
                -$.datepicker._get(inst, "stepMonths")), "M");
              break; // previous month/year on page up/+ ctrl
          case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                +$.datepicker._get(inst, "stepBigMonths") :
                +$.datepicker._get(inst, "stepMonths")), "M");
              break; // next month/year on page down/+ ctrl
          case 35: if (event.ctrlKey || event.metaKey) {
                $.datepicker._clearDate(event.target);
              }
              handled = event.ctrlKey || event.metaKey;
              break; // clear on ctrl or command +end
          case 36: if (event.ctrlKey || event.metaKey) {
                $.datepicker._gotoToday(event.target);
              }
              handled = event.ctrlKey || event.metaKey;
              break; // current on ctrl or command +home
          case 37: if (event.ctrlKey || event.metaKey) {
                $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
              }
              handled = event.ctrlKey || event.metaKey;
              // -1 day on ctrl or command +left
              if (event.originalEvent.altKey) {
                $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                  -$.datepicker._get(inst, "stepBigMonths") :
                  -$.datepicker._get(inst, "stepMonths")), "M");
              }
              // next month/year on alt +left on Mac
              break;
          case 38: if (event.ctrlKey || event.metaKey) {
                $.datepicker._adjustDate(event.target, -7, "D");
              }
              handled = event.ctrlKey || event.metaKey;
              break; // -1 week on ctrl or command +up
          case 39: if (event.ctrlKey || event.metaKey) {
                $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
              }
              handled = event.ctrlKey || event.metaKey;
              // +1 day on ctrl or command +right
              if (event.originalEvent.altKey) {
                $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                  +$.datepicker._get(inst, "stepBigMonths") :
                  +$.datepicker._get(inst, "stepMonths")), "M");
              }
              // next month/year on alt +right
              break;
          case 40: if (event.ctrlKey || event.metaKey) {
                $.datepicker._adjustDate(event.target, +7, "D");
              }
              handled = event.ctrlKey || event.metaKey;
              break; // +1 week on ctrl or command +down
          default: handled = false;
        }
      } else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
        $.datepicker._showDatepicker(this);
      } else {
        handled = false;
      }

      if (handled) {
        event.preventDefault();
        event.stopPropagation();
      }
    },

    /* Filter entered characters - based on date format. */
    _doKeyPress: function(event) {
      var chars, chr,
        inst = $.datepicker._getInst(event.target);

      if ($.datepicker._get(inst, "constrainInput")) {
        chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
        chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
        return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
      }
    },

    /* Synchronise manual entry and field/alternate field. */
    _doKeyUp: function(event) {
      var date,
        inst = $.datepicker._getInst(event.target);

      if (inst.input.val() !== inst.lastVal) {
        try {
          date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
            (inst.input ? inst.input.val() : null),
            $.datepicker._getFormatConfig(inst));

          if (date) { // only if valid
            $.datepicker._setDateFromField(inst);
            $.datepicker._updateAlternate(inst);
            $.datepicker._updateDatepicker(inst);
          }
        }
        catch (err) {
        }
      }
      return true;
    },

    /* Pop-up the date picker for a given input field.
     * If false returned from beforeShow event handler do not show.
     * @param  input  element - the input field attached to the date picker or
     *          event - if triggered by focus
     */
    _showDatepicker: function(input) {
      input = input.target || input;
      if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
        input = $("input", input.parentNode)[0];
      }

      if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
        return;
      }

      var inst, beforeShow, beforeShowSettings, isFixed,
        offset, showAnim, duration;

      inst = $.datepicker._getInst(input);
      if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
        $.datepicker._curInst.dpDiv.stop(true, true);
        if ( inst && $.datepicker._datepickerShowing ) {
          $.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
        }
      }

      beforeShow = $.datepicker._get(inst, "beforeShow");
      beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
      if(beforeShowSettings === false){
        return;
      }
      extendRemove(inst.settings, beforeShowSettings);

      inst.lastVal = null;
      $.datepicker._lastInput = input;
      $.datepicker._setDateFromField(inst);

      if ($.datepicker._inDialog) { // hide cursor
        input.value = "";
      }
      if (!$.datepicker._pos) { // position below input
        $.datepicker._pos = $.datepicker._findPos(input);
        $.datepicker._pos[1] += input.offsetHeight; // add the height
      }

      isFixed = false;
      $(input).parents().each(function() {
        isFixed |= $(this).css("position") === "fixed";
        return !isFixed;
      });

      offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
      $.datepicker._pos = null;
      //to avoid flashes on Firefox
      inst.dpDiv.empty();
      // determine sizing offscreen
      inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
      $.datepicker._updateDatepicker(inst);
      // fix width for dynamic number of date pickers
      // and adjust position before showing
      offset = $.datepicker._checkOffset(inst, offset, isFixed);
      inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
        "static" : (isFixed ? "fixed" : "absolute")), display: "none",
        left: offset.left + "px", top: offset.top + "px"});

      if (!inst.inline) {
        showAnim = $.datepicker._get(inst, "showAnim");
        duration = $.datepicker._get(inst, "duration");
        inst.dpDiv.zIndex($(input).zIndex()+1);
        $.datepicker._datepickerShowing = true;

        if ( $.effects && $.effects.effect[ showAnim ] ) {
          inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
        } else {
          inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
        }

        if ( $.datepicker._shouldFocusInput( inst ) ) {
          inst.input.focus();
        }

        $.datepicker._curInst = inst;
      }
    },

    /* Generate the date picker content. */
    _updateDatepicker: function(inst) {
      this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
      instActive = inst; // for delegate hover events
      inst.dpDiv.empty().append(this._generateHTML(inst));
      this._attachHandlers(inst);
      inst.dpDiv.find("." + this._dayOverClass + " a").mouseover();

      var origyearshtml,
        numMonths = this._getNumberOfMonths(inst),
        cols = numMonths[1],
        width = 17;

      inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
      if (cols > 1) {
        inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
      }
      inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
        "Class"]("ui-datepicker-multi");
      inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
        "Class"]("ui-datepicker-rtl");

      if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
        inst.input.focus();
      }

      // deffered render of the years select (to avoid flashes on Firefox)
      if( inst.yearshtml ){
        origyearshtml = inst.yearshtml;
        setTimeout(function(){
          //assure that inst.yearshtml didn't change.
          if( origyearshtml === inst.yearshtml && inst.yearshtml ){
            inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
          }
          origyearshtml = inst.yearshtml = null;
        }, 0);
      }
    },

    // #6694 - don't focus the input if it's already focused
    // this breaks the change event in IE
    // Support: IE and jQuery <1.9
    _shouldFocusInput: function( inst ) {
      return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
    },

    /* Check positioning to remain on screen. */
    _checkOffset: function(inst, offset, isFixed) {
      var dpWidth = inst.dpDiv.outerWidth(),
        dpHeight = inst.dpDiv.outerHeight(),
        inputWidth = inst.input ? inst.input.outerWidth() : 0,
        inputHeight = inst.input ? inst.input.outerHeight() : 0,
        viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
        viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

      offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
      offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
      offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

      // now check if datepicker is showing outside window viewport - move to a better place if so.
      offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
        Math.abs(offset.left + dpWidth - viewWidth) : 0);
      offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
        Math.abs(dpHeight + inputHeight) : 0);

      return offset;
    },

    /* Find an object's position on the screen. */
    _findPos: function(obj) {
      var position,
        inst = this._getInst(obj),
        isRTL = this._get(inst, "isRTL");

      while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
        obj = obj[isRTL ? "previousSibling" : "nextSibling"];
      }

      position = $(obj).offset();
      return [position.left, position.top];
    },

    /* Hide the date picker from view.
     * @param  input  element - the input field attached to the date picker
     */
    _hideDatepicker: function(input) {
      var showAnim, duration, postProcess, onClose,
        inst = this._curInst;

      if (!inst || (input && inst !== $.data(input, PROP_NAME))) {
        return;
      }

      if (this._datepickerShowing) {
        showAnim = this._get(inst, "showAnim");
        duration = this._get(inst, "duration");
        postProcess = function() {
          $.datepicker._tidyDialog(inst);
        };

        // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
        if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
          inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
        } else {
          inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
            (showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
        }

        if (!showAnim) {
          postProcess();
        }
        this._datepickerShowing = false;

        onClose = this._get(inst, "onClose");
        if (onClose) {
          onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
        }

        this._lastInput = null;
        if (this._inDialog) {
          this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
          if ($.blockUI) {
            $.unblockUI();
            $("body").append(this.dpDiv);
          }
        }
        this._inDialog = false;
      }
    },

    /* Tidy up after a dialog display. */
    _tidyDialog: function(inst) {
      inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
    },

    /* Close date picker if clicked elsewhere. */
    _checkExternalClick: function(event) {
      if (!$.datepicker._curInst) {
        return;
      }

      var $target = $(event.target),
        inst = $.datepicker._getInst($target[0]);

      if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
          $target.parents("#" + $.datepicker._mainDivId).length === 0 &&
          !$target.hasClass($.datepicker.markerClassName) &&
          !$target.closest("." + $.datepicker._triggerClass).length &&
          $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
        ( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
          $.datepicker._hideDatepicker();
      }
    },

    /* Adjust one of the date sub-fields. */
    _adjustDate: function(id, offset, period) {
      var target = $(id),
        inst = this._getInst(target[0]);

      if (this._isDisabledDatepicker(target[0])) {
        return;
      }
      this._adjustInstDate(inst, offset +
        (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
        period);
      this._updateDatepicker(inst);
    },

    /* Action for current link. */
    _gotoToday: function(id) {
      var date,
        target = $(id),
        inst = this._getInst(target[0]);

      if (this._get(inst, "gotoCurrent") && inst.currentDay) {
        inst.selectedDay = inst.currentDay;
        inst.drawMonth = inst.selectedMonth = inst.currentMonth;
        inst.drawYear = inst.selectedYear = inst.currentYear;
      } else {
        date = new Date();
        inst.selectedDay = date.getDate();
        inst.drawMonth = inst.selectedMonth = date.getMonth();
        inst.drawYear = inst.selectedYear = date.getFullYear();
      }
      this._notifyChange(inst);
      this._adjustDate(target);
    },

    /* Action for selecting a new month/year. */
    _selectMonthYear: function(id, select, period) {
      var target = $(id),
        inst = this._getInst(target[0]);

      inst["selected" + (period === "M" ? "Month" : "Year")] =
      inst["draw" + (period === "M" ? "Month" : "Year")] =
        parseInt(select.options[select.selectedIndex].value,10);

      this._notifyChange(inst);
      this._adjustDate(target);
    },

    /* Action for selecting a day. */
    _selectDay: function(id, month, year, td) {
      var inst,
        target = $(id);

      if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
        return;
      }

      inst = this._getInst(target[0]);
      inst.selectedDay = inst.currentDay = $("a", td).html();
      inst.selectedMonth = inst.currentMonth = month;
      inst.selectedYear = inst.currentYear = year;
      this._selectDate(id, this._formatDate(inst,
        inst.currentDay, inst.currentMonth, inst.currentYear));
    },

    /* Erase the input field and hide the date picker. */
    _clearDate: function(id) {
      var target = $(id);
      this._selectDate(target, "");
    },

    /* Update the input field with the selected date. */
    _selectDate: function(id, dateStr) {
      var onSelect,
        target = $(id),
        inst = this._getInst(target[0]);

      dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
      if (inst.input) {
        inst.input.val(dateStr);
      }
      this._updateAlternate(inst);

      onSelect = this._get(inst, "onSelect");
      if (onSelect) {
        onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
      } else if (inst.input) {
        inst.input.trigger("change"); // fire the change event
      }

      if (inst.inline){
        this._updateDatepicker(inst);
      } else {
        this._hideDatepicker();
        this._lastInput = inst.input[0];
        if (typeof(inst.input[0]) !== "object") {
          inst.input.focus(); // restore focus
        }
        this._lastInput = null;
      }
    },

    /* Update any alternate field to synchronise with the main field. */
    _updateAlternate: function(inst) {
      var altFormat, date, dateStr,
        altField = this._get(inst, "altField");

      if (altField) { // update alternate field too
        altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
        date = this._getDate(inst);
        dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
        $(altField).each(function() { $(this).val(dateStr); });
      }
    },

    /* Set as beforeShowDay function to prevent selection of weekends.
     * @param  date  Date - the date to customise
     * @return [boolean, string] - is this date selectable?, what is its CSS class?
     */
    noWeekends: function(date) {
      var day = date.getDay();
      return [(day > 0 && day < 6), ""];
    },

    /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
     * @param  date  Date - the date to get the week for
     * @return  number - the number of the week within the year that contains this date
     */
    iso8601Week: function(date) {
      var time,
        checkDate = new Date(date.getTime());

      // Find Thursday of this week starting on Monday
      checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

      time = checkDate.getTime();
      checkDate.setMonth(0); // Compare with Jan 1
      checkDate.setDate(1);
      return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
    },

    /* Parse a string value into a date object.
     * See formatDate below for the possible formats.
     *
     * @param  format string - the expected format of the date
     * @param  value string - the date in the above format
     * @param  settings Object - attributes include:
     *          shortYearCutoff  number - the cutoff year for determining the century (optional)
     *          dayNamesShort string[7] - abbreviated names of the days from Sunday (optional)
     *          dayNames    string[7] - names of the days from Sunday (optional)
     *          monthNamesShort string[12] - abbreviated names of the months (optional)
     *          monthNames    string[12] - names of the months (optional)
     * @return  Date - the extracted date value or null if value is blank
     */
    parseDate: function (format, value, settings) {
      if (format == null || value == null) {
        throw "Invalid arguments";
      }

      value = (typeof value === "object" ? value.toString() : value + "");
      if (value === "") {
        return null;
      }

      var iFormat, dim, extra,
        iValue = 0,
        shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
        shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
          new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
        dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
        dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
        monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
        monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
        year = -1,
        month = -1,
        day = -1,
        doy = -1,
        literal = false,
        date,
        // Check whether a format character is doubled
        lookAhead = function(match) {
          var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
          if (matches) {
            iFormat++;
          }
          return matches;
        },
        // Extract a number from the string value
        getNumber = function(match) {
          var isDoubled = lookAhead(match),
            size = (match === "@" ? 14 : (match === "!" ? 20 :
            (match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
            digits = new RegExp("^\\d{1," + size + "}"),
            num = value.substring(iValue).match(digits);
          if (!num) {
            throw "Missing number at position " + iValue;
          }
          iValue += num[0].length;
          return parseInt(num[0], 10);
        },
        // Extract a name from the string value and convert to an index
        getName = function(match, shortNames, longNames) {
          var index = -1,
            names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
              return [ [k, v] ];
            }).sort(function (a, b) {
              return -(a[1].length - b[1].length);
            });

          $.each(names, function (i, pair) {
            var name = pair[1];
            if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
              index = pair[0];
              iValue += name.length;
              return false;
            }
          });
          if (index !== -1) {
            return index + 1;
          } else {
            throw "Unknown name at position " + iValue;
          }
        },
        // Confirm that a literal character matches the string value
        checkLiteral = function() {
          if (value.charAt(iValue) !== format.charAt(iFormat)) {
            throw "Unexpected literal at position " + iValue;
          }
          iValue++;
        };

      for (iFormat = 0; iFormat < format.length; iFormat++) {
        if (literal) {
          if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
            literal = false;
          } else {
            checkLiteral();
          }
        } else {
          switch (format.charAt(iFormat)) {
            case "d":
              day = getNumber("d");
              break;
            case "D":
              getName("D", dayNamesShort, dayNames);
              break;
            case "o":
              doy = getNumber("o");
              break;
            case "m":
              month = getNumber("m");
              break;
            case "M":
              month = getName("M", monthNamesShort, monthNames);
              break;
            case "y":
              year = getNumber("y");
              break;
            case "@":
              date = new Date(getNumber("@"));
              year = date.getFullYear();
              month = date.getMonth() + 1;
              day = date.getDate();
              break;
            case "!":
              date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
              year = date.getFullYear();
              month = date.getMonth() + 1;
              day = date.getDate();
              break;
            case "'":
              if (lookAhead("'")){
                checkLiteral();
              } else {
                literal = true;
              }
              break;
            default:
              checkLiteral();
          }
        }
      }

      if (iValue < value.length){
        extra = value.substr(iValue);
        if (!/^\s+/.test(extra)) {
          throw "Extra/unparsed characters found in date: " + extra;
        }
      }

      if (year === -1) {
        year = new Date().getFullYear();
      } else if (year < 100) {
        year += new Date().getFullYear() - new Date().getFullYear() % 100 +
          (year <= shortYearCutoff ? 0 : -100);
      }

      if (doy > -1) {
        month = 1;
        day = doy;
        do {
          dim = this._getDaysInMonth(year, month - 1);
          if (day <= dim) {
            break;
          }
          month++;
          day -= dim;
        } while (true);
      }

      date = this._daylightSavingAdjust(new Date(year, month - 1, day));
      if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
        throw "Invalid date"; // E.g. 31/02/00
      }
      return date;
    },

    /* Standard date formats. */
    ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
    COOKIE: "D, dd M yy",
    ISO_8601: "yy-mm-dd",
    RFC_822: "D, d M y",
    RFC_850: "DD, dd-M-y",
    RFC_1036: "D, d M y",
    RFC_1123: "D, d M yy",
    RFC_2822: "D, d M yy",
    RSS: "D, d M y", // RFC 822
    TICKS: "!",
    TIMESTAMP: "@",
    W3C: "yy-mm-dd", // ISO 8601

    _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
      Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

    /* Format a date object into a string value.
     * The format can be combinations of the following:
     * d  - day of month (no leading zero)
     * dd - day of month (two digit)
     * o  - day of year (no leading zeros)
     * oo - day of year (three digit)
     * D  - day name short
     * DD - day name long
     * m  - month of year (no leading zero)
     * mm - month of year (two digit)
     * M  - month name short
     * MM - month name long
     * y  - year (two digit)
     * yy - year (four digit)
     * @ - Unix timestamp (ms since 01/01/1970)
     * ! - Windows ticks (100ns since 01/01/0001)
     * "..." - literal text
     * '' - single quote
     *
     * @param  format string - the desired format of the date
     * @param  date Date - the date value to format
     * @param  settings Object - attributes include:
     *          dayNamesShort string[7] - abbreviated names of the days from Sunday (optional)
     *          dayNames    string[7] - names of the days from Sunday (optional)
     *          monthNamesShort string[12] - abbreviated names of the months (optional)
     *          monthNames    string[12] - names of the months (optional)
     * @return  string - the date in the above format
     */
    formatDate: function (format, date, settings) {
      if (!date) {
        return "";
      }

      var iFormat,
        dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
        dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
        monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
        monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
        // Check whether a format character is doubled
        lookAhead = function(match) {
          var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
          if (matches) {
            iFormat++;
          }
          return matches;
        },
        // Format a number, with leading zero if necessary
        formatNumber = function(match, value, len) {
          var num = "" + value;
          if (lookAhead(match)) {
            while (num.length < len) {
              num = "0" + num;
            }
          }
          return num;
        },
        // Format a name, short or long as requested
        formatName = function(match, value, shortNames, longNames) {
          return (lookAhead(match) ? longNames[value] : shortNames[value]);
        },
        output = "",
        literal = false;

      if (date) {
        for (iFormat = 0; iFormat < format.length; iFormat++) {
          if (literal) {
            if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
              literal = false;
            } else {
              output += format.charAt(iFormat);
            }
          } else {
            switch (format.charAt(iFormat)) {
              case "d":
                output += formatNumber("d", date.getDate(), 2);
                break;
              case "D":
                output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                break;
              case "o":
                output += formatNumber("o",
                  Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                break;
              case "m":
                output += formatNumber("m", date.getMonth() + 1, 2);
                break;
              case "M":
                output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                break;
              case "y":
                output += (lookAhead("y") ? date.getFullYear() :
                  (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
                break;
              case "@":
                output += date.getTime();
                break;
              case "!":
                output += date.getTime() * 10000 + this._ticksTo1970;
                break;
              case "'":
                if (lookAhead("'")) {
                  output += "'";
                } else {
                  literal = true;
                }
                break;
              default:
                output += format.charAt(iFormat);
            }
          }
        }
      }
      return output;
    },

    /* Extract all possible characters from the date format. */
    _possibleChars: function (format) {
      var iFormat,
        chars = "",
        literal = false,
        // Check whether a format character is doubled
        lookAhead = function(match) {
          var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
          if (matches) {
            iFormat++;
          }
          return matches;
        };

      for (iFormat = 0; iFormat < format.length; iFormat++) {
        if (literal) {
          if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
            literal = false;
          } else {
            chars += format.charAt(iFormat);
          }
        } else {
          switch (format.charAt(iFormat)) {
            case "d": case "m": case "y": case "@":
              chars += "0123456789";
              break;
            case "D": case "M":
              return null; // Accept anything
            case "'":
              if (lookAhead("'")) {
                chars += "'";
              } else {
                literal = true;
              }
              break;
            default:
              chars += format.charAt(iFormat);
          }
        }
      }
      return chars;
    },

    /* Get a setting value, defaulting if necessary. */
    _get: function(inst, name) {
      return inst.settings[name] !== undefined ?
        inst.settings[name] : this._defaults[name];
    },

    /* Parse existing date and initialise date picker. */
    _setDateFromField: function(inst, noDefault) {
      if (inst.input.val() === inst.lastVal) {
        return;
      }

      var dateFormat = this._get(inst, "dateFormat"),
        dates = inst.lastVal = inst.input ? inst.input.val() : null,
        defaultDate = this._getDefaultDate(inst),
        date = defaultDate,
        settings = this._getFormatConfig(inst);

      try {
        date = this.parseDate(dateFormat, dates, settings) || defaultDate;
      } catch (event) {
        dates = (noDefault ? "" : dates);
      }
      inst.selectedDay = date.getDate();
      inst.drawMonth = inst.selectedMonth = date.getMonth();
      inst.drawYear = inst.selectedYear = date.getFullYear();
      inst.currentDay = (dates ? date.getDate() : 0);
      inst.currentMonth = (dates ? date.getMonth() : 0);
      inst.currentYear = (dates ? date.getFullYear() : 0);
      this._adjustInstDate(inst);
    },

    /* Retrieve the default date shown on opening. */
    _getDefaultDate: function(inst) {
      return this._restrictMinMax(inst,
        this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
    },

    /* A date may be specified as an exact value or a relative one. */
    _determineDate: function(inst, date, defaultDate) {
      var offsetNumeric = function(offset) {
          var date = new Date();
          date.setDate(date.getDate() + offset);
          return date;
        },
        offsetString = function(offset) {
          try {
            return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
              offset, $.datepicker._getFormatConfig(inst));
          }
          catch (e) {
            // Ignore
          }

          var date = (offset.toLowerCase().match(/^c/) ?
            $.datepicker._getDate(inst) : null) || new Date(),
            year = date.getFullYear(),
            month = date.getMonth(),
            day = date.getDate(),
            pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
            matches = pattern.exec(offset);

          while (matches) {
            switch (matches[2] || "d") {
              case "d" : case "D" :
                day += parseInt(matches[1],10); break;
              case "w" : case "W" :
                day += parseInt(matches[1],10) * 7; break;
              case "m" : case "M" :
                month += parseInt(matches[1],10);
                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                break;
              case "y": case "Y" :
                year += parseInt(matches[1],10);
                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                break;
            }
            matches = pattern.exec(offset);
          }
          return new Date(year, month, day);
        },
        newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
          (typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

      newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
      if (newDate) {
        newDate.setHours(0);
        newDate.setMinutes(0);
        newDate.setSeconds(0);
        newDate.setMilliseconds(0);
      }
      return this._daylightSavingAdjust(newDate);
    },

    /* Handle switch to/from daylight saving.
     * Hours may be non-zero on daylight saving cut-over:
     * > 12 when midnight changeover, but then cannot generate
     * midnight datetime, so jump to 1AM, otherwise reset.
     * @param  date  (Date) the date to check
     * @return  (Date) the corrected date
     */
    _daylightSavingAdjust: function(date) {
      if (!date) {
        return null;
      }
      date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
      return date;
    },

    /* Set the date(s) directly. */
    _setDate: function(inst, date, noChange) {
      var clear = !date,
        origMonth = inst.selectedMonth,
        origYear = inst.selectedYear,
        newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

      inst.selectedDay = inst.currentDay = newDate.getDate();
      inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
      inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
      if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
        this._notifyChange(inst);
      }
      this._adjustInstDate(inst);
      if (inst.input) {
        inst.input.val(clear ? "" : this._formatDate(inst));
      }
    },

    /* Retrieve the date(s) directly. */
    _getDate: function(inst) {
      var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
        this._daylightSavingAdjust(new Date(
        inst.currentYear, inst.currentMonth, inst.currentDay)));
        return startDate;
    },

    /* Attach the onxxx handlers.  These are declared statically so
     * they work with static code transformers like Caja.
     */
    _attachHandlers: function(inst) {
      var stepMonths = this._get(inst, "stepMonths"),
        id = "#" + inst.id.replace( /\\\\/g, "\\" );
      inst.dpDiv.find("[data-handler]").map(function () {
        var handler = {
          prev: function () {
            $.datepicker._adjustDate(id, -stepMonths, "M");
          },
          next: function () {
            $.datepicker._adjustDate(id, +stepMonths, "M");
          },
          hide: function () {
            $.datepicker._hideDatepicker();
          },
          today: function () {
            $.datepicker._gotoToday(id);
          },
          selectDay: function () {
            $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
            return false;
          },
          selectMonth: function () {
            $.datepicker._selectMonthYear(id, this, "M");
            return false;
          },
          selectYear: function () {
            $.datepicker._selectMonthYear(id, this, "Y");
            return false;
          }
        };
        $(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
      });
    },

    /* Generate the HTML for the current state of the date picker. */
    _generateHTML: function(inst) {
      var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
        controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
        monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
        selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
        cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
        printDate, dRow, tbody, daySettings, otherMonth, unselectable,
        tempDate = new Date(),
        today = this._daylightSavingAdjust(
          new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
        isRTL = this._get(inst, "isRTL"),
        showButtonPanel = this._get(inst, "showButtonPanel"),
        hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
        navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
        numMonths = this._getNumberOfMonths(inst),
        showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
        stepMonths = this._get(inst, "stepMonths"),
        isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
        currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
          new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
        minDate = this._getMinMaxDate(inst, "min"),
        maxDate = this._getMinMaxDate(inst, "max"),
        drawMonth = inst.drawMonth - showCurrentAtPos,
        drawYear = inst.drawYear;

      if (drawMonth < 0) {
        drawMonth += 12;
        drawYear--;
      }
      if (maxDate) {
        maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
          maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
        maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
        while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
          drawMonth--;
          if (drawMonth < 0) {
            drawMonth = 11;
            drawYear--;
          }
        }
      }
      inst.drawMonth = drawMonth;
      inst.drawYear = drawYear;

      prevText = this._get(inst, "prevText");
      prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
        this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
        this._getFormatConfig(inst)));

      prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
        "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
        " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
        (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

      nextText = this._get(inst, "nextText");
      nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
        this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
        this._getFormatConfig(inst)));

      next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
        "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
        " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
        (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

      currentText = this._get(inst, "currentText");
      gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
      currentText = (!navigationAsDateFormat ? currentText :
        this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

      controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
        this._get(inst, "closeText") + "</button>" : "");

      buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
        (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
        ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

      firstDay = parseInt(this._get(inst, "firstDay"),10);
      firstDay = (isNaN(firstDay) ? 0 : firstDay);

      showWeek = this._get(inst, "showWeek");
      dayNames = this._get(inst, "dayNames");
      dayNamesMin = this._get(inst, "dayNamesMin");
      monthNames = this._get(inst, "monthNames");
      monthNamesShort = this._get(inst, "monthNamesShort");
      beforeShowDay = this._get(inst, "beforeShowDay");
      showOtherMonths = this._get(inst, "showOtherMonths");
      selectOtherMonths = this._get(inst, "selectOtherMonths");
      defaultDate = this._getDefaultDate(inst);
      html = "";
      dow;
      for (row = 0; row < numMonths[0]; row++) {
        group = "";
        this.maxRows = 4;
        for (col = 0; col < numMonths[1]; col++) {
          selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
          cornerClass = " ui-corner-all";
          calender = "";
          if (isMultiMonth) {
            calender += "<div class='ui-datepicker-group";
            if (numMonths[1] > 1) {
              switch (col) {
                case 0: calender += " ui-datepicker-group-first";
                  cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
                case numMonths[1]-1: calender += " ui-datepicker-group-last";
                  cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
                default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
              }
            }
            calender += "'>";
          }
          calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
            (/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
            (/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
            this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
            row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
            "</div><table class='ui-datepicker-calendar'><thead>" +
            "<tr>";
          thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
          for (dow = 0; dow < 7; dow++) { // days of the week
            day = (dow + firstDay) % 7;
            thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
              "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
          }
          calender += thead + "</tr></thead><tbody>";
          daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
          if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
            inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
          }
          leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
          curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
          numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
          this.maxRows = numRows;
          printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
          for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
            calender += "<tr>";
            tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
              this._get(inst, "calculateWeek")(printDate) + "</td>");
            for (dow = 0; dow < 7; dow++) { // create date picker days
              daySettings = (beforeShowDay ?
                beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
              otherMonth = (printDate.getMonth() !== drawMonth);
              unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
                (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
              tbody += "<td class='" +
                ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
                (otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
                ((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
                (defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
                // or defaultDate is current printedDate and defaultDate is selectedDate
                " " + this._dayOverClass : "") + // highlight selected day
                (unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
                (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
                (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
                (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
                ((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
                (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
                (otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
                (unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
                (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
                (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
                (otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
                "' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
              printDate.setDate(printDate.getDate() + 1);
              printDate = this._daylightSavingAdjust(printDate);
            }
            calender += tbody + "</tr>";
          }
          drawMonth++;
          if (drawMonth > 11) {
            drawMonth = 0;
            drawYear++;
          }
          calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
                ((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
          group += calender;
        }
        html += group;
      }
      html += buttonPanel;
      inst._keyEvent = false;
      return html;
    },

    /* Generate the month and year header. */
    _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
        secondary, monthNames, monthNamesShort) {

      var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
        changeMonth = this._get(inst, "changeMonth"),
        changeYear = this._get(inst, "changeYear"),
        showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
        html = "<div class='ui-datepicker-title'>",
        monthHtml = "";

      // month selection
      if (secondary || !changeMonth) {
        monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
      } else {
        inMinYear = (minDate && minDate.getFullYear() === drawYear);
        inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
        monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
        for ( month = 0; month < 12; month++) {
          if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
            monthHtml += "<option value='" + month + "'" +
              (month === drawMonth ? " selected='selected'" : "") +
              ">" + monthNamesShort[month] + "</option>";
          }
        }
        monthHtml += "</select>";
      }

      if (!showMonthAfterYear) {
        html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
      }

      // year selection
      if ( !inst.yearshtml ) {
        inst.yearshtml = "";
        if (secondary || !changeYear) {
          html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
        } else {
          // determine range of years to display
          years = this._get(inst, "yearRange").split(":");
          thisYear = new Date().getFullYear();
          determineYear = function(value) {
            var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
              (value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
              parseInt(value, 10)));
            return (isNaN(year) ? thisYear : year);
          };
          year = determineYear(years[0]);
          endYear = Math.max(year, determineYear(years[1] || ""));
          year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
          endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
          inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
          for (; year <= endYear; year++) {
            inst.yearshtml += "<option value='" + year + "'" +
              (year === drawYear ? " selected='selected'" : "") +
              ">" + year + "</option>";
          }
          inst.yearshtml += "</select>";

          html += inst.yearshtml;
          inst.yearshtml = null;
        }
      }

      html += this._get(inst, "yearSuffix");
      if (showMonthAfterYear) {
        html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
      }
      html += "</div>"; // Close datepicker_header
      return html;
    },

    /* Adjust one of the date sub-fields. */
    _adjustInstDate: function(inst, offset, period) {
      var year = inst.drawYear + (period === "Y" ? offset : 0),
        month = inst.drawMonth + (period === "M" ? offset : 0),
        day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
        date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

      inst.selectedDay = date.getDate();
      inst.drawMonth = inst.selectedMonth = date.getMonth();
      inst.drawYear = inst.selectedYear = date.getFullYear();
      if (period === "M" || period === "Y") {
        this._notifyChange(inst);
      }
    },

    /* Ensure a date is within any min/max bounds. */
    _restrictMinMax: function(inst, date) {
      var minDate = this._getMinMaxDate(inst, "min"),
        maxDate = this._getMinMaxDate(inst, "max"),
        newDate = (minDate && date < minDate ? minDate : date);
      return (maxDate && newDate > maxDate ? maxDate : newDate);
    },

    /* Notify change of month/year. */
    _notifyChange: function(inst) {
      var onChange = this._get(inst, "onChangeMonthYear");
      if (onChange) {
        onChange.apply((inst.input ? inst.input[0] : null),
          [inst.selectedYear, inst.selectedMonth + 1, inst]);
      }
    },

    /* Determine the number of months to show. */
    _getNumberOfMonths: function(inst) {
      var numMonths = this._get(inst, "numberOfMonths");
      return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
    },

    /* Determine the current maximum date - ensure no time components are set. */
    _getMinMaxDate: function(inst, minMax) {
      return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
    },

    /* Find the number of days in a given month. */
    _getDaysInMonth: function(year, month) {
      return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
    },

    /* Find the day of the week of the first of a month. */
    _getFirstDayOfMonth: function(year, month) {
      return new Date(year, month, 1).getDay();
    },

    /* Determines if we should allow a "next/prev" month display change. */
    _canAdjustMonth: function(inst, offset, curYear, curMonth) {
      var numMonths = this._getNumberOfMonths(inst),
        date = this._daylightSavingAdjust(new Date(curYear,
        curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

      if (offset < 0) {
        date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
      }
      return this._isInRange(inst, date);
    },

    /* Is the given date in the accepted range? */
    _isInRange: function(inst, date) {
      var yearSplit, currentYear,
        minDate = this._getMinMaxDate(inst, "min"),
        maxDate = this._getMinMaxDate(inst, "max"),
        minYear = null,
        maxYear = null,
        years = this._get(inst, "yearRange");
        if (years){
          yearSplit = years.split(":");
          currentYear = new Date().getFullYear();
          minYear = parseInt(yearSplit[0], 10);
          maxYear = parseInt(yearSplit[1], 10);
          if ( yearSplit[0].match(/[+\-].*/) ) {
            minYear += currentYear;
          }
          if ( yearSplit[1].match(/[+\-].*/) ) {
            maxYear += currentYear;
          }
        }

      return ((!minDate || date.getTime() >= minDate.getTime()) &&
        (!maxDate || date.getTime() <= maxDate.getTime()) &&
        (!minYear || date.getFullYear() >= minYear) &&
        (!maxYear || date.getFullYear() <= maxYear));
    },

    /* Provide the configuration settings for formatting/parsing. */
    _getFormatConfig: function(inst) {
      var shortYearCutoff = this._get(inst, "shortYearCutoff");
      shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
        new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
      return {shortYearCutoff: shortYearCutoff,
        dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
        monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
    },

    /* Format the given date for display. */
    _formatDate: function(inst, day, month, year) {
      if (!day) {
        inst.currentDay = inst.selectedDay;
        inst.currentMonth = inst.selectedMonth;
        inst.currentYear = inst.selectedYear;
      }
      var date = (day ? (typeof day === "object" ? day :
        this._daylightSavingAdjust(new Date(year, month, day))) :
        this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
      return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
    }
  });

  /*
   * Bind hover events for datepicker elements.
   * Done via delegate so the binding only occurs once in the lifetime of the parent div.
   * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
   */
  function bindHover(dpDiv) {
    var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
    return dpDiv.delegate(selector, "mouseout", function() {
        $(this).removeClass("ui-state-hover");
        if (this.className.indexOf("ui-datepicker-prev") !== -1) {
          $(this).removeClass("ui-datepicker-prev-hover");
        }
        if (this.className.indexOf("ui-datepicker-next") !== -1) {
          $(this).removeClass("ui-datepicker-next-hover");
        }
      })
      .delegate(selector, "mouseover", function(){
        if (!$.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
          $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
          $(this).addClass("ui-state-hover");
          if (this.className.indexOf("ui-datepicker-prev") !== -1) {
            $(this).addClass("ui-datepicker-prev-hover");
          }
          if (this.className.indexOf("ui-datepicker-next") !== -1) {
            $(this).addClass("ui-datepicker-next-hover");
          }
        }
      });
  }

  /* jQuery extend now ignores nulls! */
  function extendRemove(target, props) {
    $.extend(target, props);
    for (var name in props) {
      if (props[name] == null) {
        target[name] = props[name];
      }
    }
    return target;
  }

  /* Invoke the datepicker functionality.
     @param  options  string - a command, optionally followed by additional parameters or
            Object - settings for attaching new datepicker functionality
     @return  jQuery object */
  $.fn.datepicker = function(options){

    /* Verify an empty collection wasn't passed - Fixes #6976 */
    if ( !this.length ) {
      return this;
    }

    /* Initialise the date picker. */
    if (!$.datepicker.initialized) {
      $(document).mousedown($.datepicker._checkExternalClick);
      $.datepicker.initialized = true;
    }

    /* Append datepicker main container to body if not exist. */
    if ($("#"+$.datepicker._mainDivId).length === 0) {
      $("body").append($.datepicker.dpDiv);
    }

    var otherArgs = Array.prototype.slice.call(arguments, 1);
    if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
      return $.datepicker["_" + options + "Datepicker"].
        apply($.datepicker, [this[0]].concat(otherArgs));
    }
    if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
      return $.datepicker["_" + options + "Datepicker"].
        apply($.datepicker, [this[0]].concat(otherArgs));
    }
    return this.each(function() {
      typeof options === "string" ?
        $.datepicker["_" + options + "Datepicker"].
          apply($.datepicker, [this].concat(otherArgs)) :
        $.datepicker._attachDatepicker(this, options);
    });
  };

  $.datepicker = new Datepicker(); // singleton instance
  $.datepicker.initialized = false;
  $.datepicker.uuid = new Date().getTime();
  $.datepicker.version = "1.10.3";

  })(jQuery);

  (function( $, undefined ) {

  var sizeRelatedOptions = {
      buttons: true,
      height: true,
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true,
      width: true
    },
    resizableRelatedOptions = {
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true
    };

  $.widget( "ui.dialog", {
    version: "1.10.3",
    options: {
      appendTo: "body",
      autoOpen: true,
      buttons: [],
      closeOnEscape: true,
      closeText: "close",
      dialogClass: "",
      draggable: true,
      hide: null,
      height: "auto",
      maxHeight: null,
      maxWidth: null,
      minHeight: 150,
      minWidth: 150,
      modal: false,
      position: {
        my: "center",
        at: "center",
        of: window,
        collision: "fit",
        // Ensure the titlebar is always visible
        using: function( pos ) {
          var topOffset = $( this ).css( pos ).offset().top;
          if ( topOffset < 0 ) {
            $( this ).css( "top", pos.top - topOffset );
          }
        }
      },
      resizable: true,
      show: null,
      title: null,
      width: 300,

      // callbacks
      beforeClose: null,
      close: null,
      drag: null,
      dragStart: null,
      dragStop: null,
      focus: null,
      open: null,
      resize: null,
      resizeStart: null,
      resizeStop: null
    },

    _create: function() {
      this.originalCss = {
        display: this.element[0].style.display,
        width: this.element[0].style.width,
        minHeight: this.element[0].style.minHeight,
        maxHeight: this.element[0].style.maxHeight,
        height: this.element[0].style.height
      };
      this.originalPosition = {
        parent: this.element.parent(),
        index: this.element.parent().children().index( this.element )
      };
      this.originalTitle = this.element.attr("title");
      this.options.title = this.options.title || this.originalTitle;

      this._createWrapper();

      this.element
        .show()
        .removeAttr("title")
        .addClass("ui-dialog-content ui-widget-content")
        .appendTo( this.uiDialog );

      this._createTitlebar();
      this._createButtonPane();

      if ( this.options.draggable && $.fn.draggable ) {
        this._makeDraggable();
      }
      if ( this.options.resizable && $.fn.resizable ) {
        this._makeResizable();
      }

      this._isOpen = false;
    },

    _init: function() {
      if ( this.options.autoOpen ) {
        this.open();
      }
    },

    _appendTo: function() {
      var element = this.options.appendTo;
      if ( element && (element.jquery || element.nodeType) ) {
        return $( element );
      }
      return this.document.find( element || "body" ).eq( 0 );
    },

    _destroy: function() {
      var next,
        originalPosition = this.originalPosition;

      this._destroyOverlay();

      this.element
        .removeUniqueId()
        .removeClass("ui-dialog-content ui-widget-content")
        .css( this.originalCss )
        // Without detaching first, the following becomes really slow
        .detach();

      this.uiDialog.stop( true, true ).remove();

      if ( this.originalTitle ) {
        this.element.attr( "title", this.originalTitle );
      }

      next = originalPosition.parent.children().eq( originalPosition.index );
      // Don't try to place the dialog next to itself (#8613)
      if ( next.length && next[0] !== this.element[0] ) {
        next.before( this.element );
      } else {
        originalPosition.parent.append( this.element );
      }
    },

    widget: function() {
      return this.uiDialog;
    },

    disable: $.noop,
    enable: $.noop,

    close: function( event ) {
      var that = this;

      if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
        return;
      }

      this._isOpen = false;
      this._destroyOverlay();

      if ( !this.opener.filter(":focusable").focus().length ) {
        // Hiding a focused element doesn't trigger blur in WebKit
        // so in case we have nothing to focus on, explicitly blur the active element
        // https://bugs.webkit.org/show_bug.cgi?id=47182
        $( this.document[0].activeElement ).blur();
      }

      this._hide( this.uiDialog, this.options.hide, function() {
        that._trigger( "close", event );
      });
    },

    isOpen: function() {
      return this._isOpen;
    },

    moveToTop: function() {
      this._moveToTop();
    },

    _moveToTop: function( event, silent ) {
      var moved = !!this.uiDialog.nextAll(":visible").insertBefore( this.uiDialog ).length;
      if ( moved && !silent ) {
        this._trigger( "focus", event );
      }
      return moved;
    },

    open: function() {
      var that = this;
      if ( this._isOpen ) {
        if ( this._moveToTop() ) {
          this._focusTabbable();
        }
        return;
      }

      this._isOpen = true;
      this.opener = $( this.document[0].activeElement );

      this._size();
      this._position();
      this._createOverlay();
      this._moveToTop( null, true );
      this._show( this.uiDialog, this.options.show, function() {
        that._focusTabbable();
        that._trigger("focus");
      });

      this._trigger("open");
    },

    _focusTabbable: function() {
      // Set focus to the first match:
      // 1. First element inside the dialog matching [autofocus]
      // 2. Tabbable element inside the content element
      // 3. Tabbable element inside the buttonpane
      // 4. The close button
      // 5. The dialog itself
      var hasFocus = this.element.find("[autofocus]");
      if ( !hasFocus.length ) {
        hasFocus = this.element.find(":tabbable");
      }
      if ( !hasFocus.length ) {
        hasFocus = this.uiDialogButtonPane.find(":tabbable");
      }
      if ( !hasFocus.length ) {
        hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
      }
      if ( !hasFocus.length ) {
        hasFocus = this.uiDialog;
      }
      hasFocus.eq( 0 ).focus();
    },

    _keepFocus: function( event ) {
      function checkFocus() {
        var activeElement = this.document[0].activeElement,
          isActive = this.uiDialog[0] === activeElement ||
            $.contains( this.uiDialog[0], activeElement );
        if ( !isActive ) {
          this._focusTabbable();
        }
      }
      event.preventDefault();
      checkFocus.call( this );
      // support: IE
      // IE <= 8 doesn't prevent moving focus even with event.preventDefault()
      // so we check again later
      this._delay( checkFocus );
    },

    _createWrapper: function() {
      this.uiDialog = $("<div>")
        .addClass( "ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " +
          this.options.dialogClass )
        .hide()
        .attr({
          // Setting tabIndex makes the div focusable
          tabIndex: -1,
          role: "dialog"
        })
        .appendTo( this._appendTo() );

      this._on( this.uiDialog, {
        keydown: function( event ) {
          if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
              event.keyCode === $.ui.keyCode.ESCAPE ) {
            event.preventDefault();
            this.close( event );
            return;
          }

          // prevent tabbing out of dialogs
          if ( event.keyCode !== $.ui.keyCode.TAB ) {
            return;
          }
          var tabbables = this.uiDialog.find(":tabbable"),
            first = tabbables.filter(":first"),
            last  = tabbables.filter(":last");

          if ( ( event.target === last[0] || event.target === this.uiDialog[0] ) && !event.shiftKey ) {
            first.focus( 1 );
            event.preventDefault();
          } else if ( ( event.target === first[0] || event.target === this.uiDialog[0] ) && event.shiftKey ) {
            last.focus( 1 );
            event.preventDefault();
          }
        },
        mousedown: function( event ) {
          if ( this._moveToTop( event ) ) {
            this._focusTabbable();
          }
        }
      });

      // We assume that any existing aria-describedby attribute means
      // that the dialog content is marked up properly
      // otherwise we brute force the content as the description
      if ( !this.element.find("[aria-describedby]").length ) {
        this.uiDialog.attr({
          "aria-describedby": this.element.uniqueId().attr("id")
        });
      }
    },

    _createTitlebar: function() {
      var uiDialogTitle;

      this.uiDialogTitlebar = $("<div>")
        .addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix")
        .prependTo( this.uiDialog );
      this._on( this.uiDialogTitlebar, {
        mousedown: function( event ) {
          // Don't prevent click on close button (#8838)
          // Focusing a dialog that is partially scrolled out of view
          // causes the browser to scroll it into view, preventing the click event
          if ( !$( event.target ).closest(".ui-dialog-titlebar-close") ) {
            // Dialog isn't getting focus when dragging (#8063)
            this.uiDialog.focus();
          }
        }
      });

      this.uiDialogTitlebarClose = $("<button></button>")
        .button({
          label: this.options.closeText,
          icons: {
            primary: "ui-icon-closethick"
          },
          text: false
        })
        .addClass("ui-dialog-titlebar-close")
        .appendTo( this.uiDialogTitlebar );
      this._on( this.uiDialogTitlebarClose, {
        click: function( event ) {
          event.preventDefault();
          this.close( event );
        }
      });

      uiDialogTitle = $("<span>")
        .uniqueId()
        .addClass("ui-dialog-title")
        .prependTo( this.uiDialogTitlebar );
      this._title( uiDialogTitle );

      this.uiDialog.attr({
        "aria-labelledby": uiDialogTitle.attr("id")
      });
    },

    _title: function( title ) {
      if ( !this.options.title ) {
        title.html("&#160;");
      }
      title.text( this.options.title );
    },

    _createButtonPane: function() {
      this.uiDialogButtonPane = $("<div>")
        .addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");

      this.uiButtonSet = $("<div>")
        .addClass("ui-dialog-buttonset")
        .appendTo( this.uiDialogButtonPane );

      this._createButtons();
    },

    _createButtons: function() {
      var that = this,
        buttons = this.options.buttons;

      // if we already have a button pane, remove it
      this.uiDialogButtonPane.remove();
      this.uiButtonSet.empty();

      if ( $.isEmptyObject( buttons ) || ($.isArray( buttons ) && !buttons.length) ) {
        this.uiDialog.removeClass("ui-dialog-buttons");
        return;
      }

      $.each( buttons, function( name, props ) {
        var click, buttonOptions;
        props = $.isFunction( props ) ?
          { click: props, text: name } :
          props;
        // Default to a non-submitting button
        props = $.extend( { type: "button" }, props );
        // Change the context for the click callback to be the main element
        click = props.click;
        props.click = function() {
          click.apply( that.element[0], arguments );
        };
        buttonOptions = {
          icons: props.icons,
          text: props.showText
        };
        delete props.icons;
        delete props.showText;
        $( "<button></button>", props )
          .button( buttonOptions )
          .appendTo( that.uiButtonSet );
      });
      this.uiDialog.addClass("ui-dialog-buttons");
      this.uiDialogButtonPane.appendTo( this.uiDialog );
    },

    _makeDraggable: function() {
      var that = this,
        options = this.options;

      function filteredUi( ui ) {
        return {
          position: ui.position,
          offset: ui.offset
        };
      }

      this.uiDialog.draggable({
        cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
        handle: ".ui-dialog-titlebar",
        containment: "document",
        start: function( event, ui ) {
          $( this ).addClass("ui-dialog-dragging");
          that._blockFrames();
          that._trigger( "dragStart", event, filteredUi( ui ) );
        },
        drag: function( event, ui ) {
          that._trigger( "drag", event, filteredUi( ui ) );
        },
        stop: function( event, ui ) {
          options.position = [
            ui.position.left - that.document.scrollLeft(),
            ui.position.top - that.document.scrollTop()
          ];
          $( this ).removeClass("ui-dialog-dragging");
          that._unblockFrames();
          that._trigger( "dragStop", event, filteredUi( ui ) );
        }
      });
    },

    _makeResizable: function() {
      var that = this,
        options = this.options,
        handles = options.resizable,
        // .ui-resizable has position: relative defined in the stylesheet
        // but dialogs have to use absolute or fixed positioning
        position = this.uiDialog.css("position"),
        resizeHandles = typeof handles === "string" ?
          handles :
          "n,e,s,w,se,sw,ne,nw";

      function filteredUi( ui ) {
        return {
          originalPosition: ui.originalPosition,
          originalSize: ui.originalSize,
          position: ui.position,
          size: ui.size
        };
      }

      this.uiDialog.resizable({
        cancel: ".ui-dialog-content",
        containment: "document",
        alsoResize: this.element,
        maxWidth: options.maxWidth,
        maxHeight: options.maxHeight,
        minWidth: options.minWidth,
        minHeight: this._minHeight(),
        handles: resizeHandles,
        start: function( event, ui ) {
          $( this ).addClass("ui-dialog-resizing");
          that._blockFrames();
          that._trigger( "resizeStart", event, filteredUi( ui ) );
        },
        resize: function( event, ui ) {
          that._trigger( "resize", event, filteredUi( ui ) );
        },
        stop: function( event, ui ) {
          options.height = $( this ).height();
          options.width = $( this ).width();
          $( this ).removeClass("ui-dialog-resizing");
          that._unblockFrames();
          that._trigger( "resizeStop", event, filteredUi( ui ) );
        }
      })
      .css( "position", position );
    },

    _minHeight: function() {
      var options = this.options;

      return options.height === "auto" ?
        options.minHeight :
        Math.min( options.minHeight, options.height );
    },

    _position: function() {
      // Need to show the dialog to get the actual offset in the position plugin
      var isVisible = this.uiDialog.is(":visible");
      if ( !isVisible ) {
        this.uiDialog.show();
      }
      this.uiDialog.position( this.options.position );
      if ( !isVisible ) {
        this.uiDialog.hide();
      }
    },

    _setOptions: function( options ) {
      var that = this,
        resize = false,
        resizableOptions = {};

      $.each( options, function( key, value ) {
        that._setOption( key, value );

        if ( key in sizeRelatedOptions ) {
          resize = true;
        }
        if ( key in resizableRelatedOptions ) {
          resizableOptions[ key ] = value;
        }
      });

      if ( resize ) {
        this._size();
        this._position();
      }
      if ( this.uiDialog.is(":data(ui-resizable)") ) {
        this.uiDialog.resizable( "option", resizableOptions );
      }
    },

    _setOption: function( key, value ) {
      /*jshint maxcomplexity:15*/
      var isDraggable, isResizable,
        uiDialog = this.uiDialog;

      if ( key === "dialogClass" ) {
        uiDialog
          .removeClass( this.options.dialogClass )
          .addClass( value );
      }

      if ( key === "disabled" ) {
        return;
      }

      this._super( key, value );

      if ( key === "appendTo" ) {
        this.uiDialog.appendTo( this._appendTo() );
      }

      if ( key === "buttons" ) {
        this._createButtons();
      }

      if ( key === "closeText" ) {
        this.uiDialogTitlebarClose.button({
          // Ensure that we always pass a string
          label: "" + value
        });
      }

      if ( key === "draggable" ) {
        isDraggable = uiDialog.is(":data(ui-draggable)");
        if ( isDraggable && !value ) {
          uiDialog.draggable("destroy");
        }

        if ( !isDraggable && value ) {
          this._makeDraggable();
        }
      }

      if ( key === "position" ) {
        this._position();
      }

      if ( key === "resizable" ) {
        // currently resizable, becoming non-resizable
        isResizable = uiDialog.is(":data(ui-resizable)");
        if ( isResizable && !value ) {
          uiDialog.resizable("destroy");
        }

        // currently resizable, changing handles
        if ( isResizable && typeof value === "string" ) {
          uiDialog.resizable( "option", "handles", value );
        }

        // currently non-resizable, becoming resizable
        if ( !isResizable && value !== false ) {
          this._makeResizable();
        }
      }

      if ( key === "title" ) {
        this._title( this.uiDialogTitlebar.find(".ui-dialog-title") );
      }
    },

    _size: function() {
      // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
      // divs will both have width and height set, so we need to reset them
      var nonContentHeight, minContentHeight, maxContentHeight,
        options = this.options;

      // Reset content sizing
      this.element.show().css({
        width: "auto",
        minHeight: 0,
        maxHeight: "none",
        height: 0
      });

      if ( options.minWidth > options.width ) {
        options.width = options.minWidth;
      }

      // reset wrapper sizing
      // determine the height of all the non-content elements
      nonContentHeight = this.uiDialog.css({
          height: "auto",
          width: options.width
        })
        .outerHeight();
      minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
      maxContentHeight = typeof options.maxHeight === "number" ?
        Math.max( 0, options.maxHeight - nonContentHeight ) :
        "none";

      if ( options.height === "auto" ) {
        this.element.css({
          minHeight: minContentHeight,
          maxHeight: maxContentHeight,
          height: "auto"
        });
      } else {
        this.element.height( Math.max( 0, options.height - nonContentHeight ) );
      }

      if (this.uiDialog.is(":data(ui-resizable)") ) {
        this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
      }
    },

    _blockFrames: function() {
      this.iframeBlocks = this.document.find( "iframe" ).map(function() {
        var iframe = $( this );

        return $( "<div>" )
          .css({
            position: "absolute",
            width: iframe.outerWidth(),
            height: iframe.outerHeight()
          })
          .appendTo( iframe.parent() )
          .offset( iframe.offset() )[0];
      });
    },

    _unblockFrames: function() {
      if ( this.iframeBlocks ) {
        this.iframeBlocks.remove();
        delete this.iframeBlocks;
      }
    },

    _allowInteraction: function( event ) {
      if ( $( event.target ).closest(".ui-dialog").length ) {
        return true;
      }

      // TODO: Remove hack when datepicker implements
      // the .ui-front logic (#8989)
      return !!$( event.target ).closest(".ui-datepicker").length;
    },

    _createOverlay: function() {
      if ( !this.options.modal ) {
        return;
      }

      var that = this,
        widgetFullName = this.widgetFullName;
      if ( !$.ui.dialog.overlayInstances ) {
        // Prevent use of anchors and inputs.
        // We use a delay in case the overlay is created from an
        // event that we're going to be cancelling. (#2804)
        this._delay(function() {
          // Handle .dialog().dialog("close") (#4065)
          if ( $.ui.dialog.overlayInstances ) {
            this.document.bind( "focusin.dialog", function( event ) {
              if ( !that._allowInteraction( event ) ) {
                event.preventDefault();
                $(".ui-dialog:visible:last .ui-dialog-content")
                  .data( widgetFullName )._focusTabbable();
              }
            });
          }
        });
      }

      this.overlay = $("<div>")
        .addClass("ui-widget-overlay ui-front")
        .appendTo( this._appendTo() );
      this._on( this.overlay, {
        mousedown: "_keepFocus"
      });
      $.ui.dialog.overlayInstances++;
    },

    _destroyOverlay: function() {
      if ( !this.options.modal ) {
        return;
      }

      if ( this.overlay ) {
        $.ui.dialog.overlayInstances--;

        if ( !$.ui.dialog.overlayInstances ) {
          this.document.unbind( "focusin.dialog" );
        }
        this.overlay.remove();
        this.overlay = null;
      }
    }
  });

  $.ui.dialog.overlayInstances = 0;

  // DEPRECATED
  if ( $.uiBackCompat !== false ) {
    // position option with array notation
    // just override with old implementation
    $.widget( "ui.dialog", $.ui.dialog, {
      _position: function() {
        var position = this.options.position,
          myAt = [],
          offset = [ 0, 0 ],
          isVisible;

        if ( position ) {
          if ( typeof position === "string" || (typeof position === "object" && "0" in position ) ) {
            myAt = position.split ? position.split(" ") : [ position[0], position[1] ];
            if ( myAt.length === 1 ) {
              myAt[1] = myAt[0];
            }

            $.each( [ "left", "top" ], function( i, offsetPosition ) {
              if ( +myAt[ i ] === myAt[ i ] ) {
                offset[ i ] = myAt[ i ];
                myAt[ i ] = offsetPosition;
              }
            });

            position = {
              my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " +
                myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
              at: myAt.join(" ")
            };
          }

          position = $.extend( {}, $.ui.dialog.prototype.options.position, position );
        } else {
          position = $.ui.dialog.prototype.options.position;
        }

        // need to show the dialog to get the actual offset in the position plugin
        isVisible = this.uiDialog.is(":visible");
        if ( !isVisible ) {
          this.uiDialog.show();
        }
        this.uiDialog.position( position );
        if ( !isVisible ) {
          this.uiDialog.hide();
        }
      }
    });
  }

  }( jQuery ) );

  (function( $, undefined ) {

  var rvertical = /up|down|vertical/,
    rpositivemotion = /up|left|vertical|horizontal/;

  $.effects.effect.blind = function( o, done ) {
    // Create element
    var el = $( this ),
      props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
      mode = $.effects.setMode( el, o.mode || "hide" ),
      direction = o.direction || "up",
      vertical = rvertical.test( direction ),
      ref = vertical ? "height" : "width",
      ref2 = vertical ? "top" : "left",
      motion = rpositivemotion.test( direction ),
      animation = {},
      show = mode === "show",
      wrapper, distance, margin;

    // if already wrapped, the wrapper's properties are my property. #6245
    if ( el.parent().is( ".ui-effects-wrapper" ) ) {
      $.effects.save( el.parent(), props );
    } else {
      $.effects.save( el, props );
    }
    el.show();
    wrapper = $.effects.createWrapper( el ).css({
      overflow: "hidden"
    });

    distance = wrapper[ ref ]();
    margin = parseFloat( wrapper.css( ref2 ) ) || 0;

    animation[ ref ] = show ? distance : 0;
    if ( !motion ) {
      el
        .css( vertical ? "bottom" : "right", 0 )
        .css( vertical ? "top" : "left", "auto" )
        .css({ position: "absolute" });

      animation[ ref2 ] = show ? margin : distance + margin;
    }

    // start at 0 if we are showing
    if ( show ) {
      wrapper.css( ref, 0 );
      if ( ! motion ) {
        wrapper.css( ref2, margin + distance );
      }
    }

    // Animate
    wrapper.animate( animation, {
      duration: o.duration,
      easing: o.easing,
      queue: false,
      complete: function() {
        if ( mode === "hide" ) {
          el.hide();
        }
        $.effects.restore( el, props );
        $.effects.removeWrapper( el );
        done();
      }
    });

  };

  })(jQuery);

  (function( $, undefined ) {

  $.effects.effect.bounce = function( o, done ) {
    var el = $( this ),
      props = [ "position", "top", "bottom", "left", "right", "height", "width" ],

      // defaults:
      mode = $.effects.setMode( el, o.mode || "effect" ),
      hide = mode === "hide",
      show = mode === "show",
      direction = o.direction || "up",
      distance = o.distance,
      times = o.times || 5,

      // number of internal animations
      anims = times * 2 + ( show || hide ? 1 : 0 ),
      speed = o.duration / anims,
      easing = o.easing,

      // utility:
      ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
      motion = ( direction === "up" || direction === "left" ),
      i,
      upAnim,
      downAnim,

      // we will need to re-assemble the queue to stack our animations in place
      queue = el.queue(),
      queuelen = queue.length;

    // Avoid touching opacity to prevent clearType and PNG issues in IE
    if ( show || hide ) {
      props.push( "opacity" );
    }

    $.effects.save( el, props );
    el.show();
    $.effects.createWrapper( el ); // Create Wrapper

    // default distance for the BIGGEST bounce is the outer Distance / 3
    if ( !distance ) {
      distance = el[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
    }

    if ( show ) {
      downAnim = { opacity: 1 };
      downAnim[ ref ] = 0;

      // if we are showing, force opacity 0 and set the initial position
      // then do the "first" animation
      el.css( "opacity", 0 )
        .css( ref, motion ? -distance * 2 : distance * 2 )
        .animate( downAnim, speed, easing );
    }

    // start at the smallest distance if we are hiding
    if ( hide ) {
      distance = distance / Math.pow( 2, times - 1 );
    }

    downAnim = {};
    downAnim[ ref ] = 0;
    // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
    for ( i = 0; i < times; i++ ) {
      upAnim = {};
      upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

      el.animate( upAnim, speed, easing )
        .animate( downAnim, speed, easing );

      distance = hide ? distance * 2 : distance / 2;
    }

    // Last Bounce when Hiding
    if ( hide ) {
      upAnim = { opacity: 0 };
      upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

      el.animate( upAnim, speed, easing );
    }

    el.queue(function() {
      if ( hide ) {
        el.hide();
      }
      $.effects.restore( el, props );
      $.effects.removeWrapper( el );
      done();
    });

    // inject all the animations we just queued to be first in line (after "inprogress")
    if ( queuelen > 1) {
      queue.splice.apply( queue,
        [ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
    }
    el.dequeue();

  };

  })(jQuery);

  (function( $, undefined ) {

  $.effects.effect.clip = function( o, done ) {
    // Create element
    var el = $( this ),
      props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
      mode = $.effects.setMode( el, o.mode || "hide" ),
      show = mode === "show",
      direction = o.direction || "vertical",
      vert = direction === "vertical",
      size = vert ? "height" : "width",
      position = vert ? "top" : "left",
      animation = {},
      wrapper, animate, distance;

    // Save & Show
    $.effects.save( el, props );
    el.show();

    // Create Wrapper
    wrapper = $.effects.createWrapper( el ).css({
      overflow: "hidden"
    });
    animate = ( el[0].tagName === "IMG" ) ? wrapper : el;
    distance = animate[ size ]();

    // Shift
    if ( show ) {
      animate.css( size, 0 );
      animate.css( position, distance / 2 );
    }

    // Create Animation Object:
    animation[ size ] = show ? distance : 0;
    animation[ position ] = show ? 0 : distance / 2;

    // Animate
    animate.animate( animation, {
      queue: false,
      duration: o.duration,
      easing: o.easing,
      complete: function() {
        if ( !show ) {
          el.hide();
        }
        $.effects.restore( el, props );
        $.effects.removeWrapper( el );
        done();
      }
    });

  };

  })(jQuery);

  (function( $, undefined ) {

  $.effects.effect.drop = function( o, done ) {

    var el = $( this ),
      props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ],
      mode = $.effects.setMode( el, o.mode || "hide" ),
      show = mode === "show",
      direction = o.direction || "left",
      ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
      motion = ( direction === "up" || direction === "left" ) ? "pos" : "neg",
      animation = {
        opacity: show ? 1 : 0
      },
      distance;

    // Adjust
    $.effects.save( el, props );
    el.show();
    $.effects.createWrapper( el );

    distance = o.distance || el[ ref === "top" ? "outerHeight": "outerWidth" ]( true ) / 2;

    if ( show ) {
      el
        .css( "opacity", 0 )
        .css( ref, motion === "pos" ? -distance : distance );
    }

    // Animation
    animation[ ref ] = ( show ?
      ( motion === "pos" ? "+=" : "-=" ) :
      ( motion === "pos" ? "-=" : "+=" ) ) +
      distance;

    // Animate
    el.animate( animation, {
      queue: false,
      duration: o.duration,
      easing: o.easing,
      complete: function() {
        if ( mode === "hide" ) {
          el.hide();
        }
        $.effects.restore( el, props );
        $.effects.removeWrapper( el );
        done();
      }
    });
  };

  })(jQuery);

  (function( $, undefined ) {

  $.effects.effect.explode = function( o, done ) {

    var rows = o.pieces ? Math.round( Math.sqrt( o.pieces ) ) : 3,
      cells = rows,
      el = $( this ),
      mode = $.effects.setMode( el, o.mode || "hide" ),
      show = mode === "show",

      // show and then visibility:hidden the element before calculating offset
      offset = el.show().css( "visibility", "hidden" ).offset(),

      // width and height of a piece
      width = Math.ceil( el.outerWidth() / cells ),
      height = Math.ceil( el.outerHeight() / rows ),
      pieces = [],

      // loop
      i, j, left, top, mx, my;

    // children animate complete:
    function childComplete() {
      pieces.push( this );
      if ( pieces.length === rows * cells ) {
        animComplete();
      }
    }

    // clone the element for each row and cell.
    for( i = 0; i < rows ; i++ ) { // ===>
      top = offset.top + i * height;
      my = i - ( rows - 1 ) / 2 ;

      for( j = 0; j < cells ; j++ ) { // |||
        left = offset.left + j * width;
        mx = j - ( cells - 1 ) / 2 ;

        // Create a clone of the now hidden main element that will be absolute positioned
        // within a wrapper div off the -left and -top equal to size of our pieces
        el
          .clone()
          .appendTo( "body" )
          .wrap( "<div></div>" )
          .css({
            position: "absolute",
            visibility: "visible",
            left: -j * width,
            top: -i * height
          })

        // select the wrapper - make it overflow: hidden and absolute positioned based on
        // where the original was located +left and +top equal to the size of pieces
          .parent()
          .addClass( "ui-effects-explode" )
          .css({
            position: "absolute",
            overflow: "hidden",
            width: width,
            height: height,
            left: left + ( show ? mx * width : 0 ),
            top: top + ( show ? my * height : 0 ),
            opacity: show ? 0 : 1
          }).animate({
            left: left + ( show ? 0 : mx * width ),
            top: top + ( show ? 0 : my * height ),
            opacity: show ? 1 : 0
          }, o.duration || 500, o.easing, childComplete );
      }
    }

    function animComplete() {
      el.css({
        visibility: "visible"
      });
      $( pieces ).remove();
      if ( !show ) {
        el.hide();
      }
      done();
    }
  };

  })(jQuery);

  (function( $, undefined ) {

  $.effects.effect.fade = function( o, done ) {
    var el = $( this ),
      mode = $.effects.setMode( el, o.mode || "toggle" );

    el.animate({
      opacity: mode
    }, {
      queue: false,
      duration: o.duration,
      easing: o.easing,
      complete: done
    });
  };

  })( jQuery );

  (function( $, undefined ) {

  $.effects.effect.fold = function( o, done ) {

    // Create element
    var el = $( this ),
      props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
      mode = $.effects.setMode( el, o.mode || "hide" ),
      show = mode === "show",
      hide = mode === "hide",
      size = o.size || 15,
      percent = /([0-9]+)%/.exec( size ),
      horizFirst = !!o.horizFirst,
      widthFirst = show !== horizFirst,
      ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ],
      duration = o.duration / 2,
      wrapper, distance,
      animation1 = {},
      animation2 = {};

    $.effects.save( el, props );
    el.show();

    // Create Wrapper
    wrapper = $.effects.createWrapper( el ).css({
      overflow: "hidden"
    });
    distance = widthFirst ?
      [ wrapper.width(), wrapper.height() ] :
      [ wrapper.height(), wrapper.width() ];

    if ( percent ) {
      size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
    }
    if ( show ) {
      wrapper.css( horizFirst ? {
        height: 0,
        width: size
      } : {
        height: size,
        width: 0
      });
    }

    // Animation
    animation1[ ref[ 0 ] ] = show ? distance[ 0 ] : size;
    animation2[ ref[ 1 ] ] = show ? distance[ 1 ] : 0;

    // Animate
    wrapper
      .animate( animation1, duration, o.easing )
      .animate( animation2, duration, o.easing, function() {
        if ( hide ) {
          el.hide();
        }
        $.effects.restore( el, props );
        $.effects.removeWrapper( el );
        done();
      });

  };

  })(jQuery);

  (function( $, undefined ) {

  $.effects.effect.highlight = function( o, done ) {
    var elem = $( this ),
      props = [ "backgroundImage", "backgroundColor", "opacity" ],
      mode = $.effects.setMode( elem, o.mode || "show" ),
      animation = {
        backgroundColor: elem.css( "backgroundColor" )
      };

    if (mode === "hide") {
      animation.opacity = 0;
    }

    $.effects.save( elem, props );

    elem
      .show()
      .css({
        backgroundImage: "none",
        backgroundColor: o.color || "#ffff99"
      })
      .animate( animation, {
        queue: false,
        duration: o.duration,
        easing: o.easing,
        complete: function() {
          if ( mode === "hide" ) {
            elem.hide();
          }
          $.effects.restore( elem, props );
          done();
        }
      });
  };

  })(jQuery);

  (function( $, undefined ) {

  $.effects.effect.pulsate = function( o, done ) {
    var elem = $( this ),
      mode = $.effects.setMode( elem, o.mode || "show" ),
      show = mode === "show",
      hide = mode === "hide",
      showhide = ( show || mode === "hide" ),

      // showing or hiding leaves of the "last" animation
      anims = ( ( o.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
      duration = o.duration / anims,
      animateTo = 0,
      queue = elem.queue(),
      queuelen = queue.length,
      i;

    if ( show || !elem.is(":visible")) {
      elem.css( "opacity", 0 ).show();
      animateTo = 1;
    }

    // anims - 1 opacity "toggles"
    for ( i = 1; i < anims; i++ ) {
      elem.animate({
        opacity: animateTo
      }, duration, o.easing );
      animateTo = 1 - animateTo;
    }

    elem.animate({
      opacity: animateTo
    }, duration, o.easing);

    elem.queue(function() {
      if ( hide ) {
        elem.hide();
      }
      done();
    });

    // We just queued up "anims" animations, we need to put them next in the queue
    if ( queuelen > 1 ) {
      queue.splice.apply( queue,
        [ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
    }
    elem.dequeue();
  };

  })(jQuery);

  (function( $, undefined ) {

  $.effects.effect.puff = function( o, done ) {
    var elem = $( this ),
      mode = $.effects.setMode( elem, o.mode || "hide" ),
      hide = mode === "hide",
      percent = parseInt( o.percent, 10 ) || 150,
      factor = percent / 100,
      original = {
        height: elem.height(),
        width: elem.width(),
        outerHeight: elem.outerHeight(),
        outerWidth: elem.outerWidth()
      };

    $.extend( o, {
      effect: "scale",
      queue: false,
      fade: true,
      mode: mode,
      complete: done,
      percent: hide ? percent : 100,
      from: hide ?
        original :
        {
          height: original.height * factor,
          width: original.width * factor,
          outerHeight: original.outerHeight * factor,
          outerWidth: original.outerWidth * factor
        }
    });

    elem.effect( o );
  };

  $.effects.effect.scale = function( o, done ) {

    // Create element
    var el = $( this ),
      options = $.extend( true, {}, o ),
      mode = $.effects.setMode( el, o.mode || "effect" ),
      percent = parseInt( o.percent, 10 ) ||
        ( parseInt( o.percent, 10 ) === 0 ? 0 : ( mode === "hide" ? 0 : 100 ) ),
      direction = o.direction || "both",
      origin = o.origin,
      original = {
        height: el.height(),
        width: el.width(),
        outerHeight: el.outerHeight(),
        outerWidth: el.outerWidth()
      },
      factor = {
        y: direction !== "horizontal" ? (percent / 100) : 1,
        x: direction !== "vertical" ? (percent / 100) : 1
      };

    // We are going to pass this effect to the size effect:
    options.effect = "size";
    options.queue = false;
    options.complete = done;

    // Set default origin and restore for show/hide
    if ( mode !== "effect" ) {
      options.origin = origin || ["middle","center"];
      options.restore = true;
    }

    options.from = o.from || ( mode === "show" ? {
      height: 0,
      width: 0,
      outerHeight: 0,
      outerWidth: 0
    } : original );
    options.to = {
      height: original.height * factor.y,
      width: original.width * factor.x,
      outerHeight: original.outerHeight * factor.y,
      outerWidth: original.outerWidth * factor.x
    };

    // Fade option to support puff
    if ( options.fade ) {
      if ( mode === "show" ) {
        options.from.opacity = 0;
        options.to.opacity = 1;
      }
      if ( mode === "hide" ) {
        options.from.opacity = 1;
        options.to.opacity = 0;
      }
    }

    // Animate
    el.effect( options );

  };

  $.effects.effect.size = function( o, done ) {

    // Create element
    var original, baseline, factor,
      el = $( this ),
      props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ],

      // Always restore
      props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ],

      // Copy for children
      props2 = [ "width", "height", "overflow" ],
      cProps = [ "fontSize" ],
      vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
      hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

      // Set options
      mode = $.effects.setMode( el, o.mode || "effect" ),
      restore = o.restore || mode !== "effect",
      scale = o.scale || "both",
      origin = o.origin || [ "middle", "center" ],
      position = el.css( "position" ),
      props = restore ? props0 : props1,
      zero = {
        height: 0,
        width: 0,
        outerHeight: 0,
        outerWidth: 0
      };

    if ( mode === "show" ) {
      el.show();
    }
    original = {
      height: el.height(),
      width: el.width(),
      outerHeight: el.outerHeight(),
      outerWidth: el.outerWidth()
    };

    if ( o.mode === "toggle" && mode === "show" ) {
      el.from = o.to || zero;
      el.to = o.from || original;
    } else {
      el.from = o.from || ( mode === "show" ? zero : original );
      el.to = o.to || ( mode === "hide" ? zero : original );
    }

    // Set scaling factor
    factor = {
      from: {
        y: el.from.height / original.height,
        x: el.from.width / original.width
      },
      to: {
        y: el.to.height / original.height,
        x: el.to.width / original.width
      }
    };

    // Scale the css box
    if ( scale === "box" || scale === "both" ) {

      // Vertical props scaling
      if ( factor.from.y !== factor.to.y ) {
        props = props.concat( vProps );
        el.from = $.effects.setTransition( el, vProps, factor.from.y, el.from );
        el.to = $.effects.setTransition( el, vProps, factor.to.y, el.to );
      }

      // Horizontal props scaling
      if ( factor.from.x !== factor.to.x ) {
        props = props.concat( hProps );
        el.from = $.effects.setTransition( el, hProps, factor.from.x, el.from );
        el.to = $.effects.setTransition( el, hProps, factor.to.x, el.to );
      }
    }

    // Scale the content
    if ( scale === "content" || scale === "both" ) {

      // Vertical props scaling
      if ( factor.from.y !== factor.to.y ) {
        props = props.concat( cProps ).concat( props2 );
        el.from = $.effects.setTransition( el, cProps, factor.from.y, el.from );
        el.to = $.effects.setTransition( el, cProps, factor.to.y, el.to );
      }
    }

    $.effects.save( el, props );
    el.show();
    $.effects.createWrapper( el );
    el.css( "overflow", "hidden" ).css( el.from );

    // Adjust
    if (origin) { // Calculate baseline shifts
      baseline = $.effects.getBaseline( origin, original );
      el.from.top = ( original.outerHeight - el.outerHeight() ) * baseline.y;
      el.from.left = ( original.outerWidth - el.outerWidth() ) * baseline.x;
      el.to.top = ( original.outerHeight - el.to.outerHeight ) * baseline.y;
      el.to.left = ( original.outerWidth - el.to.outerWidth ) * baseline.x;
    }
    el.css( el.from ); // set top & left

    // Animate
    if ( scale === "content" || scale === "both" ) { // Scale the children

      // Add margins/font-size
      vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
      hProps = hProps.concat([ "marginLeft", "marginRight" ]);
      props2 = props0.concat(vProps).concat(hProps);

      el.find( "*[width]" ).each( function(){
        var child = $( this ),
          c_original = {
            height: child.height(),
            width: child.width(),
            outerHeight: child.outerHeight(),
            outerWidth: child.outerWidth()
          };
        if (restore) {
          $.effects.save(child, props2);
        }

        child.from = {
          height: c_original.height * factor.from.y,
          width: c_original.width * factor.from.x,
          outerHeight: c_original.outerHeight * factor.from.y,
          outerWidth: c_original.outerWidth * factor.from.x
        };
        child.to = {
          height: c_original.height * factor.to.y,
          width: c_original.width * factor.to.x,
          outerHeight: c_original.height * factor.to.y,
          outerWidth: c_original.width * factor.to.x
        };

        // Vertical props scaling
        if ( factor.from.y !== factor.to.y ) {
          child.from = $.effects.setTransition( child, vProps, factor.from.y, child.from );
          child.to = $.effects.setTransition( child, vProps, factor.to.y, child.to );
        }

        // Horizontal props scaling
        if ( factor.from.x !== factor.to.x ) {
          child.from = $.effects.setTransition( child, hProps, factor.from.x, child.from );
          child.to = $.effects.setTransition( child, hProps, factor.to.x, child.to );
        }

        // Animate children
        child.css( child.from );
        child.animate( child.to, o.duration, o.easing, function() {

          // Restore children
          if ( restore ) {
            $.effects.restore( child, props2 );
          }
        });
      });
    }

    // Animate
    el.animate( el.to, {
      queue: false,
      duration: o.duration,
      easing: o.easing,
      complete: function() {
        if ( el.to.opacity === 0 ) {
          el.css( "opacity", el.from.opacity );
        }
        if( mode === "hide" ) {
          el.hide();
        }
        $.effects.restore( el, props );
        if ( !restore ) {

          // we need to calculate our new positioning based on the scaling
          if ( position === "static" ) {
            el.css({
              position: "relative",
              top: el.to.top,
              left: el.to.left
            });
          } else {
            $.each([ "top", "left" ], function( idx, pos ) {
              el.css( pos, function( _, str ) {
                var val = parseInt( str, 10 ),
                  toRef = idx ? el.to.left : el.to.top;

                // if original was "auto", recalculate the new value from wrapper
                if ( str === "auto" ) {
                  return toRef + "px";
                }

                return val + toRef + "px";
              });
            });
          }
        }

        $.effects.removeWrapper( el );
        done();
      }
    });

  };

  })(jQuery);

  (function( $, undefined ) {

  $.effects.effect.shake = function( o, done ) {

    var el = $( this ),
      props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
      mode = $.effects.setMode( el, o.mode || "effect" ),
      direction = o.direction || "left",
      distance = o.distance || 20,
      times = o.times || 3,
      anims = times * 2 + 1,
      speed = Math.round(o.duration/anims),
      ref = (direction === "up" || direction === "down") ? "top" : "left",
      positiveMotion = (direction === "up" || direction === "left"),
      animation = {},
      animation1 = {},
      animation2 = {},
      i,

      // we will need to re-assemble the queue to stack our animations in place
      queue = el.queue(),
      queuelen = queue.length;

    $.effects.save( el, props );
    el.show();
    $.effects.createWrapper( el );

    // Animation
    animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
    animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
    animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

    // Animate
    el.animate( animation, speed, o.easing );

    // Shakes
    for ( i = 1; i < times; i++ ) {
      el.animate( animation1, speed, o.easing ).animate( animation2, speed, o.easing );
    }
    el
      .animate( animation1, speed, o.easing )
      .animate( animation, speed / 2, o.easing )
      .queue(function() {
        if ( mode === "hide" ) {
          el.hide();
        }
        $.effects.restore( el, props );
        $.effects.removeWrapper( el );
        done();
      });

    // inject all the animations we just queued to be first in line (after "inprogress")
    if ( queuelen > 1) {
      queue.splice.apply( queue,
        [ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
    }
    el.dequeue();

  };

  })(jQuery);

  (function( $, undefined ) {

  $.effects.effect.slide = function( o, done ) {

    // Create element
    var el = $( this ),
      props = [ "position", "top", "bottom", "left", "right", "width", "height" ],
      mode = $.effects.setMode( el, o.mode || "show" ),
      show = mode === "show",
      direction = o.direction || "left",
      ref = (direction === "up" || direction === "down") ? "top" : "left",
      positiveMotion = (direction === "up" || direction === "left"),
      distance,
      animation = {};

    // Adjust
    $.effects.save( el, props );
    el.show();
    distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true );

    $.effects.createWrapper( el ).css({
      overflow: "hidden"
    });

    if ( show ) {
      el.css( ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance );
    }

    // Animation
    animation[ ref ] = ( show ?
      ( positiveMotion ? "+=" : "-=") :
      ( positiveMotion ? "-=" : "+=")) +
      distance;

    // Animate
    el.animate( animation, {
      queue: false,
      duration: o.duration,
      easing: o.easing,
      complete: function() {
        if ( mode === "hide" ) {
          el.hide();
        }
        $.effects.restore( el, props );
        $.effects.removeWrapper( el );
        done();
      }
    });
  };

  })(jQuery);

  (function( $, undefined ) {

  $.effects.effect.transfer = function( o, done ) {
    var elem = $( this ),
      target = $( o.to ),
      targetFixed = target.css( "position" ) === "fixed",
      body = $("body"),
      fixTop = targetFixed ? body.scrollTop() : 0,
      fixLeft = targetFixed ? body.scrollLeft() : 0,
      endPosition = target.offset(),
      animation = {
        top: endPosition.top - fixTop ,
        left: endPosition.left - fixLeft ,
        height: target.innerHeight(),
        width: target.innerWidth()
      },
      startPosition = elem.offset(),
      transfer = $( "<div class='ui-effects-transfer'></div>" )
        .appendTo( document.body )
        .addClass( o.className )
        .css({
          top: startPosition.top - fixTop ,
          left: startPosition.left - fixLeft ,
          height: elem.innerHeight(),
          width: elem.innerWidth(),
          position: targetFixed ? "fixed" : "absolute"
        })
        .animate( animation, o.duration, o.easing, function() {
          transfer.remove();
          done();
        });
  };

  })(jQuery);

  (function( $, undefined ) {

  $.widget( "ui.menu", {
    version: "1.10.3",
    defaultElement: "<ul>",
    delay: 300,
    options: {
      icons: {
        submenu: "ui-icon-carat-1-e"
      },
      menus: "ul",
      position: {
        my: "left top",
        at: "right top"
      },
      role: "menu",

      // callbacks
      blur: null,
      focus: null,
      select: null
    },

    _create: function() {
      this.activeMenu = this.element;
      // flag used to prevent firing of the click handler
      // as the event bubbles up through nested menus
      this.mouseHandled = false;
      this.element
        .uniqueId()
        .addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
        .toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )
        .attr({
          role: this.options.role,
          tabIndex: 0
        })
        // need to catch all clicks on disabled menu
        // not possible through _on
        .bind( "click" + this.eventNamespace, $.proxy(function( event ) {
          if ( this.options.disabled ) {
            event.preventDefault();
          }
        }, this ));

      if ( this.options.disabled ) {
        this.element
          .addClass( "ui-state-disabled" )
          .attr( "aria-disabled", "true" );
      }

      this._on({
        // Prevent focus from sticking to links inside menu after clicking
        // them (focus should always stay on UL during navigation).
        "mousedown .ui-menu-item > a": function( event ) {
          event.preventDefault();
        },
        "click .ui-state-disabled > a": function( event ) {
          event.preventDefault();
        },
        "click .ui-menu-item:has(a)": function( event ) {
          var target = $( event.target ).closest( ".ui-menu-item" );
          if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
            this.mouseHandled = true;

            this.select( event );
            // Open submenu on click
            if ( target.has( ".ui-menu" ).length ) {
              this.expand( event );
            } else if ( !this.element.is( ":focus" ) ) {
              // Redirect focus to the menu
              this.element.trigger( "focus", [ true ] );

              // If the active item is on the top level, let it stay active.
              // Otherwise, blur the active item since it is no longer visible.
              if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
                clearTimeout( this.timer );
              }
            }
          }
        },
        "mouseenter .ui-menu-item": function( event ) {
          var target = $( event.currentTarget );
          // Remove ui-state-active class from siblings of the newly focused menu item
          // to avoid a jump caused by adjacent elements both having a class with a border
          target.siblings().children( ".ui-state-active" ).removeClass( "ui-state-active" );
          this.focus( event, target );
        },
        mouseleave: "collapseAll",
        "mouseleave .ui-menu": "collapseAll",
        focus: function( event, keepActiveItem ) {
          // If there's already an active item, keep it active
          // If not, activate the first item
          var item = this.active || this.element.children( ".ui-menu-item" ).eq( 0 );

          if ( !keepActiveItem ) {
            this.focus( event, item );
          }
        },
        blur: function( event ) {
          this._delay(function() {
            if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
              this.collapseAll( event );
            }
          });
        },
        keydown: "_keydown"
      });

      this.refresh();

      // Clicks outside of a menu collapse any open menus
      this._on( this.document, {
        click: function( event ) {
          if ( !$( event.target ).closest( ".ui-menu" ).length ) {
            this.collapseAll( event );
          }

          // Reset the mouseHandled flag
          this.mouseHandled = false;
        }
      });
    },

    _destroy: function() {
      // Destroy (sub)menus
      this.element
        .removeAttr( "aria-activedescendant" )
        .find( ".ui-menu" ).addBack()
          .removeClass( "ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons" )
          .removeAttr( "role" )
          .removeAttr( "tabIndex" )
          .removeAttr( "aria-labelledby" )
          .removeAttr( "aria-expanded" )
          .removeAttr( "aria-hidden" )
          .removeAttr( "aria-disabled" )
          .removeUniqueId()
          .show();

      // Destroy menu items
      this.element.find( ".ui-menu-item" )
        .removeClass( "ui-menu-item" )
        .removeAttr( "role" )
        .removeAttr( "aria-disabled" )
        .children( "a" )
          .removeUniqueId()
          .removeClass( "ui-corner-all ui-state-hover" )
          .removeAttr( "tabIndex" )
          .removeAttr( "role" )
          .removeAttr( "aria-haspopup" )
          .children().each( function() {
            var elem = $( this );
            if ( elem.data( "ui-menu-submenu-carat" ) ) {
              elem.remove();
            }
          });

      // Destroy menu dividers
      this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );
    },

    _keydown: function( event ) {
      /*jshint maxcomplexity:20*/
      var match, prev, character, skip, regex,
        preventDefault = true;

      function escape( value ) {
        return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
      }

      switch ( event.keyCode ) {
      case $.ui.keyCode.PAGE_UP:
        this.previousPage( event );
        break;
      case $.ui.keyCode.PAGE_DOWN:
        this.nextPage( event );
        break;
      case $.ui.keyCode.HOME:
        this._move( "first", "first", event );
        break;
      case $.ui.keyCode.END:
        this._move( "last", "last", event );
        break;
      case $.ui.keyCode.UP:
        this.previous( event );
        break;
      case $.ui.keyCode.DOWN:
        this.next( event );
        break;
      case $.ui.keyCode.LEFT:
        this.collapse( event );
        break;
      case $.ui.keyCode.RIGHT:
        if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
          this.expand( event );
        }
        break;
      case $.ui.keyCode.ENTER:
      case $.ui.keyCode.SPACE:
        this._activate( event );
        break;
      case $.ui.keyCode.ESCAPE:
        this.collapse( event );
        break;
      default:
        preventDefault = false;
        prev = this.previousFilter || "";
        character = String.fromCharCode( event.keyCode );
        skip = false;

        clearTimeout( this.filterTimer );

        if ( character === prev ) {
          skip = true;
        } else {
          character = prev + character;
        }

        regex = new RegExp( "^" + escape( character ), "i" );
        match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
          return regex.test( $( this ).children( "a" ).text() );
        });
        match = skip && match.index( this.active.next() ) !== -1 ?
          this.active.nextAll( ".ui-menu-item" ) :
          match;

        // If no matches on the current filter, reset to the last character pressed
        // to move down the menu to the first item that starts with that character
        if ( !match.length ) {
          character = String.fromCharCode( event.keyCode );
          regex = new RegExp( "^" + escape( character ), "i" );
          match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
            return regex.test( $( this ).children( "a" ).text() );
          });
        }

        if ( match.length ) {
          this.focus( event, match );
          if ( match.length > 1 ) {
            this.previousFilter = character;
            this.filterTimer = this._delay(function() {
              delete this.previousFilter;
            }, 1000 );
          } else {
            delete this.previousFilter;
          }
        } else {
          delete this.previousFilter;
        }
      }

      if ( preventDefault ) {
        event.preventDefault();
      }
    },

    _activate: function( event ) {
      if ( !this.active.is( ".ui-state-disabled" ) ) {
        if ( this.active.children( "a[aria-haspopup='true']" ).length ) {
          this.expand( event );
        } else {
          this.select( event );
        }
      }
    },

    refresh: function() {
      var menus,
        icon = this.options.icons.submenu,
        submenus = this.element.find( this.options.menus );

      // Initialize nested menus
      submenus.filter( ":not(.ui-menu)" )
        .addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
        .hide()
        .attr({
          role: this.options.role,
          "aria-hidden": "true",
          "aria-expanded": "false"
        })
        .each(function() {
          var menu = $( this ),
            item = menu.prev( "a" ),
            submenuCarat = $( "<span>" )
              .addClass( "ui-menu-icon ui-icon " + icon )
              .data( "ui-menu-submenu-carat", true );

          item
            .attr( "aria-haspopup", "true" )
            .prepend( submenuCarat );
          menu.attr( "aria-labelledby", item.attr( "id" ) );
        });

      menus = submenus.add( this.element );

      // Don't refresh list items that are already adapted
      menus.children( ":not(.ui-menu-item):has(a)" )
        .addClass( "ui-menu-item" )
        .attr( "role", "presentation" )
        .children( "a" )
          .uniqueId()
          .addClass( "ui-corner-all" )
          .attr({
            tabIndex: -1,
            role: this._itemRole()
          });

      // Initialize unlinked menu-items containing spaces and/or dashes only as dividers
      menus.children( ":not(.ui-menu-item)" ).each(function() {
        var item = $( this );
        // hyphen, em dash, en dash
        if ( !/[^\-\u2014\u2013\s]/.test( item.text() ) ) {
          item.addClass( "ui-widget-content ui-menu-divider" );
        }
      });

      // Add aria-disabled attribute to any disabled menu item
      menus.children( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

      // If the active item has been removed, blur the menu
      if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
        this.blur();
      }
    },

    _itemRole: function() {
      return {
        menu: "menuitem",
        listbox: "option"
      }[ this.options.role ];
    },

    _setOption: function( key, value ) {
      if ( key === "icons" ) {
        this.element.find( ".ui-menu-icon" )
          .removeClass( this.options.icons.submenu )
          .addClass( value.submenu );
      }
      this._super( key, value );
    },

    focus: function( event, item ) {
      var nested, focused;
      this.blur( event, event && event.type === "focus" );

      this._scrollIntoView( item );

      this.active = item.first();
      focused = this.active.children( "a" ).addClass( "ui-state-focus" );
      // Only update aria-activedescendant if there's a role
      // otherwise we assume focus is managed elsewhere
      if ( this.options.role ) {
        this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
      }

      // Highlight active parent menu item, if any
      this.active
        .parent()
        .closest( ".ui-menu-item" )
        .children( "a:first" )
        .addClass( "ui-state-active" );

      if ( event && event.type === "keydown" ) {
        this._close();
      } else {
        this.timer = this._delay(function() {
          this._close();
        }, this.delay );
      }

      nested = item.children( ".ui-menu" );
      if ( nested.length && ( /^mouse/.test( event.type ) ) ) {
        this._startOpening(nested);
      }
      this.activeMenu = item.parent();

      this._trigger( "focus", event, { item: item } );
    },

    _scrollIntoView: function( item ) {
      var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
      if ( this._hasScroll() ) {
        borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
        paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
        offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
        scroll = this.activeMenu.scrollTop();
        elementHeight = this.activeMenu.height();
        itemHeight = item.height();

        if ( offset < 0 ) {
          this.activeMenu.scrollTop( scroll + offset );
        } else if ( offset + itemHeight > elementHeight ) {
          this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
        }
      }
    },

    blur: function( event, fromFocus ) {
      if ( !fromFocus ) {
        clearTimeout( this.timer );
      }

      if ( !this.active ) {
        return;
      }

      this.active.children( "a" ).removeClass( "ui-state-focus" );
      this.active = null;

      this._trigger( "blur", event, { item: this.active } );
    },

    _startOpening: function( submenu ) {
      clearTimeout( this.timer );

      // Don't open if already open fixes a Firefox bug that caused a .5 pixel
      // shift in the submenu position when mousing over the carat icon
      if ( submenu.attr( "aria-hidden" ) !== "true" ) {
        return;
      }

      this.timer = this._delay(function() {
        this._close();
        this._open( submenu );
      }, this.delay );
    },

    _open: function( submenu ) {
      var position = $.extend({
        of: this.active
      }, this.options.position );

      clearTimeout( this.timer );
      this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
        .hide()
        .attr( "aria-hidden", "true" );

      submenu
        .show()
        .removeAttr( "aria-hidden" )
        .attr( "aria-expanded", "true" )
        .position( position );
    },

    collapseAll: function( event, all ) {
      clearTimeout( this.timer );
      this.timer = this._delay(function() {
        // If we were passed an event, look for the submenu that contains the event
        var currentMenu = all ? this.element :
          $( event && event.target ).closest( this.element.find( ".ui-menu" ) );

        // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
        if ( !currentMenu.length ) {
          currentMenu = this.element;
        }

        this._close( currentMenu );

        this.blur( event );
        this.activeMenu = currentMenu;
      }, this.delay );
    },

    // With no arguments, closes the currently active menu - if nothing is active
    // it closes all menus.  If passed an argument, it will search for menus BELOW
    _close: function( startMenu ) {
      if ( !startMenu ) {
        startMenu = this.active ? this.active.parent() : this.element;
      }

      startMenu
        .find( ".ui-menu" )
          .hide()
          .attr( "aria-hidden", "true" )
          .attr( "aria-expanded", "false" )
        .end()
        .find( "a.ui-state-active" )
          .removeClass( "ui-state-active" );
    },

    collapse: function( event ) {
      var newItem = this.active &&
        this.active.parent().closest( ".ui-menu-item", this.element );
      if ( newItem && newItem.length ) {
        this._close();
        this.focus( event, newItem );
      }
    },

    expand: function( event ) {
      var newItem = this.active &&
        this.active
          .children( ".ui-menu " )
          .children( ".ui-menu-item" )
          .first();

      if ( newItem && newItem.length ) {
        this._open( newItem.parent() );

        // Delay so Firefox will not hide activedescendant change in expanding submenu from AT
        this._delay(function() {
          this.focus( event, newItem );
        });
      }
    },

    next: function( event ) {
      this._move( "next", "first", event );
    },

    previous: function( event ) {
      this._move( "prev", "last", event );
    },

    isFirstItem: function() {
      return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
    },

    isLastItem: function() {
      return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
    },

    _move: function( direction, filter, event ) {
      var next;
      if ( this.active ) {
        if ( direction === "first" || direction === "last" ) {
          next = this.active
            [ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
            .eq( -1 );
        } else {
          next = this.active
            [ direction + "All" ]( ".ui-menu-item" )
            .eq( 0 );
        }
      }
      if ( !next || !next.length || !this.active ) {
        next = this.activeMenu.children( ".ui-menu-item" )[ filter ]();
      }

      this.focus( event, next );
    },

    nextPage: function( event ) {
      var item, base, height;

      if ( !this.active ) {
        this.next( event );
        return;
      }
      if ( this.isLastItem() ) {
        return;
      }
      if ( this._hasScroll() ) {
        base = this.active.offset().top;
        height = this.element.height();
        this.active.nextAll( ".ui-menu-item" ).each(function() {
          item = $( this );
          return item.offset().top - base - height < 0;
        });

        this.focus( event, item );
      } else {
        this.focus( event, this.activeMenu.children( ".ui-menu-item" )
          [ !this.active ? "first" : "last" ]() );
      }
    },

    previousPage: function( event ) {
      var item, base, height;
      if ( !this.active ) {
        this.next( event );
        return;
      }
      if ( this.isFirstItem() ) {
        return;
      }
      if ( this._hasScroll() ) {
        base = this.active.offset().top;
        height = this.element.height();
        this.active.prevAll( ".ui-menu-item" ).each(function() {
          item = $( this );
          return item.offset().top - base + height > 0;
        });

        this.focus( event, item );
      } else {
        this.focus( event, this.activeMenu.children( ".ui-menu-item" ).first() );
      }
    },

    _hasScroll: function() {
      return this.element.outerHeight() < this.element.prop( "scrollHeight" );
    },

    select: function( event ) {
      // TODO: It should never be possible to not have an active item at this
      // point, but the tests don't trigger mouseenter before click.
      this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
      var ui = { item: this.active };
      if ( !this.active.has( ".ui-menu" ).length ) {
        this.collapseAll( event, true );
      }
      this._trigger( "select", event, ui );
    }
  });

  }( jQuery ));

  (function( $, undefined ) {

  $.ui = $.ui || {};

  var cachedScrollbarWidth,
    max = Math.max,
    abs = Math.abs,
    round = Math.round,
    rhorizontal = /left|center|right/,
    rvertical = /top|center|bottom/,
    roffset = /[\+\-]\d+(\.[\d]+)?%?/,
    rposition = /^\w+/,
    rpercent = /%$/,
    _position = $.fn.position;

  function getOffsets( offsets, width, height ) {
    return [
      parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
      parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
    ];
  }

  function parseCss( element, property ) {
    return parseInt( $.css( element, property ), 10 ) || 0;
  }

  function getDimensions( elem ) {
    var raw = elem[0];
    if ( raw.nodeType === 9 ) {
      return {
        width: elem.width(),
        height: elem.height(),
        offset: { top: 0, left: 0 }
      };
    }
    if ( $.isWindow( raw ) ) {
      return {
        width: elem.width(),
        height: elem.height(),
        offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
      };
    }
    if ( raw.preventDefault ) {
      return {
        width: 0,
        height: 0,
        offset: { top: raw.pageY, left: raw.pageX }
      };
    }
    return {
      width: elem.outerWidth(),
      height: elem.outerHeight(),
      offset: elem.offset()
    };
  }

  $.position = {
    scrollbarWidth: function() {
      if ( cachedScrollbarWidth !== undefined ) {
        return cachedScrollbarWidth;
      }
      var w1, w2,
        div = $( "<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
        innerDiv = div.children()[0];

      $( "body" ).append( div );
      w1 = innerDiv.offsetWidth;
      div.css( "overflow", "scroll" );

      w2 = innerDiv.offsetWidth;

      if ( w1 === w2 ) {
        w2 = div[0].clientWidth;
      }

      div.remove();

      return (cachedScrollbarWidth = w1 - w2);
    },
    getScrollInfo: function( within ) {
      var overflowX = within.isWindow ? "" : within.element.css( "overflow-x" ),
        overflowY = within.isWindow ? "" : within.element.css( "overflow-y" ),
        hasOverflowX = overflowX === "scroll" ||
          ( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
        hasOverflowY = overflowY === "scroll" ||
          ( overflowY === "auto" && within.height < within.element[0].scrollHeight );
      return {
        width: hasOverflowY ? $.position.scrollbarWidth() : 0,
        height: hasOverflowX ? $.position.scrollbarWidth() : 0
      };
    },
    getWithinInfo: function( element ) {
      var withinElement = $( element || window ),
        isWindow = $.isWindow( withinElement[0] );
      return {
        element: withinElement,
        isWindow: isWindow,
        offset: withinElement.offset() || { left: 0, top: 0 },
        scrollLeft: withinElement.scrollLeft(),
        scrollTop: withinElement.scrollTop(),
        width: isWindow ? withinElement.width() : withinElement.outerWidth(),
        height: isWindow ? withinElement.height() : withinElement.outerHeight()
      };
    }
  };

  $.fn.position = function( options ) {
    if ( !options || !options.of ) {
      return _position.apply( this, arguments );
    }

    // make a copy, we don't want to modify arguments
    options = $.extend( {}, options );

    var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
      target = $( options.of ),
      within = $.position.getWithinInfo( options.within ),
      scrollInfo = $.position.getScrollInfo( within ),
      collision = ( options.collision || "flip" ).split( " " ),
      offsets = {};

    dimensions = getDimensions( target );
    if ( target[0].preventDefault ) {
      // force left top to allow flipping
      options.at = "left top";
    }
    targetWidth = dimensions.width;
    targetHeight = dimensions.height;
    targetOffset = dimensions.offset;
    // clone to reuse original targetOffset later
    basePosition = $.extend( {}, targetOffset );

    // force my and at to have valid horizontal and vertical positions
    // if a value is missing or invalid, it will be converted to center
    $.each( [ "my", "at" ], function() {
      var pos = ( options[ this ] || "" ).split( " " ),
        horizontalOffset,
        verticalOffset;

      if ( pos.length === 1) {
        pos = rhorizontal.test( pos[ 0 ] ) ?
          pos.concat( [ "center" ] ) :
          rvertical.test( pos[ 0 ] ) ?
            [ "center" ].concat( pos ) :
            [ "center", "center" ];
      }
      pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
      pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

      // calculate offsets
      horizontalOffset = roffset.exec( pos[ 0 ] );
      verticalOffset = roffset.exec( pos[ 1 ] );
      offsets[ this ] = [
        horizontalOffset ? horizontalOffset[ 0 ] : 0,
        verticalOffset ? verticalOffset[ 0 ] : 0
      ];

      // reduce to just the positions without the offsets
      options[ this ] = [
        rposition.exec( pos[ 0 ] )[ 0 ],
        rposition.exec( pos[ 1 ] )[ 0 ]
      ];
    });

    // normalize collision option
    if ( collision.length === 1 ) {
      collision[ 1 ] = collision[ 0 ];
    }

    if ( options.at[ 0 ] === "right" ) {
      basePosition.left += targetWidth;
    } else if ( options.at[ 0 ] === "center" ) {
      basePosition.left += targetWidth / 2;
    }

    if ( options.at[ 1 ] === "bottom" ) {
      basePosition.top += targetHeight;
    } else if ( options.at[ 1 ] === "center" ) {
      basePosition.top += targetHeight / 2;
    }

    atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
    basePosition.left += atOffset[ 0 ];
    basePosition.top += atOffset[ 1 ];

    return this.each(function() {
      var collisionPosition, using,
        elem = $( this ),
        elemWidth = elem.outerWidth(),
        elemHeight = elem.outerHeight(),
        marginLeft = parseCss( this, "marginLeft" ),
        marginTop = parseCss( this, "marginTop" ),
        collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
        collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
        position = $.extend( {}, basePosition ),
        myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

      if ( options.my[ 0 ] === "right" ) {
        position.left -= elemWidth;
      } else if ( options.my[ 0 ] === "center" ) {
        position.left -= elemWidth / 2;
      }

      if ( options.my[ 1 ] === "bottom" ) {
        position.top -= elemHeight;
      } else if ( options.my[ 1 ] === "center" ) {
        position.top -= elemHeight / 2;
      }

      position.left += myOffset[ 0 ];
      position.top += myOffset[ 1 ];

      // if the browser doesn't support fractions, then round for consistent results
      if ( !$.support.offsetFractions ) {
        position.left = round( position.left );
        position.top = round( position.top );
      }

      collisionPosition = {
        marginLeft: marginLeft,
        marginTop: marginTop
      };

      $.each( [ "left", "top" ], function( i, dir ) {
        if ( $.ui.position[ collision[ i ] ] ) {
          $.ui.position[ collision[ i ] ][ dir ]( position, {
            targetWidth: targetWidth,
            targetHeight: targetHeight,
            elemWidth: elemWidth,
            elemHeight: elemHeight,
            collisionPosition: collisionPosition,
            collisionWidth: collisionWidth,
            collisionHeight: collisionHeight,
            offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
            my: options.my,
            at: options.at,
            within: within,
            elem : elem
          });
        }
      });

      if ( options.using ) {
        // adds feedback as second argument to using callback, if present
        using = function( props ) {
          var left = targetOffset.left - position.left,
            right = left + targetWidth - elemWidth,
            top = targetOffset.top - position.top,
            bottom = top + targetHeight - elemHeight,
            feedback = {
              target: {
                element: target,
                left: targetOffset.left,
                top: targetOffset.top,
                width: targetWidth,
                height: targetHeight
              },
              element: {
                element: elem,
                left: position.left,
                top: position.top,
                width: elemWidth,
                height: elemHeight
              },
              horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
              vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
            };
          if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
            feedback.horizontal = "center";
          }
          if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
            feedback.vertical = "middle";
          }
          if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
            feedback.important = "horizontal";
          } else {
            feedback.important = "vertical";
          }
          options.using.call( this, props, feedback );
        };
      }

      elem.offset( $.extend( position, { using: using } ) );
    });
  };

  $.ui.position = {
    fit: {
      left: function( position, data ) {
        var within = data.within,
          withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
          outerWidth = within.width,
          collisionPosLeft = position.left - data.collisionPosition.marginLeft,
          overLeft = withinOffset - collisionPosLeft,
          overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
          newOverRight;

        // element is wider than within
        if ( data.collisionWidth > outerWidth ) {
          // element is initially over the left side of within
          if ( overLeft > 0 && overRight <= 0 ) {
            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
            position.left += overLeft - newOverRight;
          // element is initially over right side of within
          } else if ( overRight > 0 && overLeft <= 0 ) {
            position.left = withinOffset;
          // element is initially over both left and right sides of within
          } else {
            if ( overLeft > overRight ) {
              position.left = withinOffset + outerWidth - data.collisionWidth;
            } else {
              position.left = withinOffset;
            }
          }
        // too far left -> align with left edge
        } else if ( overLeft > 0 ) {
          position.left += overLeft;
        // too far right -> align with right edge
        } else if ( overRight > 0 ) {
          position.left -= overRight;
        // adjust based on position and margin
        } else {
          position.left = max( position.left - collisionPosLeft, position.left );
        }
      },
      top: function( position, data ) {
        var within = data.within,
          withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
          outerHeight = data.within.height,
          collisionPosTop = position.top - data.collisionPosition.marginTop,
          overTop = withinOffset - collisionPosTop,
          overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
          newOverBottom;

        // element is taller than within
        if ( data.collisionHeight > outerHeight ) {
          // element is initially over the top of within
          if ( overTop > 0 && overBottom <= 0 ) {
            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
            position.top += overTop - newOverBottom;
          // element is initially over bottom of within
          } else if ( overBottom > 0 && overTop <= 0 ) {
            position.top = withinOffset;
          // element is initially over both top and bottom of within
          } else {
            if ( overTop > overBottom ) {
              position.top = withinOffset + outerHeight - data.collisionHeight;
            } else {
              position.top = withinOffset;
            }
          }
        // too far up -> align with top
        } else if ( overTop > 0 ) {
          position.top += overTop;
        // too far down -> align with bottom edge
        } else if ( overBottom > 0 ) {
          position.top -= overBottom;
        // adjust based on position and margin
        } else {
          position.top = max( position.top - collisionPosTop, position.top );
        }
      }
    },
    flip: {
      left: function( position, data ) {
        var within = data.within,
          withinOffset = within.offset.left + within.scrollLeft,
          outerWidth = within.width,
          offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
          collisionPosLeft = position.left - data.collisionPosition.marginLeft,
          overLeft = collisionPosLeft - offsetLeft,
          overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
          myOffset = data.my[ 0 ] === "left" ?
            -data.elemWidth :
            data.my[ 0 ] === "right" ?
              data.elemWidth :
              0,
          atOffset = data.at[ 0 ] === "left" ?
            data.targetWidth :
            data.at[ 0 ] === "right" ?
              -data.targetWidth :
              0,
          offset = -2 * data.offset[ 0 ],
          newOverRight,
          newOverLeft;

        if ( overLeft < 0 ) {
          newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
          if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
            position.left += myOffset + atOffset + offset;
          }
        }
        else if ( overRight > 0 ) {
          newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
          if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
            position.left += myOffset + atOffset + offset;
          }
        }
      },
      top: function( position, data ) {
        var within = data.within,
          withinOffset = within.offset.top + within.scrollTop,
          outerHeight = within.height,
          offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
          collisionPosTop = position.top - data.collisionPosition.marginTop,
          overTop = collisionPosTop - offsetTop,
          overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
          top = data.my[ 1 ] === "top",
          myOffset = top ?
            -data.elemHeight :
            data.my[ 1 ] === "bottom" ?
              data.elemHeight :
              0,
          atOffset = data.at[ 1 ] === "top" ?
            data.targetHeight :
            data.at[ 1 ] === "bottom" ?
              -data.targetHeight :
              0,
          offset = -2 * data.offset[ 1 ],
          newOverTop,
          newOverBottom;
        if ( overTop < 0 ) {
          newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
          if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
            position.top += myOffset + atOffset + offset;
          }
        }
        else if ( overBottom > 0 ) {
          newOverTop = position.top -  data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
          if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
            position.top += myOffset + atOffset + offset;
          }
        }
      }
    },
    flipfit: {
      left: function() {
        $.ui.position.flip.left.apply( this, arguments );
        $.ui.position.fit.left.apply( this, arguments );
      },
      top: function() {
        $.ui.position.flip.top.apply( this, arguments );
        $.ui.position.fit.top.apply( this, arguments );
      }
    }
  };

  // fraction support test
  (function () {
    var testElement, testElementParent, testElementStyle, offsetLeft, i,
      body = document.getElementsByTagName( "body" )[ 0 ],
      div = document.createElement( "div" );

    //Create a "fake body" for testing based on method used in jQuery.support
    testElement = document.createElement( body ? "div" : "body" );
    testElementStyle = {
      visibility: "hidden",
      width: 0,
      height: 0,
      border: 0,
      margin: 0,
      background: "none"
    };
    if ( body ) {
      $.extend( testElementStyle, {
        position: "absolute",
        left: "-1000px",
        top: "-1000px"
      });
    }
    for ( i in testElementStyle ) {
      testElement.style[ i ] = testElementStyle[ i ];
    }
    testElement.appendChild( div );
    testElementParent = body || document.documentElement;
    testElementParent.insertBefore( testElement, testElementParent.firstChild );

    div.style.cssText = "position: absolute; left: 10.7432222px;";

    offsetLeft = $( div ).offset().left;
    $.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;

    testElement.innerHTML = "";
    testElementParent.removeChild( testElement );
  })();

  }( jQuery ) );

  (function( $, undefined ) {

  $.widget( "ui.progressbar", {
    version: "1.10.3",
    options: {
      max: 100,
      value: 0,

      change: null,
      complete: null
    },

    min: 0,

    _create: function() {
      // Constrain initial value
      this.oldValue = this.options.value = this._constrainedValue();

      this.element
        .addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
        .attr({
          // Only set static values, aria-valuenow and aria-valuemax are
          // set inside _refreshValue()
          role: "progressbar",
          "aria-valuemin": this.min
        });

      this.valueDiv = $( "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>" )
        .appendTo( this.element );

      this._refreshValue();
    },

    _destroy: function() {
      this.element
        .removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
        .removeAttr( "role" )
        .removeAttr( "aria-valuemin" )
        .removeAttr( "aria-valuemax" )
        .removeAttr( "aria-valuenow" );

      this.valueDiv.remove();
    },

    value: function( newValue ) {
      if ( newValue === undefined ) {
        return this.options.value;
      }

      this.options.value = this._constrainedValue( newValue );
      this._refreshValue();
    },

    _constrainedValue: function( newValue ) {
      if ( newValue === undefined ) {
        newValue = this.options.value;
      }

      this.indeterminate = newValue === false;

      // sanitize value
      if ( typeof newValue !== "number" ) {
        newValue = 0;
      }

      return this.indeterminate ? false :
        Math.min( this.options.max, Math.max( this.min, newValue ) );
    },

    _setOptions: function( options ) {
      // Ensure "value" option is set after other values (like max)
      var value = options.value;
      delete options.value;

      this._super( options );

      this.options.value = this._constrainedValue( value );
      this._refreshValue();
    },

    _setOption: function( key, value ) {
      if ( key === "max" ) {
        // Don't allow a max less than min
        value = Math.max( this.min, value );
      }

      this._super( key, value );
    },

    _percentage: function() {
      return this.indeterminate ? 100 : 100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
    },

    _refreshValue: function() {
      var value = this.options.value,
        percentage = this._percentage();

      this.valueDiv
        .toggle( this.indeterminate || value > this.min )
        .toggleClass( "ui-corner-right", value === this.options.max )
        .width( percentage.toFixed(0) + "%" );

      this.element.toggleClass( "ui-progressbar-indeterminate", this.indeterminate );

      if ( this.indeterminate ) {
        this.element.removeAttr( "aria-valuenow" );
        if ( !this.overlayDiv ) {
          this.overlayDiv = $( "<div class='ui-progressbar-overlay'></div>" ).appendTo( this.valueDiv );
        }
      } else {
        this.element.attr({
          "aria-valuemax": this.options.max,
          "aria-valuenow": value
        });
        if ( this.overlayDiv ) {
          this.overlayDiv.remove();
          this.overlayDiv = null;
        }
      }

      if ( this.oldValue !== value ) {
        this.oldValue = value;
        this._trigger( "change" );
      }
      if ( value === this.options.max ) {
        this._trigger( "complete" );
      }
    }
  });

  })( jQuery );

  (function( $, undefined ) {

  // number of pages in a slider
  // (how many times can you page up/down to go through the whole range)
  var numPages = 5;

  $.widget( "ui.slider", $.ui.mouse, {
    version: "1.10.3",
    widgetEventPrefix: "slide",

    options: {
      animate: false,
      distance: 0,
      max: 100,
      min: 0,
      orientation: "horizontal",
      range: false,
      step: 1,
      value: 0,
      values: null,

      // callbacks
      change: null,
      slide: null,
      start: null,
      stop: null
    },

    _create: function() {
      this._keySliding = false;
      this._mouseSliding = false;
      this._animateOff = true;
      this._handleIndex = null;
      this._detectOrientation();
      this._mouseInit();

      this.element
        .addClass( "ui-slider" +
          " ui-slider-" + this.orientation +
          " ui-widget" +
          " ui-widget-content" +
          " ui-corner-all");

      this._refresh();
      this._setOption( "disabled", this.options.disabled );

      this._animateOff = false;
    },

    _refresh: function() {
      this._createRange();
      this._createHandles();
      this._setupEvents();
      this._refreshValue();
    },

    _createHandles: function() {
      var i, handleCount,
        options = this.options,
        existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
        handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",
        handles = [];

      handleCount = ( options.values && options.values.length ) || 1;

      if ( existingHandles.length > handleCount ) {
        existingHandles.slice( handleCount ).remove();
        existingHandles = existingHandles.slice( 0, handleCount );
      }

      for ( i = existingHandles.length; i < handleCount; i++ ) {
        handles.push( handle );
      }

      this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

      this.handle = this.handles.eq( 0 );

      this.handles.each(function( i ) {
        $( this ).data( "ui-slider-handle-index", i );
      });
    },

    _createRange: function() {
      var options = this.options,
        classes = "";

      if ( options.range ) {
        if ( options.range === true ) {
          if ( !options.values ) {
            options.values = [ this._valueMin(), this._valueMin() ];
          } else if ( options.values.length && options.values.length !== 2 ) {
            options.values = [ options.values[0], options.values[0] ];
          } else if ( $.isArray( options.values ) ) {
            options.values = options.values.slice(0);
          }
        }

        if ( !this.range || !this.range.length ) {
          this.range = $( "<div></div>" )
            .appendTo( this.element );

          classes = "ui-slider-range" +
          // note: this isn't the most fittingly semantic framework class for this element,
          // but worked best visually with a variety of themes
          " ui-widget-header ui-corner-all";
        } else {
          this.range.removeClass( "ui-slider-range-min ui-slider-range-max" )
            // Handle range switching from true to min/max
            .css({
              "left": "",
              "bottom": ""
            });
        }

        this.range.addClass( classes +
          ( ( options.range === "min" || options.range === "max" ) ? " ui-slider-range-" + options.range : "" ) );
      } else {
        this.range = $([]);
      }
    },

    _setupEvents: function() {
      var elements = this.handles.add( this.range ).filter( "a" );
      this._off( elements );
      this._on( elements, this._handleEvents );
      this._hoverable( elements );
      this._focusable( elements );
    },

    _destroy: function() {
      this.handles.remove();
      this.range.remove();

      this.element
        .removeClass( "ui-slider" +
          " ui-slider-horizontal" +
          " ui-slider-vertical" +
          " ui-widget" +
          " ui-widget-content" +
          " ui-corner-all" );

      this._mouseDestroy();
    },

    _mouseCapture: function( event ) {
      var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
        that = this,
        o = this.options;

      if ( o.disabled ) {
        return false;
      }

      this.elementSize = {
        width: this.element.outerWidth(),
        height: this.element.outerHeight()
      };
      this.elementOffset = this.element.offset();

      position = { x: event.pageX, y: event.pageY };
      normValue = this._normValueFromMouse( position );
      distance = this._valueMax() - this._valueMin() + 1;
      this.handles.each(function( i ) {
        var thisDistance = Math.abs( normValue - that.values(i) );
        if (( distance > thisDistance ) ||
          ( distance === thisDistance &&
            (i === that._lastChangedValue || that.values(i) === o.min ))) {
          distance = thisDistance;
          closestHandle = $( this );
          index = i;
        }
      });

      allowed = this._start( event, index );
      if ( allowed === false ) {
        return false;
      }
      this._mouseSliding = true;

      this._handleIndex = index;

      closestHandle
        .addClass( "ui-state-active" )
        .focus();

      offset = closestHandle.offset();
      mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
      this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
        left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
        top: event.pageY - offset.top -
          ( closestHandle.height() / 2 ) -
          ( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
          ( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
          ( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
      };

      if ( !this.handles.hasClass( "ui-state-hover" ) ) {
        this._slide( event, index, normValue );
      }
      this._animateOff = true;
      return true;
    },

    _mouseStart: function() {
      return true;
    },

    _mouseDrag: function( event ) {
      var position = { x: event.pageX, y: event.pageY },
        normValue = this._normValueFromMouse( position );

      this._slide( event, this._handleIndex, normValue );

      return false;
    },

    _mouseStop: function( event ) {
      this.handles.removeClass( "ui-state-active" );
      this._mouseSliding = false;

      this._stop( event, this._handleIndex );
      this._change( event, this._handleIndex );

      this._handleIndex = null;
      this._clickOffset = null;
      this._animateOff = false;

      return false;
    },

    _detectOrientation: function() {
      this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
    },

    _normValueFromMouse: function( position ) {
      var pixelTotal,
        pixelMouse,
        percentMouse,
        valueTotal,
        valueMouse;

      if ( this.orientation === "horizontal" ) {
        pixelTotal = this.elementSize.width;
        pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
      } else {
        pixelTotal = this.elementSize.height;
        pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
      }

      percentMouse = ( pixelMouse / pixelTotal );
      if ( percentMouse > 1 ) {
        percentMouse = 1;
      }
      if ( percentMouse < 0 ) {
        percentMouse = 0;
      }
      if ( this.orientation === "vertical" ) {
        percentMouse = 1 - percentMouse;
      }

      valueTotal = this._valueMax() - this._valueMin();
      valueMouse = this._valueMin() + percentMouse * valueTotal;

      return this._trimAlignValue( valueMouse );
    },

    _start: function( event, index ) {
      var uiHash = {
        handle: this.handles[ index ],
        value: this.value()
      };
      if ( this.options.values && this.options.values.length ) {
        uiHash.value = this.values( index );
        uiHash.values = this.values();
      }
      return this._trigger( "start", event, uiHash );
    },

    _slide: function( event, index, newVal ) {
      var otherVal,
        newValues,
        allowed;

      if ( this.options.values && this.options.values.length ) {
        otherVal = this.values( index ? 0 : 1 );

        if ( ( this.options.values.length === 2 && this.options.range === true ) &&
            ( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
          ) {
          newVal = otherVal;
        }

        if ( newVal !== this.values( index ) ) {
          newValues = this.values();
          newValues[ index ] = newVal;
          // A slide can be canceled by returning false from the slide callback
          allowed = this._trigger( "slide", event, {
            handle: this.handles[ index ],
            value: newVal,
            values: newValues
          } );
          otherVal = this.values( index ? 0 : 1 );
          if ( allowed !== false ) {
            this.values( index, newVal, true );
          }
        }
      } else {
        if ( newVal !== this.value() ) {
          // A slide can be canceled by returning false from the slide callback
          allowed = this._trigger( "slide", event, {
            handle: this.handles[ index ],
            value: newVal
          } );
          if ( allowed !== false ) {
            this.value( newVal );
          }
        }
      }
    },

    _stop: function( event, index ) {
      var uiHash = {
        handle: this.handles[ index ],
        value: this.value()
      };
      if ( this.options.values && this.options.values.length ) {
        uiHash.value = this.values( index );
        uiHash.values = this.values();
      }

      this._trigger( "stop", event, uiHash );
    },

    _change: function( event, index ) {
      if ( !this._keySliding && !this._mouseSliding ) {
        var uiHash = {
          handle: this.handles[ index ],
          value: this.value()
        };
        if ( this.options.values && this.options.values.length ) {
          uiHash.value = this.values( index );
          uiHash.values = this.values();
        }

        //store the last changed value index for reference when handles overlap
        this._lastChangedValue = index;

        this._trigger( "change", event, uiHash );
      }
    },

    value: function( newValue ) {
      if ( arguments.length ) {
        this.options.value = this._trimAlignValue( newValue );
        this._refreshValue();
        this._change( null, 0 );
        return;
      }

      return this._value();
    },

    values: function( index, newValue ) {
      var vals,
        newValues,
        i;

      if ( arguments.length > 1 ) {
        this.options.values[ index ] = this._trimAlignValue( newValue );
        this._refreshValue();
        this._change( null, index );
        return;
      }

      if ( arguments.length ) {
        if ( $.isArray( arguments[ 0 ] ) ) {
          vals = this.options.values;
          newValues = arguments[ 0 ];
          for ( i = 0; i < vals.length; i += 1 ) {
            vals[ i ] = this._trimAlignValue( newValues[ i ] );
            this._change( null, i );
          }
          this._refreshValue();
        } else {
          if ( this.options.values && this.options.values.length ) {
            return this._values( index );
          } else {
            return this.value();
          }
        }
      } else {
        return this._values();
      }
    },

    _setOption: function( key, value ) {
      var i,
        valsLength = 0;

      if ( key === "range" && this.options.range === true ) {
        if ( value === "min" ) {
          this.options.value = this._values( 0 );
          this.options.values = null;
        } else if ( value === "max" ) {
          this.options.value = this._values( this.options.values.length-1 );
          this.options.values = null;
        }
      }

      if ( $.isArray( this.options.values ) ) {
        valsLength = this.options.values.length;
      }

      $.Widget.prototype._setOption.apply( this, arguments );

      switch ( key ) {
        case "orientation":
          this._detectOrientation();
          this.element
            .removeClass( "ui-slider-horizontal ui-slider-vertical" )
            .addClass( "ui-slider-" + this.orientation );
          this._refreshValue();
          break;
        case "value":
          this._animateOff = true;
          this._refreshValue();
          this._change( null, 0 );
          this._animateOff = false;
          break;
        case "values":
          this._animateOff = true;
          this._refreshValue();
          for ( i = 0; i < valsLength; i += 1 ) {
            this._change( null, i );
          }
          this._animateOff = false;
          break;
        case "min":
        case "max":
          this._animateOff = true;
          this._refreshValue();
          this._animateOff = false;
          break;
        case "range":
          this._animateOff = true;
          this._refresh();
          this._animateOff = false;
          break;
      }
    },

    //internal value getter
    // _value() returns value trimmed by min and max, aligned by step
    _value: function() {
      var val = this.options.value;
      val = this._trimAlignValue( val );

      return val;
    },

    //internal values getter
    // _values() returns array of values trimmed by min and max, aligned by step
    // _values( index ) returns single value trimmed by min and max, aligned by step
    _values: function( index ) {
      var val,
        vals,
        i;

      if ( arguments.length ) {
        val = this.options.values[ index ];
        val = this._trimAlignValue( val );

        return val;
      } else if ( this.options.values && this.options.values.length ) {
        // .slice() creates a copy of the array
        // this copy gets trimmed by min and max and then returned
        vals = this.options.values.slice();
        for ( i = 0; i < vals.length; i+= 1) {
          vals[ i ] = this._trimAlignValue( vals[ i ] );
        }

        return vals;
      } else {
        return [];
      }
    },

    // returns the step-aligned value that val is closest to, between (inclusive) min and max
    _trimAlignValue: function( val ) {
      if ( val <= this._valueMin() ) {
        return this._valueMin();
      }
      if ( val >= this._valueMax() ) {
        return this._valueMax();
      }
      var step = ( this.options.step > 0 ) ? this.options.step : 1,
        valModStep = (val - this._valueMin()) % step,
        alignValue = val - valModStep;

      if ( Math.abs(valModStep) * 2 >= step ) {
        alignValue += ( valModStep > 0 ) ? step : ( -step );
      }

      // Since JavaScript has problems with large floats, round
      // the final value to 5 digits after the decimal point (see #4124)
      return parseFloat( alignValue.toFixed(5) );
    },

    _valueMin: function() {
      return this.options.min;
    },

    _valueMax: function() {
      return this.options.max;
    },

    _refreshValue: function() {
      var lastValPercent, valPercent, value, valueMin, valueMax,
        oRange = this.options.range,
        o = this.options,
        that = this,
        animate = ( !this._animateOff ) ? o.animate : false,
        _set = {};

      if ( this.options.values && this.options.values.length ) {
        this.handles.each(function( i ) {
          valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;
          _set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
          $( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
          if ( that.options.range === true ) {
            if ( that.orientation === "horizontal" ) {
              if ( i === 0 ) {
                that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
              }
              if ( i === 1 ) {
                that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
              }
            } else {
              if ( i === 0 ) {
                that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
              }
              if ( i === 1 ) {
                that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
              }
            }
          }
          lastValPercent = valPercent;
        });
      } else {
        value = this.value();
        valueMin = this._valueMin();
        valueMax = this._valueMax();
        valPercent = ( valueMax !== valueMin ) ?
            ( value - valueMin ) / ( valueMax - valueMin ) * 100 :
            0;
        _set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
        this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

        if ( oRange === "min" && this.orientation === "horizontal" ) {
          this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
        }
        if ( oRange === "max" && this.orientation === "horizontal" ) {
          this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
        }
        if ( oRange === "min" && this.orientation === "vertical" ) {
          this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
        }
        if ( oRange === "max" && this.orientation === "vertical" ) {
          this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
        }
      }
    },

    _handleEvents: {
      keydown: function( event ) {
        /*jshint maxcomplexity:25*/
        var allowed, curVal, newVal, step,
          index = $( event.target ).data( "ui-slider-handle-index" );

        switch ( event.keyCode ) {
          case $.ui.keyCode.HOME:
          case $.ui.keyCode.END:
          case $.ui.keyCode.PAGE_UP:
          case $.ui.keyCode.PAGE_DOWN:
          case $.ui.keyCode.UP:
          case $.ui.keyCode.RIGHT:
          case $.ui.keyCode.DOWN:
          case $.ui.keyCode.LEFT:
            event.preventDefault();
            if ( !this._keySliding ) {
              this._keySliding = true;
              $( event.target ).addClass( "ui-state-active" );
              allowed = this._start( event, index );
              if ( allowed === false ) {
                return;
              }
            }
            break;
        }

        step = this.options.step;
        if ( this.options.values && this.options.values.length ) {
          curVal = newVal = this.values( index );
        } else {
          curVal = newVal = this.value();
        }

        switch ( event.keyCode ) {
          case $.ui.keyCode.HOME:
            newVal = this._valueMin();
            break;
          case $.ui.keyCode.END:
            newVal = this._valueMax();
            break;
          case $.ui.keyCode.PAGE_UP:
            newVal = this._trimAlignValue( curVal + ( (this._valueMax() - this._valueMin()) / numPages ) );
            break;
          case $.ui.keyCode.PAGE_DOWN:
            newVal = this._trimAlignValue( curVal - ( (this._valueMax() - this._valueMin()) / numPages ) );
            break;
          case $.ui.keyCode.UP:
          case $.ui.keyCode.RIGHT:
            if ( curVal === this._valueMax() ) {
              return;
            }
            newVal = this._trimAlignValue( curVal + step );
            break;
          case $.ui.keyCode.DOWN:
          case $.ui.keyCode.LEFT:
            if ( curVal === this._valueMin() ) {
              return;
            }
            newVal = this._trimAlignValue( curVal - step );
            break;
        }

        this._slide( event, index, newVal );
      },
      click: function( event ) {
        event.preventDefault();
      },
      keyup: function( event ) {
        var index = $( event.target ).data( "ui-slider-handle-index" );

        if ( this._keySliding ) {
          this._keySliding = false;
          this._stop( event, index );
          this._change( event, index );
          $( event.target ).removeClass( "ui-state-active" );
        }
      }
    }

  });

  }(jQuery));

  (function( $ ) {

  function modifier( fn ) {
    return function() {
      var previous = this.element.val();
      fn.apply( this, arguments );
      this._refresh();
      if ( previous !== this.element.val() ) {
        this._trigger( "change" );
      }
    };
  }

  $.widget( "ui.spinner", {
    version: "1.10.3",
    defaultElement: "<input>",
    widgetEventPrefix: "spin",
    options: {
      culture: null,
      icons: {
        down: "ui-icon-triangle-1-s",
        up: "ui-icon-triangle-1-n"
      },
      incremental: true,
      max: null,
      min: null,
      numberFormat: null,
      page: 10,
      step: 1,

      change: null,
      spin: null,
      start: null,
      stop: null
    },

    _create: function() {
      // handle string values that need to be parsed
      this._setOption( "max", this.options.max );
      this._setOption( "min", this.options.min );
      this._setOption( "step", this.options.step );

      // format the value, but don't constrain
      this._value( this.element.val(), true );

      this._draw();
      this._on( this._events );
      this._refresh();

      // turning off autocomplete prevents the browser from remembering the
      // value when navigating through history, so we re-enable autocomplete
      // if the page is unloaded before the widget is destroyed. #7790
      this._on( this.window, {
        beforeunload: function() {
          this.element.removeAttr( "autocomplete" );
        }
      });
    },

    _getCreateOptions: function() {
      var options = {},
        element = this.element;

      $.each( [ "min", "max", "step" ], function( i, option ) {
        var value = element.attr( option );
        if ( value !== undefined && value.length ) {
          options[ option ] = value;
        }
      });

      return options;
    },

    _events: {
      keydown: function( event ) {
        if ( this._start( event ) && this._keydown( event ) ) {
          event.preventDefault();
        }
      },
      keyup: "_stop",
      focus: function() {
        this.previous = this.element.val();
      },
      blur: function( event ) {
        if ( this.cancelBlur ) {
          delete this.cancelBlur;
          return;
        }

        this._stop();
        this._refresh();
        if ( this.previous !== this.element.val() ) {
          this._trigger( "change", event );
        }
      },
      mousewheel: function( event, delta ) {
        if ( !delta ) {
          return;
        }
        if ( !this.spinning && !this._start( event ) ) {
          return false;
        }

        this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
        clearTimeout( this.mousewheelTimer );
        this.mousewheelTimer = this._delay(function() {
          if ( this.spinning ) {
            this._stop( event );
          }
        }, 100 );
        event.preventDefault();
      },
      "mousedown .ui-spinner-button": function( event ) {
        var previous;

        // We never want the buttons to have focus; whenever the user is
        // interacting with the spinner, the focus should be on the input.
        // If the input is focused then this.previous is properly set from
        // when the input first received focus. If the input is not focused
        // then we need to set this.previous based on the value before spinning.
        previous = this.element[0] === this.document[0].activeElement ?
          this.previous : this.element.val();
        function checkFocus() {
          var isActive = this.element[0] === this.document[0].activeElement;
          if ( !isActive ) {
            this.element.focus();
            this.previous = previous;
            // support: IE
            // IE sets focus asynchronously, so we need to check if focus
            // moved off of the input because the user clicked on the button.
            this._delay(function() {
              this.previous = previous;
            });
          }
        }

        // ensure focus is on (or stays on) the text field
        event.preventDefault();
        checkFocus.call( this );

        // support: IE
        // IE doesn't prevent moving focus even with event.preventDefault()
        // so we set a flag to know when we should ignore the blur event
        // and check (again) if focus moved off of the input.
        this.cancelBlur = true;
        this._delay(function() {
          delete this.cancelBlur;
          checkFocus.call( this );
        });

        if ( this._start( event ) === false ) {
          return;
        }

        this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
      },
      "mouseup .ui-spinner-button": "_stop",
      "mouseenter .ui-spinner-button": function( event ) {
        // button will add ui-state-active if mouse was down while mouseleave and kept down
        if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
          return;
        }

        if ( this._start( event ) === false ) {
          return false;
        }
        this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
      },
      // TODO: do we really want to consider this a stop?
      // shouldn't we just stop the repeater and wait until mouseup before
      // we trigger the stop event?
      "mouseleave .ui-spinner-button": "_stop"
    },

    _draw: function() {
      var uiSpinner = this.uiSpinner = this.element
        .addClass( "ui-spinner-input" )
        .attr( "autocomplete", "off" )
        .wrap( this._uiSpinnerHtml() )
        .parent()
          // add buttons
          .append( this._buttonHtml() );

      this.element.attr( "role", "spinbutton" );

      // button bindings
      this.buttons = uiSpinner.find( ".ui-spinner-button" )
        .attr( "tabIndex", -1 )
        .button()
        .removeClass( "ui-corner-all" );

      // IE 6 doesn't understand height: 50% for the buttons
      // unless the wrapper has an explicit height
      if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&
          uiSpinner.height() > 0 ) {
        uiSpinner.height( uiSpinner.height() );
      }

      // disable spinner if element was already disabled
      if ( this.options.disabled ) {
        this.disable();
      }
    },

    _keydown: function( event ) {
      var options = this.options,
        keyCode = $.ui.keyCode;

      switch ( event.keyCode ) {
      case keyCode.UP:
        this._repeat( null, 1, event );
        return true;
      case keyCode.DOWN:
        this._repeat( null, -1, event );
        return true;
      case keyCode.PAGE_UP:
        this._repeat( null, options.page, event );
        return true;
      case keyCode.PAGE_DOWN:
        this._repeat( null, -options.page, event );
        return true;
      }

      return false;
    },

    _uiSpinnerHtml: function() {
      return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
    },

    _buttonHtml: function() {
      return "" +
        "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" +
          "<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" +
        "</a>" +
        "<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" +
          "<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" +
        "</a>";
    },

    _start: function( event ) {
      if ( !this.spinning && this._trigger( "start", event ) === false ) {
        return false;
      }

      if ( !this.counter ) {
        this.counter = 1;
      }
      this.spinning = true;
      return true;
    },

    _repeat: function( i, steps, event ) {
      i = i || 500;

      clearTimeout( this.timer );
      this.timer = this._delay(function() {
        this._repeat( 40, steps, event );
      }, i );

      this._spin( steps * this.options.step, event );
    },

    _spin: function( step, event ) {
      var value = this.value() || 0;

      if ( !this.counter ) {
        this.counter = 1;
      }

      value = this._adjustValue( value + step * this._increment( this.counter ) );

      if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {
        this._value( value );
        this.counter++;
      }
    },

    _increment: function( i ) {
      var incremental = this.options.incremental;

      if ( incremental ) {
        return $.isFunction( incremental ) ?
          incremental( i ) :
          Math.floor( i*i*i/50000 - i*i/500 + 17*i/200 + 1 );
      }

      return 1;
    },

    _precision: function() {
      var precision = this._precisionOf( this.options.step );
      if ( this.options.min !== null ) {
        precision = Math.max( precision, this._precisionOf( this.options.min ) );
      }
      return precision;
    },

    _precisionOf: function( num ) {
      var str = num.toString(),
        decimal = str.indexOf( "." );
      return decimal === -1 ? 0 : str.length - decimal - 1;
    },

    _adjustValue: function( value ) {
      var base, aboveMin,
        options = this.options;

      // make sure we're at a valid step
      // - find out where we are relative to the base (min or 0)
      base = options.min !== null ? options.min : 0;
      aboveMin = value - base;
      // - round to the nearest step
      aboveMin = Math.round(aboveMin / options.step) * options.step;
      // - rounding is based on 0, so adjust back to our base
      value = base + aboveMin;

      // fix precision from bad JS floating point math
      value = parseFloat( value.toFixed( this._precision() ) );

      // clamp the value
      if ( options.max !== null && value > options.max) {
        return options.max;
      }
      if ( options.min !== null && value < options.min ) {
        return options.min;
      }

      return value;
    },

    _stop: function( event ) {
      if ( !this.spinning ) {
        return;
      }

      clearTimeout( this.timer );
      clearTimeout( this.mousewheelTimer );
      this.counter = 0;
      this.spinning = false;
      this._trigger( "stop", event );
    },

    _setOption: function( key, value ) {
      if ( key === "culture" || key === "numberFormat" ) {
        var prevValue = this._parse( this.element.val() );
        this.options[ key ] = value;
        this.element.val( this._format( prevValue ) );
        return;
      }

      if ( key === "max" || key === "min" || key === "step" ) {
        if ( typeof value === "string" ) {
          value = this._parse( value );
        }
      }
      if ( key === "icons" ) {
        this.buttons.first().find( ".ui-icon" )
          .removeClass( this.options.icons.up )
          .addClass( value.up );
        this.buttons.last().find( ".ui-icon" )
          .removeClass( this.options.icons.down )
          .addClass( value.down );
      }

      this._super( key, value );

      if ( key === "disabled" ) {
        if ( value ) {
          this.element.prop( "disabled", true );
          this.buttons.button( "disable" );
        } else {
          this.element.prop( "disabled", false );
          this.buttons.button( "enable" );
        }
      }
    },

    _setOptions: modifier(function( options ) {
      this._super( options );
      this._value( this.element.val() );
    }),

    _parse: function( val ) {
      if ( typeof val === "string" && val !== "" ) {
        val = window.Globalize && this.options.numberFormat ?
          Globalize.parseFloat( val, 10, this.options.culture ) : +val;
      }
      return val === "" || isNaN( val ) ? null : val;
    },

    _format: function( value ) {
      if ( value === "" ) {
        return "";
      }
      return window.Globalize && this.options.numberFormat ?
        Globalize.format( value, this.options.numberFormat, this.options.culture ) :
        value;
    },

    _refresh: function() {
      this.element.attr({
        "aria-valuemin": this.options.min,
        "aria-valuemax": this.options.max,
        // TODO: what should we do with values that can't be parsed?
        "aria-valuenow": this._parse( this.element.val() )
      });
    },

    // update the value without triggering change
    _value: function( value, allowAny ) {
      var parsed;
      if ( value !== "" ) {
        parsed = this._parse( value );
        if ( parsed !== null ) {
          if ( !allowAny ) {
            parsed = this._adjustValue( parsed );
          }
          value = this._format( parsed );
        }
      }
      this.element.val( value );
      this._refresh();
    },

    _destroy: function() {
      this.element
        .removeClass( "ui-spinner-input" )
        .prop( "disabled", false )
        .removeAttr( "autocomplete" )
        .removeAttr( "role" )
        .removeAttr( "aria-valuemin" )
        .removeAttr( "aria-valuemax" )
        .removeAttr( "aria-valuenow" );
      this.uiSpinner.replaceWith( this.element );
    },

    stepUp: modifier(function( steps ) {
      this._stepUp( steps );
    }),
    _stepUp: function( steps ) {
      if ( this._start() ) {
        this._spin( (steps || 1) * this.options.step );
        this._stop();
      }
    },

    stepDown: modifier(function( steps ) {
      this._stepDown( steps );
    }),
    _stepDown: function( steps ) {
      if ( this._start() ) {
        this._spin( (steps || 1) * -this.options.step );
        this._stop();
      }
    },

    pageUp: modifier(function( pages ) {
      this._stepUp( (pages || 1) * this.options.page );
    }),

    pageDown: modifier(function( pages ) {
      this._stepDown( (pages || 1) * this.options.page );
    }),

    value: function( newVal ) {
      if ( !arguments.length ) {
        return this._parse( this.element.val() );
      }
      modifier( this._value ).call( this, newVal );
    },

    widget: function() {
      return this.uiSpinner;
    }
  });

  }( jQuery ) );

  (function( $, undefined ) {

  var tabId = 0,
    rhash = /#.*$/;

  function getNextTabId() {
    return ++tabId;
  }

  function isLocal( anchor ) {
    return anchor.hash.length > 1 &&
      decodeURIComponent( anchor.href.replace( rhash, "" ) ) ===
        decodeURIComponent( location.href.replace( rhash, "" ) );
  }

  $.widget( "ui.tabs", {
    version: "1.10.3",
    delay: 300,
    options: {
      active: null,
      collapsible: false,
      event: "click",
      heightStyle: "content",
      hide: null,
      show: null,

      // callbacks
      activate: null,
      beforeActivate: null,
      beforeLoad: null,
      load: null
    },

    _create: function() {
      var that = this,
        options = this.options;

      this.running = false;

      this.element
        .addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" )
        .toggleClass( "ui-tabs-collapsible", options.collapsible )
        // Prevent users from focusing disabled tabs via click
        .delegate( ".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function( event ) {
          if ( $( this ).is( ".ui-state-disabled" ) ) {
            event.preventDefault();
          }
        })
        // support: IE <9
        // Preventing the default action in mousedown doesn't prevent IE
        // from focusing the element, so if the anchor gets focused, blur.
        // We don't have to worry about focusing the previously focused
        // element since clicking on a non-focusable element should focus
        // the body anyway.
        .delegate( ".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
          if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
            this.blur();
          }
        });

      this._processTabs();
      options.active = this._initialActive();

      // Take disabling tabs via class attribute from HTML
      // into account and update option properly.
      if ( $.isArray( options.disabled ) ) {
        options.disabled = $.unique( options.disabled.concat(
          $.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
            return that.tabs.index( li );
          })
        ) ).sort();
      }

      // check for length avoids error when initializing empty list
      if ( this.options.active !== false && this.anchors.length ) {
        this.active = this._findActive( options.active );
      } else {
        this.active = $();
      }

      this._refresh();

      if ( this.active.length ) {
        this.load( options.active );
      }
    },

    _initialActive: function() {
      var active = this.options.active,
        collapsible = this.options.collapsible,
        locationHash = location.hash.substring( 1 );

      if ( active === null ) {
        // check the fragment identifier in the URL
        if ( locationHash ) {
          this.tabs.each(function( i, tab ) {
            if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
              active = i;
              return false;
            }
          });
        }

        // check for a tab marked active via a class
        if ( active === null ) {
          active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
        }

        // no active tab, set to false
        if ( active === null || active === -1 ) {
          active = this.tabs.length ? 0 : false;
        }
      }

      // handle numbers: negative, out of range
      if ( active !== false ) {
        active = this.tabs.index( this.tabs.eq( active ) );
        if ( active === -1 ) {
          active = collapsible ? false : 0;
        }
      }

      // don't allow collapsible: false and active: false
      if ( !collapsible && active === false && this.anchors.length ) {
        active = 0;
      }

      return active;
    },

    _getCreateEventData: function() {
      return {
        tab: this.active,
        panel: !this.active.length ? $() : this._getPanelForTab( this.active )
      };
    },

    _tabKeydown: function( event ) {
      /*jshint maxcomplexity:15*/
      var focusedTab = $( this.document[0].activeElement ).closest( "li" ),
        selectedIndex = this.tabs.index( focusedTab ),
        goingForward = true;

      if ( this._handlePageNav( event ) ) {
        return;
      }

      switch ( event.keyCode ) {
        case $.ui.keyCode.RIGHT:
        case $.ui.keyCode.DOWN:
          selectedIndex++;
          break;
        case $.ui.keyCode.UP:
        case $.ui.keyCode.LEFT:
          goingForward = false;
          selectedIndex--;
          break;
        case $.ui.keyCode.END:
          selectedIndex = this.anchors.length - 1;
          break;
        case $.ui.keyCode.HOME:
          selectedIndex = 0;
          break;
        case $.ui.keyCode.SPACE:
          // Activate only, no collapsing
          event.preventDefault();
          clearTimeout( this.activating );
          this._activate( selectedIndex );
          return;
        case $.ui.keyCode.ENTER:
          // Toggle (cancel delayed activation, allow collapsing)
          event.preventDefault();
          clearTimeout( this.activating );
          // Determine if we should collapse or activate
          this._activate( selectedIndex === this.options.active ? false : selectedIndex );
          return;
        default:
          return;
      }

      // Focus the appropriate tab, based on which key was pressed
      event.preventDefault();
      clearTimeout( this.activating );
      selectedIndex = this._focusNextTab( selectedIndex, goingForward );

      // Navigating with control key will prevent automatic activation
      if ( !event.ctrlKey ) {
        // Update aria-selected immediately so that AT think the tab is already selected.
        // Otherwise AT may confuse the user by stating that they need to activate the tab,
        // but the tab will already be activated by the time the announcement finishes.
        focusedTab.attr( "aria-selected", "false" );
        this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

        this.activating = this._delay(function() {
          this.option( "active", selectedIndex );
        }, this.delay );
      }
    },

    _panelKeydown: function( event ) {
      if ( this._handlePageNav( event ) ) {
        return;
      }

      // Ctrl+up moves focus to the current tab
      if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
        event.preventDefault();
        this.active.focus();
      }
    },

    // Alt+page up/down moves focus to the previous/next tab (and activates)
    _handlePageNav: function( event ) {
      if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
        this._activate( this._focusNextTab( this.options.active - 1, false ) );
        return true;
      }
      if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
        this._activate( this._focusNextTab( this.options.active + 1, true ) );
        return true;
      }
    },

    _findNextTab: function( index, goingForward ) {
      var lastTabIndex = this.tabs.length - 1;

      function constrain() {
        if ( index > lastTabIndex ) {
          index = 0;
        }
        if ( index < 0 ) {
          index = lastTabIndex;
        }
        return index;
      }

      while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
        index = goingForward ? index + 1 : index - 1;
      }

      return index;
    },

    _focusNextTab: function( index, goingForward ) {
      index = this._findNextTab( index, goingForward );
      this.tabs.eq( index ).focus();
      return index;
    },

    _setOption: function( key, value ) {
      if ( key === "active" ) {
        // _activate() will handle invalid values and update this.options
        this._activate( value );
        return;
      }

      if ( key === "disabled" ) {
        // don't use the widget factory's disabled handling
        this._setupDisabled( value );
        return;
      }

      this._super( key, value);

      if ( key === "collapsible" ) {
        this.element.toggleClass( "ui-tabs-collapsible", value );
        // Setting collapsible: false while collapsed; open first panel
        if ( !value && this.options.active === false ) {
          this._activate( 0 );
        }
      }

      if ( key === "event" ) {
        this._setupEvents( value );
      }

      if ( key === "heightStyle" ) {
        this._setupHeightStyle( value );
      }
    },

    _tabId: function( tab ) {
      return tab.attr( "aria-controls" ) || "ui-tabs-" + getNextTabId();
    },

    _sanitizeSelector: function( hash ) {
      return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
    },

    refresh: function() {
      var options = this.options,
        lis = this.tablist.children( ":has(a[href])" );

      // get disabled tabs from class attribute from HTML
      // this will get converted to a boolean if needed in _refresh()
      options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
        return lis.index( tab );
      });

      this._processTabs();

      // was collapsed or no tabs
      if ( options.active === false || !this.anchors.length ) {
        options.active = false;
        this.active = $();
      // was active, but active tab is gone
      } else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {
        // all remaining tabs are disabled
        if ( this.tabs.length === options.disabled.length ) {
          options.active = false;
          this.active = $();
        // activate previous tab
        } else {
          this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
        }
      // was active, active tab still exists
      } else {
        // make sure active index is correct
        options.active = this.tabs.index( this.active );
      }

      this._refresh();
    },

    _refresh: function() {
      this._setupDisabled( this.options.disabled );
      this._setupEvents( this.options.event );
      this._setupHeightStyle( this.options.heightStyle );

      this.tabs.not( this.active ).attr({
        "aria-selected": "false",
        tabIndex: -1
      });
      this.panels.not( this._getPanelForTab( this.active ) )
        .hide()
        .attr({
          "aria-expanded": "false",
          "aria-hidden": "true"
        });

      // Make sure one tab is in the tab order
      if ( !this.active.length ) {
        this.tabs.eq( 0 ).attr( "tabIndex", 0 );
      } else {
        this.active
          .addClass( "ui-tabs-active ui-state-active" )
          .attr({
            "aria-selected": "true",
            tabIndex: 0
          });
        this._getPanelForTab( this.active )
          .show()
          .attr({
            "aria-expanded": "true",
            "aria-hidden": "false"
          });
      }
    },

    _processTabs: function() {
      var that = this;

      this.tablist = this._getList()
        .addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
        .attr( "role", "tablist" );

      this.tabs = this.tablist.find( "> li:has(a[href])" )
        .addClass( "ui-state-default ui-corner-top" )
        .attr({
          role: "tab",
          tabIndex: -1
        });

      this.anchors = this.tabs.map(function() {
          return $( "a", this )[ 0 ];
        })
        .addClass( "ui-tabs-anchor" )
        .attr({
          role: "presentation",
          tabIndex: -1
        });

      this.panels = $();

      this.anchors.each(function( i, anchor ) {
        var selector, panel, panelId,
          anchorId = $( anchor ).uniqueId().attr( "id" ),
          tab = $( anchor ).closest( "li" ),
          originalAriaControls = tab.attr( "aria-controls" );

        // inline tab
        if ( isLocal( anchor ) ) {
          selector = anchor.hash;
          panel = that.element.find( that._sanitizeSelector( selector ) );
        // remote tab
        } else {
          panelId = that._tabId( tab );
          selector = "#" + panelId;
          panel = that.element.find( selector );
          if ( !panel.length ) {
            panel = that._createPanel( panelId );
            panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
          }
          panel.attr( "aria-live", "polite" );
        }

        if ( panel.length) {
          that.panels = that.panels.add( panel );
        }
        if ( originalAriaControls ) {
          tab.data( "ui-tabs-aria-controls", originalAriaControls );
        }
        tab.attr({
          "aria-controls": selector.substring( 1 ),
          "aria-labelledby": anchorId
        });
        panel.attr( "aria-labelledby", anchorId );
      });

      this.panels
        .addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
        .attr( "role", "tabpanel" );
    },

    // allow overriding how to find the list for rare usage scenarios (#7715)
    _getList: function() {
      return this.element.find( "ol,ul" ).eq( 0 );
    },

    _createPanel: function( id ) {
      return $( "<div>" )
        .attr( "id", id )
        .addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
        .data( "ui-tabs-destroy", true );
    },

    _setupDisabled: function( disabled ) {
      if ( $.isArray( disabled ) ) {
        if ( !disabled.length ) {
          disabled = false;
        } else if ( disabled.length === this.anchors.length ) {
          disabled = true;
        }
      }

      // disable tabs
      for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {
        if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
          $( li )
            .addClass( "ui-state-disabled" )
            .attr( "aria-disabled", "true" );
        } else {
          $( li )
            .removeClass( "ui-state-disabled" )
            .removeAttr( "aria-disabled" );
        }
      }

      this.options.disabled = disabled;
    },

    _setupEvents: function( event ) {
      var events = {
        click: function( event ) {
          event.preventDefault();
        }
      };
      if ( event ) {
        $.each( event.split(" "), function( index, eventName ) {
          events[ eventName ] = "_eventHandler";
        });
      }

      this._off( this.anchors.add( this.tabs ).add( this.panels ) );
      this._on( this.anchors, events );
      this._on( this.tabs, { keydown: "_tabKeydown" } );
      this._on( this.panels, { keydown: "_panelKeydown" } );

      this._focusable( this.tabs );
      this._hoverable( this.tabs );
    },

    _setupHeightStyle: function( heightStyle ) {
      var maxHeight,
        parent = this.element.parent();

      if ( heightStyle === "fill" ) {
        maxHeight = parent.height();
        maxHeight -= this.element.outerHeight() - this.element.height();

        this.element.siblings( ":visible" ).each(function() {
          var elem = $( this ),
            position = elem.css( "position" );

          if ( position === "absolute" || position === "fixed" ) {
            return;
          }
          maxHeight -= elem.outerHeight( true );
        });

        this.element.children().not( this.panels ).each(function() {
          maxHeight -= $( this ).outerHeight( true );
        });

        this.panels.each(function() {
          $( this ).height( Math.max( 0, maxHeight -
            $( this ).innerHeight() + $( this ).height() ) );
        })
        .css( "overflow", "auto" );
      } else if ( heightStyle === "auto" ) {
        maxHeight = 0;
        this.panels.each(function() {
          maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
        }).height( maxHeight );
      }
    },

    _eventHandler: function( event ) {
      var options = this.options,
        active = this.active,
        anchor = $( event.currentTarget ),
        tab = anchor.closest( "li" ),
        clickedIsActive = tab[ 0 ] === active[ 0 ],
        collapsing = clickedIsActive && options.collapsible,
        toShow = collapsing ? $() : this._getPanelForTab( tab ),
        toHide = !active.length ? $() : this._getPanelForTab( active ),
        eventData = {
          oldTab: active,
          oldPanel: toHide,
          newTab: collapsing ? $() : tab,
          newPanel: toShow
        };

      event.preventDefault();

      if ( tab.hasClass( "ui-state-disabled" ) ||
          // tab is already loading
          tab.hasClass( "ui-tabs-loading" ) ||
          // can't switch durning an animation
          this.running ||
          // click on active header, but not collapsible
          ( clickedIsActive && !options.collapsible ) ||
          // allow canceling activation
          ( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
        return;
      }

      options.active = collapsing ? false : this.tabs.index( tab );

      this.active = clickedIsActive ? $() : tab;
      if ( this.xhr ) {
        this.xhr.abort();
      }

      if ( !toHide.length && !toShow.length ) {
        $.error( "jQuery UI Tabs: Mismatching fragment identifier." );
      }

      if ( toShow.length ) {
        this.load( this.tabs.index( tab ), event );
      }
      this._toggle( event, eventData );
    },

    // handles show/hide for selecting tabs
    _toggle: function( event, eventData ) {
      var that = this,
        toShow = eventData.newPanel,
        toHide = eventData.oldPanel;

      this.running = true;

      function complete() {
        that.running = false;
        that._trigger( "activate", event, eventData );
      }

      function show() {
        eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );

        if ( toShow.length && that.options.show ) {
          that._show( toShow, that.options.show, complete );
        } else {
          toShow.show();
          complete();
        }
      }

      // start out by hiding, then showing, then completing
      if ( toHide.length && this.options.hide ) {
        this._hide( toHide, this.options.hide, function() {
          eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
          show();
        });
      } else {
        eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
        toHide.hide();
        show();
      }

      toHide.attr({
        "aria-expanded": "false",
        "aria-hidden": "true"
      });
      eventData.oldTab.attr( "aria-selected", "false" );
      // If we're switching tabs, remove the old tab from the tab order.
      // If we're opening from collapsed state, remove the previous tab from the tab order.
      // If we're collapsing, then keep the collapsing tab in the tab order.
      if ( toShow.length && toHide.length ) {
        eventData.oldTab.attr( "tabIndex", -1 );
      } else if ( toShow.length ) {
        this.tabs.filter(function() {
          return $( this ).attr( "tabIndex" ) === 0;
        })
        .attr( "tabIndex", -1 );
      }

      toShow.attr({
        "aria-expanded": "true",
        "aria-hidden": "false"
      });
      eventData.newTab.attr({
        "aria-selected": "true",
        tabIndex: 0
      });
    },

    _activate: function( index ) {
      var anchor,
        active = this._findActive( index );

      // trying to activate the already active panel
      if ( active[ 0 ] === this.active[ 0 ] ) {
        return;
      }

      // trying to collapse, simulate a click on the current active header
      if ( !active.length ) {
        active = this.active;
      }

      anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
      this._eventHandler({
        target: anchor,
        currentTarget: anchor,
        preventDefault: $.noop
      });
    },

    _findActive: function( index ) {
      return index === false ? $() : this.tabs.eq( index );
    },

    _getIndex: function( index ) {
      // meta-function to give users option to provide a href string instead of a numerical index.
      if ( typeof index === "string" ) {
        index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
      }

      return index;
    },

    _destroy: function() {
      if ( this.xhr ) {
        this.xhr.abort();
      }

      this.element.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" );

      this.tablist
        .removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
        .removeAttr( "role" );

      this.anchors
        .removeClass( "ui-tabs-anchor" )
        .removeAttr( "role" )
        .removeAttr( "tabIndex" )
        .removeUniqueId();

      this.tabs.add( this.panels ).each(function() {
        if ( $.data( this, "ui-tabs-destroy" ) ) {
          $( this ).remove();
        } else {
          $( this )
            .removeClass( "ui-state-default ui-state-active ui-state-disabled " +
              "ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel" )
            .removeAttr( "tabIndex" )
            .removeAttr( "aria-live" )
            .removeAttr( "aria-busy" )
            .removeAttr( "aria-selected" )
            .removeAttr( "aria-labelledby" )
            .removeAttr( "aria-hidden" )
            .removeAttr( "aria-expanded" )
            .removeAttr( "role" );
        }
      });

      this.tabs.each(function() {
        var li = $( this ),
          prev = li.data( "ui-tabs-aria-controls" );
        if ( prev ) {
          li
            .attr( "aria-controls", prev )
            .removeData( "ui-tabs-aria-controls" );
        } else {
          li.removeAttr( "aria-controls" );
        }
      });

      this.panels.show();

      if ( this.options.heightStyle !== "content" ) {
        this.panels.css( "height", "" );
      }
    },

    enable: function( index ) {
      var disabled = this.options.disabled;
      if ( disabled === false ) {
        return;
      }

      if ( index === undefined ) {
        disabled = false;
      } else {
        index = this._getIndex( index );
        if ( $.isArray( disabled ) ) {
          disabled = $.map( disabled, function( num ) {
            return num !== index ? num : null;
          });
        } else {
          disabled = $.map( this.tabs, function( li, num ) {
            return num !== index ? num : null;
          });
        }
      }
      this._setupDisabled( disabled );
    },

    disable: function( index ) {
      var disabled = this.options.disabled;
      if ( disabled === true ) {
        return;
      }

      if ( index === undefined ) {
        disabled = true;
      } else {
        index = this._getIndex( index );
        if ( $.inArray( index, disabled ) !== -1 ) {
          return;
        }
        if ( $.isArray( disabled ) ) {
          disabled = $.merge( [ index ], disabled ).sort();
        } else {
          disabled = [ index ];
        }
      }
      this._setupDisabled( disabled );
    },

    load: function( index, event ) {
      index = this._getIndex( index );
      var that = this,
        tab = this.tabs.eq( index ),
        anchor = tab.find( ".ui-tabs-anchor" ),
        panel = this._getPanelForTab( tab ),
        eventData = {
          tab: tab,
          panel: panel
        };

      // not remote
      if ( isLocal( anchor[ 0 ] ) ) {
        return;
      }

      this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

      // support: jQuery <1.8
      // jQuery <1.8 returns false if the request is canceled in beforeSend,
      // but as of 1.8, $.ajax() always returns a jqXHR object.
      if ( this.xhr && this.xhr.statusText !== "canceled" ) {
        tab.addClass( "ui-tabs-loading" );
        panel.attr( "aria-busy", "true" );

        this.xhr
          .success(function( response ) {
            // support: jQuery <1.8
            // http://bugs.jquery.com/ticket/11778
            setTimeout(function() {
              panel.html( response );
              that._trigger( "load", event, eventData );
            }, 1 );
          })
          .complete(function( jqXHR, status ) {
            // support: jQuery <1.8
            // http://bugs.jquery.com/ticket/11778
            setTimeout(function() {
              if ( status === "abort" ) {
                that.panels.stop( false, true );
              }

              tab.removeClass( "ui-tabs-loading" );
              panel.removeAttr( "aria-busy" );

              if ( jqXHR === that.xhr ) {
                delete that.xhr;
              }
            }, 1 );
          });
      }
    },

    _ajaxSettings: function( anchor, event, eventData ) {
      var that = this;
      return {
        url: anchor.attr( "href" ),
        beforeSend: function( jqXHR, settings ) {
          return that._trigger( "beforeLoad", event,
            $.extend( { jqXHR : jqXHR, ajaxSettings: settings }, eventData ) );
        }
      };
    },

    _getPanelForTab: function( tab ) {
      var id = $( tab ).attr( "aria-controls" );
      return this.element.find( this._sanitizeSelector( "#" + id ) );
    }
  });

  })( jQuery );

  (function( $ ) {

  var increments = 0;

  function addDescribedBy( elem, id ) {
    var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );
    describedby.push( id );
    elem
      .data( "ui-tooltip-id", id )
      .attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
  }

  function removeDescribedBy( elem ) {
    var id = elem.data( "ui-tooltip-id" ),
      describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),
      index = $.inArray( id, describedby );
    if ( index !== -1 ) {
      describedby.splice( index, 1 );
    }

    elem.removeData( "ui-tooltip-id" );
    describedby = $.trim( describedby.join( " " ) );
    if ( describedby ) {
      elem.attr( "aria-describedby", describedby );
    } else {
      elem.removeAttr( "aria-describedby" );
    }
  }

  $.widget( "ui.tooltip", {
    version: "1.10.3",
    options: {
      content: function() {
        // support: IE<9, Opera in jQuery <1.7
        // .text() can't accept undefined, so coerce to a string
        var title = $( this ).attr( "title" ) || "";
        // Escape title, since we're going from an attribute to raw HTML
        return $( "<a>" ).text( title ).html();
      },
      hide: true,
      // Disabled elements have inconsistent behavior across browsers (#8661)
      items: "[title]:not([disabled])",
      position: {
        my: "left top+15",
        at: "left bottom",
        collision: "flipfit flip"
      },
      show: true,
      tooltipClass: null,
      track: false,

      // callbacks
      close: null,
      open: null
    },

    _create: function() {
      this._on({
        mouseover: "open",
        focusin: "open"
      });

      // IDs of generated tooltips, needed for destroy
      this.tooltips = {};
      // IDs of parent tooltips where we removed the title attribute
      this.parents = {};

      if ( this.options.disabled ) {
        this._disable();
      }
    },

    _setOption: function( key, value ) {
      var that = this;

      if ( key === "disabled" ) {
        this[ value ? "_disable" : "_enable" ]();
        this.options[ key ] = value;
        // disable element style changes
        return;
      }

      this._super( key, value );

      if ( key === "content" ) {
        $.each( this.tooltips, function( id, element ) {
          that._updateContent( element );
        });
      }
    },

    _disable: function() {
      var that = this;

      // close open tooltips
      $.each( this.tooltips, function( id, element ) {
        var event = $.Event( "blur" );
        event.target = event.currentTarget = element[0];
        that.close( event, true );
      });

      // remove title attributes to prevent native tooltips
      this.element.find( this.options.items ).addBack().each(function() {
        var element = $( this );
        if ( element.is( "[title]" ) ) {
          element
            .data( "ui-tooltip-title", element.attr( "title" ) )
            .attr( "title", "" );
        }
      });
    },

    _enable: function() {
      // restore title attributes
      this.element.find( this.options.items ).addBack().each(function() {
        var element = $( this );
        if ( element.data( "ui-tooltip-title" ) ) {
          element.attr( "title", element.data( "ui-tooltip-title" ) );
        }
      });
    },

    open: function( event ) {
      var that = this,
        target = $( event ? event.target : this.element )
          // we need closest here due to mouseover bubbling,
          // but always pointing at the same event target
          .closest( this.options.items );

      // No element to show a tooltip for or the tooltip is already open
      if ( !target.length || target.data( "ui-tooltip-id" ) ) {
        return;
      }

      if ( target.attr( "title" ) ) {
        target.data( "ui-tooltip-title", target.attr( "title" ) );
      }

      target.data( "ui-tooltip-open", true );

      // kill parent tooltips, custom or native, for hover
      if ( event && event.type === "mouseover" ) {
        target.parents().each(function() {
          var parent = $( this ),
            blurEvent;
          if ( parent.data( "ui-tooltip-open" ) ) {
            blurEvent = $.Event( "blur" );
            blurEvent.target = blurEvent.currentTarget = this;
            that.close( blurEvent, true );
          }
          if ( parent.attr( "title" ) ) {
            parent.uniqueId();
            that.parents[ this.id ] = {
              element: this,
              title: parent.attr( "title" )
            };
            parent.attr( "title", "" );
          }
        });
      }

      this._updateContent( target, event );
    },

    _updateContent: function( target, event ) {
      var content,
        contentOption = this.options.content,
        that = this,
        eventType = event ? event.type : null;

      if ( typeof contentOption === "string" ) {
        return this._open( event, target, contentOption );
      }

      content = contentOption.call( target[0], function( response ) {
        // ignore async response if tooltip was closed already
        if ( !target.data( "ui-tooltip-open" ) ) {
          return;
        }
        // IE may instantly serve a cached response for ajax requests
        // delay this call to _open so the other call to _open runs first
        that._delay(function() {
          // jQuery creates a special event for focusin when it doesn't
          // exist natively. To improve performance, the native event
          // object is reused and the type is changed. Therefore, we can't
          // rely on the type being correct after the event finished
          // bubbling, so we set it back to the previous value. (#8740)
          if ( event ) {
            event.type = eventType;
          }
          this._open( event, target, response );
        });
      });
      if ( content ) {
        this._open( event, target, content );
      }
    },

    _open: function( event, target, content ) {
      var tooltip, events, delayedShow,
        positionOption = $.extend( {}, this.options.position );

      if ( !content ) {
        return;
      }

      // Content can be updated multiple times. If the tooltip already
      // exists, then just update the content and bail.
      tooltip = this._find( target );
      if ( tooltip.length ) {
        tooltip.find( ".ui-tooltip-content" ).html( content );
        return;
      }

      // if we have a title, clear it to prevent the native tooltip
      // we have to check first to avoid defining a title if none exists
      // (we don't want to cause an element to start matching [title])
      //
      // We use removeAttr only for key events, to allow IE to export the correct
      // accessible attributes. For mouse events, set to empty string to avoid
      // native tooltip showing up (happens only when removing inside mouseover).
      if ( target.is( "[title]" ) ) {
        if ( event && event.type === "mouseover" ) {
          target.attr( "title", "" );
        } else {
          target.removeAttr( "title" );
        }
      }

      tooltip = this._tooltip( target );
      addDescribedBy( target, tooltip.attr( "id" ) );
      tooltip.find( ".ui-tooltip-content" ).html( content );

      function position( event ) {
        positionOption.of = event;
        if ( tooltip.is( ":hidden" ) ) {
          return;
        }
        tooltip.position( positionOption );
      }
      if ( this.options.track && event && /^mouse/.test( event.type ) ) {
        this._on( this.document, {
          mousemove: position
        });
        // trigger once to override element-relative positioning
        position( event );
      } else {
        tooltip.position( $.extend({
          of: target
        }, this.options.position ) );
      }

      tooltip.hide();

      this._show( tooltip, this.options.show );
      // Handle tracking tooltips that are shown with a delay (#8644). As soon
      // as the tooltip is visible, position the tooltip using the most recent
      // event.
      if ( this.options.show && this.options.show.delay ) {
        delayedShow = this.delayedShow = setInterval(function() {
          if ( tooltip.is( ":visible" ) ) {
            position( positionOption.of );
            clearInterval( delayedShow );
          }
        }, $.fx.interval );
      }

      this._trigger( "open", event, { tooltip: tooltip } );

      events = {
        keyup: function( event ) {
          if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
            var fakeEvent = $.Event(event);
            fakeEvent.currentTarget = target[0];
            this.close( fakeEvent, true );
          }
        },
        remove: function() {
          this._removeTooltip( tooltip );
        }
      };
      if ( !event || event.type === "mouseover" ) {
        events.mouseleave = "close";
      }
      if ( !event || event.type === "focusin" ) {
        events.focusout = "close";
      }
      this._on( true, target, events );
    },

    close: function( event ) {
      var that = this,
        target = $( event ? event.currentTarget : this.element ),
        tooltip = this._find( target );

      // disabling closes the tooltip, so we need to track when we're closing
      // to avoid an infinite loop in case the tooltip becomes disabled on close
      if ( this.closing ) {
        return;
      }

      // Clear the interval for delayed tracking tooltips
      clearInterval( this.delayedShow );

      // only set title if we had one before (see comment in _open())
      if ( target.data( "ui-tooltip-title" ) ) {
        target.attr( "title", target.data( "ui-tooltip-title" ) );
      }

      removeDescribedBy( target );

      tooltip.stop( true );
      this._hide( tooltip, this.options.hide, function() {
        that._removeTooltip( $( this ) );
      });

      target.removeData( "ui-tooltip-open" );
      this._off( target, "mouseleave focusout keyup" );
      // Remove 'remove' binding only on delegated targets
      if ( target[0] !== this.element[0] ) {
        this._off( target, "remove" );
      }
      this._off( this.document, "mousemove" );

      if ( event && event.type === "mouseleave" ) {
        $.each( this.parents, function( id, parent ) {
          $( parent.element ).attr( "title", parent.title );
          delete that.parents[ id ];
        });
      }

      this.closing = true;
      this._trigger( "close", event, { tooltip: tooltip } );
      this.closing = false;
    },

    _tooltip: function( element ) {
      var id = "ui-tooltip-" + increments++,
        tooltip = $( "<div>" )
          .attr({
            id: id,
            role: "tooltip"
          })
          .addClass( "ui-tooltip ui-widget ui-corner-all ui-widget-content " +
            ( this.options.tooltipClass || "" ) );
      $( "<div>" )
        .addClass( "ui-tooltip-content" )
        .appendTo( tooltip );
      tooltip.appendTo( this.document[0].body );
      this.tooltips[ id ] = element;
      return tooltip;
    },

    _find: function( target ) {
      var id = target.data( "ui-tooltip-id" );
      return id ? $( "#" + id ) : $();
    },

    _removeTooltip: function( tooltip ) {
      tooltip.remove();
      delete this.tooltips[ tooltip.attr( "id" ) ];
    },

    _destroy: function() {
      var that = this;

      // close open tooltips
      $.each( this.tooltips, function( id, element ) {
        // Delegate to close method to handle common cleanup
        var event = $.Event( "blur" );
        event.target = event.currentTarget = element[0];
        that.close( event, true );

        // Remove immediately; destroying an open tooltip doesn't use the
        // hide animation
        $( "#" + id ).remove();

        // Restore the title
        if ( element.data( "ui-tooltip-title" ) ) {
          element.attr( "title", element.data( "ui-tooltip-title" ) );
          element.removeData( "ui-tooltip-title" );
        }
      });
    }
  });

  }( jQuery ) );


/***/ },
/* 3 */
/***/ function(module, exports) {

  (function($, undefined) {

  /**
   * Unobtrusive scripting adapter for jQuery
   * https://github.com/rails/jquery-ujs
   *
   * Requires jQuery 1.8.0 or later.
   *
   * Released under the MIT license
   *
   */

    // Cut down on the number of issues from people inadvertently including jquery_ujs twice
    // by detecting and raising an error when it happens.
    if ( $.rails !== undefined ) {
      $.error('jquery-ujs has already been loaded!');
    }

    // Shorthand to make it a little easier to call public rails functions from within rails.js
    var rails;
    var $document = $(document);

    $.rails = rails = {
      // Link elements bound by jquery-ujs
      linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote], a[data-disable-with], a[data-disable]',

      // Button elements bound by jquery-ujs
      buttonClickSelector: 'button[data-remote]:not(form button), button[data-confirm]:not(form button)',

      // Select elements bound by jquery-ujs
      inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',

      // Form elements bound by jquery-ujs
      formSubmitSelector: 'form',

      // Form input elements bound by jquery-ujs
      formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])',

      // Form input elements disabled during form submission
      disableSelector: 'input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled',

      // Form input elements re-enabled after form submission
      enableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled',

      // Form required input elements
      requiredInputSelector: 'input[name][required]:not([disabled]),textarea[name][required]:not([disabled])',

      // Form file input elements
      fileInputSelector: 'input[type=file]',

      // Link onClick disable selector with possible reenable after remote submission
      linkDisableSelector: 'a[data-disable-with], a[data-disable]',

      // Button onClick disable selector with possible reenable after remote submission
      buttonDisableSelector: 'button[data-remote][data-disable-with], button[data-remote][data-disable]',

      // Up-to-date Cross-Site Request Forgery token
      csrfToken: function() {
       return $('meta[name=csrf-token]').attr('content');
      },

      // URL param that must contain the CSRF token
      csrfParam: function() {
       return $('meta[name=csrf-param]').attr('content');
      },

      // Make sure that every Ajax request sends the CSRF token
      CSRFProtection: function(xhr) {
        var token = rails.csrfToken();
        if (token) xhr.setRequestHeader('X-CSRF-Token', token);
      },

      // making sure that all forms have actual up-to-date token(cached forms contain old one)
      refreshCSRFTokens: function(){
        $('form input[name="' + rails.csrfParam() + '"]').val(rails.csrfToken());
      },

      // Triggers an event on an element and returns false if the event result is false
      fire: function(obj, name, data) {
        var event = $.Event(name);
        obj.trigger(event, data);
        return event.result !== false;
      },

      // Default confirm dialog, may be overridden with custom confirm dialog in $.rails.confirm
      confirm: function(message) {
        return confirm(message);
      },

      // Default ajax function, may be overridden with custom function in $.rails.ajax
      ajax: function(options) {
        return $.ajax(options);
      },

      // Default way to get an element's href. May be overridden at $.rails.href.
      href: function(element) {
        return element[0].href;
      },

      // Submits "remote" forms and links with ajax
      handleRemote: function(element) {
        var method, url, data, withCredentials, dataType, options;

        if (rails.fire(element, 'ajax:before')) {
          withCredentials = element.data('with-credentials') || null;
          dataType = element.data('type') || ($.ajaxSettings && $.ajaxSettings.dataType);

          if (element.is('form')) {
            method = element.attr('method');
            url = element.attr('action');
            data = element.serializeArray();
            // memoized value from clicked submit button
            var button = element.data('ujs:submit-button');
            if (button) {
              data.push(button);
              element.data('ujs:submit-button', null);
            }
          } else if (element.is(rails.inputChangeSelector)) {
            method = element.data('method');
            url = element.data('url');
            data = element.serialize();
            if (element.data('params')) data = data + "&" + element.data('params');
          } else if (element.is(rails.buttonClickSelector)) {
            method = element.data('method') || 'get';
            url = element.data('url');
            data = element.serialize();
            if (element.data('params')) data = data + "&" + element.data('params');
          } else {
            method = element.data('method');
            url = rails.href(element);
            data = element.data('params') || null;
          }

          options = {
            type: method || 'GET', data: data, dataType: dataType,
            // stopping the "ajax:beforeSend" event will cancel the ajax request
            beforeSend: function(xhr, settings) {
              if (settings.dataType === undefined) {
                xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);
              }
              if (rails.fire(element, 'ajax:beforeSend', [xhr, settings])) {
                element.trigger('ajax:send', xhr);
              } else {
                return false;
              }
            },
            success: function(data, status, xhr) {
              element.trigger('ajax:success', [data, status, xhr]);
            },
            complete: function(xhr, status) {
              element.trigger('ajax:complete', [xhr, status]);
            },
            error: function(xhr, status, error) {
              element.trigger('ajax:error', [xhr, status, error]);
            },
            crossDomain: rails.isCrossDomain(url)
          };

          // There is no withCredentials for IE6-8 when
          // "Enable native XMLHTTP support" is disabled
          if (withCredentials) {
            options.xhrFields = {
              withCredentials: withCredentials
            };
          }

          // Only pass url to `ajax` options if not blank
          if (url) { options.url = url; }

          return rails.ajax(options);
        } else {
          return false;
        }
      },

      // Determines if the request is a cross domain request.
      isCrossDomain: function(url) {
        var originAnchor = document.createElement("a");
        originAnchor.href = location.href;
        var urlAnchor = document.createElement("a");

        try {
          urlAnchor.href = url;
          // This is a workaround to a IE bug.
          urlAnchor.href = urlAnchor.href;

          // Make sure that the browser parses the URL and that the protocols and hosts match.
          return !urlAnchor.protocol || !urlAnchor.host ||
            (originAnchor.protocol + "//" + originAnchor.host !==
              urlAnchor.protocol + "//" + urlAnchor.host);
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain.
          return true;
        }
      },

      // Handles "data-method" on links such as:
      // <a href="/users/5" data-method="delete" rel="nofollow" data-confirm="Are you sure?">Delete</a>
      handleMethod: function(link) {
        var href = rails.href(link),
          method = link.data('method'),
          target = link.attr('target'),
          csrfToken = rails.csrfToken(),
          csrfParam = rails.csrfParam(),
          form = $('<form method="post" action="' + href + '"></form>'),
          metadataInput = '<input name="_method" value="' + method + '" type="hidden" />';

        if (csrfParam !== undefined && csrfToken !== undefined && !rails.isCrossDomain(href)) {
          metadataInput += '<input name="' + csrfParam + '" value="' + csrfToken + '" type="hidden" />';
        }

        if (target) { form.attr('target', target); }

        form.hide().append(metadataInput).appendTo('body');
        form.submit();
      },

      // Helper function that returns form elements that match the specified CSS selector
      // If form is actually a "form" element this will return associated elements outside the from that have
      // the html form attribute set
      formElements: function(form, selector) {
        return form.is('form') ? $(form[0].elements).filter(selector) : form.find(selector);
      },

      /* Disables form elements:
        - Caches element value in 'ujs:enable-with' data store
        - Replaces element text with value of 'data-disable-with' attribute
        - Sets disabled property to true
      */
      disableFormElements: function(form) {
        rails.formElements(form, rails.disableSelector).each(function() {
          rails.disableFormElement($(this));
        });
      },

      disableFormElement: function(element) {
        var method, replacement;

        method = element.is('button') ? 'html' : 'val';
        replacement = element.data('disable-with');

        element.data('ujs:enable-with', element[method]());
        if (replacement !== undefined) {
          element[method](replacement);
        }

        element.prop('disabled', true);
      },

      /* Re-enables disabled form elements:
        - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)
        - Sets disabled property to false
      */
      enableFormElements: function(form) {
        rails.formElements(form, rails.enableSelector).each(function() {
          rails.enableFormElement($(this));
        });
      },

      enableFormElement: function(element) {
        var method = element.is('button') ? 'html' : 'val';
        if (element.data('ujs:enable-with')) element[method](element.data('ujs:enable-with'));
        element.prop('disabled', false);
      },

     /* For 'data-confirm' attribute:
        - Fires `confirm` event
        - Shows the confirmation dialog
        - Fires the `confirm:complete` event

        Returns `true` if no function stops the chain and user chose yes; `false` otherwise.
        Attaching a handler to the element's `confirm` event that returns a `falsy` value cancels the confirmation dialog.
        Attaching a handler to the element's `confirm:complete` event that returns a `falsy` value makes this function
        return false. The `confirm:complete` event is fired whether or not the user answered true or false to the dialog.
     */
      allowAction: function(element) {
        var message = element.data('confirm'),
            answer = false, callback;
        if (!message) { return true; }

        if (rails.fire(element, 'confirm')) {
          try {
            answer = rails.confirm(message);
          } catch (e) {
            (console.error || console.log).call(console, e.stack || e);
          }
          callback = rails.fire(element, 'confirm:complete', [answer]);
        }
        return answer && callback;
      },

      // Helper function which checks for blank inputs in a form that match the specified CSS selector
      blankInputs: function(form, specifiedSelector, nonBlank) {
        var inputs = $(), input, valueToCheck,
            selector = specifiedSelector || 'input,textarea',
            allInputs = form.find(selector);

        allInputs.each(function() {
          input = $(this);
          valueToCheck = input.is('input[type=checkbox],input[type=radio]') ? input.is(':checked') : input.val();
          // If nonBlank and valueToCheck are both truthy, or nonBlank and valueToCheck are both falsey
          if (!valueToCheck === !nonBlank) {

            // Don't count unchecked required radio if other radio with same name is checked
            if (input.is('input[type=radio]') && allInputs.filter('input[type=radio]:checked[name="' + input.attr('name') + '"]').length) {
              return true; // Skip to next input
            }

            inputs = inputs.add(input);
          }
        });
        return inputs.length ? inputs : false;
      },

      // Helper function which checks for non-blank inputs in a form that match the specified CSS selector
      nonBlankInputs: function(form, specifiedSelector) {
        return rails.blankInputs(form, specifiedSelector, true); // true specifies nonBlank
      },

      // Helper function, needed to provide consistent behavior in IE
      stopEverything: function(e) {
        $(e.target).trigger('ujs:everythingStopped');
        e.stopImmediatePropagation();
        return false;
      },

      //  replace element's html with the 'data-disable-with' after storing original html
      //  and prevent clicking on it
      disableElement: function(element) {
        var replacement = element.data('disable-with');

        element.data('ujs:enable-with', element.html()); // store enabled state
        if (replacement !== undefined) {
          element.html(replacement);
        }

        element.bind('click.railsDisable', function(e) { // prevent further clicking
          return rails.stopEverything(e);
        });
      },

      // restore element to its original state which was disabled by 'disableElement' above
      enableElement: function(element) {
        if (element.data('ujs:enable-with') !== undefined) {
          element.html(element.data('ujs:enable-with')); // set to old enabled state
          element.removeData('ujs:enable-with'); // clean up cache
        }
        element.unbind('click.railsDisable'); // enable element
      }
    };

    if (rails.fire($document, 'rails:attachBindings')) {

      $.ajaxPrefilter(function(options, originalOptions, xhr){ if ( !options.crossDomain ) { rails.CSRFProtection(xhr); }});

      // This event works the same as the load event, except that it fires every
      // time the page is loaded.
      //
      // See https://github.com/rails/jquery-ujs/issues/357
      // See https://developer.mozilla.org/en-US/docs/Using_Firefox_1.5_caching
      $(window).on("pageshow.rails", function () {
        $($.rails.enableSelector).each(function () {
          var element = $(this);

          if (element.data("ujs:enable-with")) {
            $.rails.enableFormElement(element);
          }
        });

        $($.rails.linkDisableSelector).each(function () {
          var element = $(this);

          if (element.data("ujs:enable-with")) {
            $.rails.enableElement(element);
          }
        });
      });

      $document.delegate(rails.linkDisableSelector, 'ajax:complete', function() {
          rails.enableElement($(this));
      });

      $document.delegate(rails.buttonDisableSelector, 'ajax:complete', function() {
          rails.enableFormElement($(this));
      });

      $document.delegate(rails.linkClickSelector, 'click.rails', function(e) {
        var link = $(this), method = link.data('method'), data = link.data('params'), metaClick = e.metaKey || e.ctrlKey;
        if (!rails.allowAction(link)) return rails.stopEverything(e);

        if (!metaClick && link.is(rails.linkDisableSelector)) rails.disableElement(link);

        if (link.data('remote') !== undefined) {
          if (metaClick && (!method || method === 'GET') && !data) { return true; }

          var handleRemote = rails.handleRemote(link);
          // response from rails.handleRemote() will either be false or a deferred object promise.
          if (handleRemote === false) {
            rails.enableElement(link);
          } else {
            handleRemote.fail( function() { rails.enableElement(link); } );
          }
          return false;

        } else if (method) {
          rails.handleMethod(link);
          return false;
        }
      });

      $document.delegate(rails.buttonClickSelector, 'click.rails', function(e) {
        var button = $(this);

        if (!rails.allowAction(button)) return rails.stopEverything(e);

        if (button.is(rails.buttonDisableSelector)) rails.disableFormElement(button);

        var handleRemote = rails.handleRemote(button);
        // response from rails.handleRemote() will either be false or a deferred object promise.
        if (handleRemote === false) {
          rails.enableFormElement(button);
        } else {
          handleRemote.fail( function() { rails.enableFormElement(button); } );
        }
        return false;
      });

      $document.delegate(rails.inputChangeSelector, 'change.rails', function(e) {
        var link = $(this);
        if (!rails.allowAction(link)) return rails.stopEverything(e);

        rails.handleRemote(link);
        return false;
      });

      $document.delegate(rails.formSubmitSelector, 'submit.rails', function(e) {
        var form = $(this),
          remote = form.data('remote') !== undefined,
          blankRequiredInputs,
          nonBlankFileInputs;

        if (!rails.allowAction(form)) return rails.stopEverything(e);

        // skip other logic when required values are missing or file upload is present
        if (form.attr('novalidate') == undefined) {
          blankRequiredInputs = rails.blankInputs(form, rails.requiredInputSelector);
          if (blankRequiredInputs && rails.fire(form, 'ajax:aborted:required', [blankRequiredInputs])) {
            return rails.stopEverything(e);
          }
        }

        if (remote) {
          nonBlankFileInputs = rails.nonBlankInputs(form, rails.fileInputSelector);
          if (nonBlankFileInputs) {
            // slight timeout so that the submit button gets properly serialized
            // (make it easy for event handler to serialize form without disabled values)
            setTimeout(function(){ rails.disableFormElements(form); }, 13);
            var aborted = rails.fire(form, 'ajax:aborted:file', [nonBlankFileInputs]);

            // re-enable form elements if event bindings return false (canceling normal form submission)
            if (!aborted) { setTimeout(function(){ rails.enableFormElements(form); }, 13); }

            return aborted;
          }

          rails.handleRemote(form);
          return false;

        } else {
          // slight timeout so that the submit button gets properly serialized
          setTimeout(function(){ rails.disableFormElements(form); }, 13);
        }
      });

      $document.delegate(rails.formInputClickSelector, 'click.rails', function(event) {
        var button = $(this);

        if (!rails.allowAction(button)) return rails.stopEverything(event);

        // register the pressed submit button
        var name = button.attr('name'),
          data = name ? {name:name, value:button.val()} : null;

        button.closest('form').data('ujs:submit-button', data);
      });

      $document.delegate(rails.formSubmitSelector, 'ajax:send.rails', function(event) {
        if (this == event.target) rails.disableFormElements($(this));
      });

      $document.delegate(rails.formSubmitSelector, 'ajax:complete.rails', function(event) {
        if (this == event.target) rails.enableFormElements($(this));
      });

      $(function(){
        rails.refreshCSRFTokens();
      });
    }

  })( jQuery );


/***/ },
/* 4 */
/***/ function(module, exports) {

  /*
   Highcharts JS v4.1.5 (2015-04-13)

   (c) 2009-2014 Torstein Honsi

   License: www.highcharts.com/license
  */
  (function(){function z(){var a,b=arguments,c,d={},e=function(a,b){var c,d;typeof a!=="object"&&(a={});for(d in b)b.hasOwnProperty(d)&&(c=b[d],a[d]=c&&typeof c==="object"&&Object.prototype.toString.call(c)!=="[object Array]"&&d!=="renderTo"&&typeof c.nodeType!=="number"?e(a[d]||{},c):b[d]);return a};b[0]===!0&&(d=b[1],b=Array.prototype.slice.call(b,2));c=b.length;for(a=0;a<c;a++)d=e(d,b[a]);return d}function B(a,b){return parseInt(a,b||10)}function Da(a){return typeof a==="string"}function ca(a){return a&&
  typeof a==="object"}function Ha(a){return Object.prototype.toString.call(a)==="[object Array]"}function qa(a){return typeof a==="number"}function Ea(a){return V.log(a)/V.LN10}function ha(a){return V.pow(10,a)}function ia(a,b){for(var c=a.length;c--;)if(a[c]===b){a.splice(c,1);break}}function s(a){return a!==u&&a!==null}function L(a,b,c){var d,e;if(Da(b))s(c)?a.setAttribute(b,c):a&&a.getAttribute&&(e=a.getAttribute(b));else if(s(b)&&ca(b))for(d in b)a.setAttribute(d,b[d]);return e}function ra(a){return Ha(a)?
  a:[a]}function F(a,b){if(ya&&!ba&&b&&b.opacity!==u)b.filter="alpha(opacity="+b.opacity*100+")";r(a.style,b)}function Z(a,b,c,d,e){a=A.createElement(a);b&&r(a,b);e&&F(a,{padding:0,border:R,margin:0});c&&F(a,c);d&&d.appendChild(a);return a}function ja(a,b){var c=function(){return u};c.prototype=new a;r(c.prototype,b);return c}function Ia(a,b){return Array((b||2)+1-String(a).length).join(0)+a}function Wa(a){return(eb&&eb(a)||nb||0)*6E4}function Ja(a,b){for(var c="{",d=!1,e,f,g,h,i,j=[];(c=a.indexOf(c))!==
  -1;){e=a.slice(0,c);if(d){f=e.split(":");g=f.shift().split(".");i=g.length;e=b;for(h=0;h<i;h++)e=e[g[h]];if(f.length)f=f.join(":"),g=/\.([0-9])/,h=P.lang,i=void 0,/f$/.test(f)?(i=(i=f.match(g))?i[1]:-1,e!==null&&(e=w.numberFormat(e,i,h.decimalPoint,f.indexOf(",")>-1?h.thousandsSep:""))):e=Oa(f,e)}j.push(e);a=a.slice(c+1);c=(d=!d)?"}":"{"}j.push(a);return j.join("")}function ob(a){return V.pow(10,U(V.log(a)/V.LN10))}function pb(a,b,c,d,e){var f,g=a,c=p(c,1);f=a/c;b||(b=[1,2,2.5,5,10],d===!1&&(c===
  1?b=[1,2,5,10]:c<=0.1&&(b=[1/c])));for(d=0;d<b.length;d++)if(g=b[d],e&&g*c>=a||!e&&f<=(b[d]+(b[d+1]||b[d]))/2)break;g*=c;return g}function qb(a,b){var c=a.length,d,e;for(e=0;e<c;e++)a[e].ss_i=e;a.sort(function(a,c){d=b(a,c);return d===0?a.ss_i-c.ss_i:d});for(e=0;e<c;e++)delete a[e].ss_i}function Pa(a){for(var b=a.length,c=a[0];b--;)a[b]<c&&(c=a[b]);return c}function Fa(a){for(var b=a.length,c=a[0];b--;)a[b]>c&&(c=a[b]);return c}function Qa(a,b){for(var c in a)a[c]&&a[c]!==b&&a[c].destroy&&a[c].destroy(),
  delete a[c]}function Ra(a){fb||(fb=Z(Ka));a&&fb.appendChild(a);fb.innerHTML=""}function ka(a,b){var c="Highcharts error #"+a+": www.highcharts.com/errors/"+a;if(b)throw c;H.console&&console.log(c)}function da(a){return parseFloat(a.toPrecision(14))}function Sa(a,b){za=p(a,b.animation)}function Cb(){var a=P.global,b=a.useUTC,c=b?"getUTC":"get",d=b?"setUTC":"set";Aa=a.Date||window.Date;nb=b&&a.timezoneOffset;eb=b&&a.getTimezoneOffset;gb=function(a,c,d,h,i,j){var k;b?(k=Aa.UTC.apply(0,arguments),k+=
  Wa(k)):k=(new Aa(a,c,p(d,1),p(h,0),p(i,0),p(j,0))).getTime();return k};rb=c+"Minutes";sb=c+"Hours";tb=c+"Day";Xa=c+"Date";Ya=c+"Month";Za=c+"FullYear";Db=d+"Milliseconds";Eb=d+"Seconds";Fb=d+"Minutes";Gb=d+"Hours";ub=d+"Date";vb=d+"Month";wb=d+"FullYear"}function K(){}function Ta(a,b,c,d){this.axis=a;this.pos=b;this.type=c||"";this.isNew=!0;!c&&!d&&this.addLabel()}function Hb(a,b,c,d,e){var f=a.chart.inverted;this.axis=a;this.isNegative=c;this.options=b;this.x=d;this.total=null;this.points={};this.stack=
  e;this.alignOptions={align:b.align||(f?c?"left":"right":"center"),verticalAlign:b.verticalAlign||(f?"middle":c?"bottom":"top"),y:p(b.y,f?4:c?14:-6),x:p(b.x,f?c?-6:6:0)};this.textAlign=b.textAlign||(f?c?"right":"left":"center")}var u,A=document,H=window,V=Math,x=V.round,U=V.floor,sa=V.ceil,t=V.max,I=V.min,O=V.abs,W=V.cos,$=V.sin,la=V.PI,ga=la*2/360,Ba=navigator.userAgent,Ib=H.opera,ya=/(msie|trident)/i.test(Ba)&&!Ib,hb=A.documentMode===8,xb=/AppleWebKit/.test(Ba),La=/Firefox/.test(Ba),Jb=/(Mobile|Android|Windows Phone)/.test(Ba),
  Ca="http://www.w3.org/2000/svg",ba=!!A.createElementNS&&!!A.createElementNS(Ca,"svg").createSVGRect,Nb=La&&parseInt(Ba.split("Firefox/")[1],10)<4,ea=!ba&&!ya&&!!A.createElement("canvas").getContext,$a,ab,Kb={},yb=0,fb,P,Oa,za,zb,G,ma=function(){return u},X=[],bb=0,Ka="div",R="none",Ob=/^[0-9]+$/,ib=["plotTop","marginRight","marginBottom","plotLeft"],Pb="stroke-width",Aa,gb,nb,eb,rb,sb,tb,Xa,Ya,Za,Db,Eb,Fb,Gb,ub,vb,wb,J={},w;w=H.Highcharts=H.Highcharts?ka(16,!0):{};w.seriesTypes=J;var r=w.extend=function(a,
  b){var c;a||(a={});for(c in b)a[c]=b[c];return a},p=w.pick=function(){var a=arguments,b,c,d=a.length;for(b=0;b<d;b++)if(c=a[b],c!==u&&c!==null)return c},cb=w.wrap=function(a,b,c){var d=a[b];a[b]=function(){var a=Array.prototype.slice.call(arguments);a.unshift(d);return c.apply(this,a)}};Oa=function(a,b,c){if(!s(b)||isNaN(b))return"Invalid date";var a=p(a,"%Y-%m-%d %H:%M:%S"),d=new Aa(b-Wa(b)),e,f=d[sb](),g=d[tb](),h=d[Xa](),i=d[Ya](),j=d[Za](),k=P.lang,l=k.weekdays,d=r({a:l[g].substr(0,3),A:l[g],
  d:Ia(h),e:h,w:g,b:k.shortMonths[i],B:k.months[i],m:Ia(i+1),y:j.toString().substr(2,2),Y:j,H:Ia(f),I:Ia(f%12||12),l:f%12||12,M:Ia(d[rb]()),p:f<12?"AM":"PM",P:f<12?"am":"pm",S:Ia(d.getSeconds()),L:Ia(x(b%1E3),3)},w.dateFormats);for(e in d)for(;a.indexOf("%"+e)!==-1;)a=a.replace("%"+e,typeof d[e]==="function"?d[e](b):d[e]);return c?a.substr(0,1).toUpperCase()+a.substr(1):a};G={millisecond:1,second:1E3,minute:6E4,hour:36E5,day:864E5,week:6048E5,month:24192E5,year:314496E5};w.numberFormat=function(a,b,
  c,d){var e=P.lang,a=+a||0,f=b===-1?I((a.toString().split(".")[1]||"").length,20):isNaN(b=O(b))?2:b,b=c===void 0?e.decimalPoint:c,d=d===void 0?e.thousandsSep:d,e=a<0?"-":"",c=String(B(a=O(a).toFixed(f))),g=c.length>3?c.length%3:0;return e+(g?c.substr(0,g)+d:"")+c.substr(g).replace(/(\d{3})(?=\d)/g,"$1"+d)+(f?b+O(a-c).toFixed(f).slice(2):"")};zb={init:function(a,b,c){var b=b||"",d=a.shift,e=b.indexOf("C")>-1,f=e?7:3,g,b=b.split(" "),c=[].concat(c),h,i,j=function(a){for(g=a.length;g--;)a[g]==="M"&&a.splice(g+
  1,0,a[g+1],a[g+2],a[g+1],a[g+2])};e&&(j(b),j(c));a.isArea&&(h=b.splice(b.length-6,6),i=c.splice(c.length-6,6));if(d<=c.length/f&&b.length===c.length)for(;d--;)c=[].concat(c).splice(0,f).concat(c);a.shift=0;if(b.length)for(a=c.length;b.length<a;)d=[].concat(b).splice(b.length-f,f),e&&(d[f-6]=d[f-2],d[f-5]=d[f-1]),b=b.concat(d);h&&(b=b.concat(h),c=c.concat(i));return[b,c]},step:function(a,b,c,d){var e=[],f=a.length;if(c===1)e=d;else if(f===b.length&&c<1)for(;f--;)d=parseFloat(a[f]),e[f]=isNaN(d)?a[f]:
  c*parseFloat(b[f]-d)+d;else e=b;return e}};(function(a){H.HighchartsAdapter=H.HighchartsAdapter||a&&{init:function(b){var c=a.fx;a.extend(a.easing,{easeOutQuad:function(a,b,c,g,h){return-g*(b/=h)*(b-2)+c}});a.each(["cur","_default","width","height","opacity"],function(b,e){var f=c.step,g;e==="cur"?f=c.prototype:e==="_default"&&a.Tween&&(f=a.Tween.propHooks[e],e="set");(g=f[e])&&(f[e]=function(a){var c,a=b?a:this;if(a.prop!=="align")return c=a.elem,c.attr?c.attr(a.prop,e==="cur"?u:a.now):g.apply(this,
  arguments)})});cb(a.cssHooks.opacity,"get",function(a,b,c){return b.attr?b.opacity||0:a.call(this,b,c)});this.addAnimSetter("d",function(a){var c=a.elem,f;if(!a.started)f=b.init(c,c.d,c.toD),a.start=f[0],a.end=f[1],a.started=!0;c.attr("d",b.step(a.start,a.end,a.pos,c.toD))});this.each=Array.prototype.forEach?function(a,b){return Array.prototype.forEach.call(a,b)}:function(a,b){var c,g=a.length;for(c=0;c<g;c++)if(b.call(a[c],a[c],c,a)===!1)return c};a.fn.highcharts=function(){var a="Chart",b=arguments,
  c,g;if(this[0]){Da(b[0])&&(a=b[0],b=Array.prototype.slice.call(b,1));c=b[0];if(c!==u)c.chart=c.chart||{},c.chart.renderTo=this[0],new w[a](c,b[1]),g=this;c===u&&(g=X[L(this[0],"data-highcharts-chart")])}return g}},addAnimSetter:function(b,c){a.Tween?a.Tween.propHooks[b]={set:c}:a.fx.step[b]=c},getScript:a.getScript,inArray:a.inArray,adapterRun:function(b,c){return a(b)[c]()},grep:a.grep,map:function(a,c){for(var d=[],e=0,f=a.length;e<f;e++)d[e]=c.call(a[e],a[e],e,a);return d},offset:function(b){return a(b).offset()},
  addEvent:function(b,c,d){a(b).bind(c,d)},removeEvent:function(b,c,d){var e=A.removeEventListener?"removeEventListener":"detachEvent";A[e]&&b&&!b[e]&&(b[e]=function(){});a(b).unbind(c,d)},fireEvent:function(b,c,d,e){var f=a.Event(c),g="detached"+c,h;!ya&&d&&(delete d.layerX,delete d.layerY,delete d.returnValue);r(f,d);b[c]&&(b[g]=b[c],b[c]=null);a.each(["preventDefault","stopPropagation"],function(a,b){var c=f[b];f[b]=function(){try{c.call(f)}catch(a){b==="preventDefault"&&(h=!0)}}});a(b).trigger(f);
  b[g]&&(b[c]=b[g],b[g]=null);e&&!f.isDefaultPrevented()&&!h&&e(f)},washMouseEvent:function(a){var c=a.originalEvent||a;if(c.pageX===u)c.pageX=a.pageX,c.pageY=a.pageY;return c},animate:function(b,c,d){var e=a(b);if(!b.style)b.style={};if(c.d)b.toD=c.d,c.d=1;e.stop();c.opacity!==u&&b.attr&&(c.opacity+="px");b.hasAnim=1;e.animate(c,d)},stop:function(b){b.hasAnim&&a(b).stop()}}})(H.jQuery);var T=H.HighchartsAdapter,D=T||{};T&&T.init.call(T,zb);var jb=D.adapterRun,Qb=D.getScript,Ma=D.inArray,m=w.each=D.each,
  kb=D.grep,Rb=D.offset,Ua=D.map,N=D.addEvent,Y=D.removeEvent,M=D.fireEvent,Sb=D.washMouseEvent,lb=D.animate,db=D.stop;P={colors:"#7cb5ec,#434348,#90ed7d,#f7a35c,#8085e9,#f15c80,#e4d354,#2b908f,#f45b5b,#91e8e1".split(","),symbols:["circle","diamond","square","triangle","triangle-down"],lang:{loading:"Loading...",months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),shortMonths:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),
  decimalPoint:".",numericSymbols:"k,M,G,T,P,E".split(","),resetZoom:"Reset zoom",resetZoomTitle:"Reset zoom level 1:1",thousandsSep:" "},global:{useUTC:!0,canvasToolsURL:"http://code.highcharts.com/4.1.5/modules/canvas-tools.js",VMLRadialGradientURL:"http://code.highcharts.com/4.1.5/gfx/vml-radial-gradient.png"},chart:{borderColor:"#4572A7",borderRadius:0,defaultSeriesType:"line",ignoreHiddenSeries:!0,spacing:[10,10,15,10],backgroundColor:"#FFFFFF",plotBorderColor:"#C0C0C0",resetZoomButton:{theme:{zIndex:20},
  position:{align:"right",x:-10,y:10}}},title:{text:"Chart title",align:"center",margin:15,style:{color:"#333333",fontSize:"18px"}},subtitle:{text:"",align:"center",style:{color:"#555555"}},plotOptions:{line:{allowPointSelect:!1,showCheckbox:!1,animation:{duration:1E3},events:{},lineWidth:2,marker:{lineWidth:0,radius:4,lineColor:"#FFFFFF",states:{hover:{enabled:!0,lineWidthPlus:1,radiusPlus:2},select:{fillColor:"#FFFFFF",lineColor:"#000000",lineWidth:2}}},point:{events:{}},dataLabels:{align:"center",
  formatter:function(){return this.y===null?"":w.numberFormat(this.y,-1)},style:{color:"contrast",fontSize:"11px",fontWeight:"bold",textShadow:"0 0 6px contrast, 0 0 3px contrast"},verticalAlign:"bottom",x:0,y:0,padding:5},cropThreshold:300,pointRange:0,states:{hover:{lineWidthPlus:1,marker:{},halo:{size:10,opacity:0.25}},select:{marker:{}}},stickyTracking:!0,turboThreshold:1E3}},labels:{style:{position:"absolute",color:"#3E576F"}},legend:{enabled:!0,align:"center",layout:"horizontal",labelFormatter:function(){return this.name},
  borderColor:"#909090",borderRadius:0,navigation:{activeColor:"#274b6d",inactiveColor:"#CCC"},shadow:!1,itemStyle:{color:"#333333",fontSize:"12px",fontWeight:"bold"},itemHoverStyle:{color:"#000"},itemHiddenStyle:{color:"#CCC"},itemCheckboxStyle:{position:"absolute",width:"13px",height:"13px"},symbolPadding:5,verticalAlign:"bottom",x:0,y:0,title:{style:{fontWeight:"bold"}}},loading:{labelStyle:{fontWeight:"bold",position:"relative",top:"45%"},style:{position:"absolute",backgroundColor:"white",opacity:0.5,
  textAlign:"center"}},tooltip:{enabled:!0,animation:ba,backgroundColor:"rgba(249, 249, 249, .85)",borderWidth:1,borderRadius:3,dateTimeLabelFormats:{millisecond:"%A, %b %e, %H:%M:%S.%L",second:"%A, %b %e, %H:%M:%S",minute:"%A, %b %e, %H:%M",hour:"%A, %b %e, %H:%M",day:"%A, %b %e, %Y",week:"Week from %A, %b %e, %Y",month:"%B %Y",year:"%Y"},footerFormat:"",headerFormat:'<span style="font-size: 10px">{point.key}</span><br/>',pointFormat:'<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b><br/>',
  shadow:!0,snap:Jb?25:10,style:{color:"#333333",cursor:"default",fontSize:"12px",padding:"8px",whiteSpace:"nowrap"}},credits:{enabled:!0,text:"Highcharts.com",href:"http://www.highcharts.com",position:{align:"right",x:-10,verticalAlign:"bottom",y:-5},style:{cursor:"pointer",color:"#909090",fontSize:"9px"}}};var aa=P.plotOptions,T=aa.line;Cb();var Tb=/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/,Ub=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,
  Vb=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/,na=function(a){var b=[],c,d;(function(a){a&&a.stops?d=Ua(a.stops,function(a){return na(a[1])}):(c=Tb.exec(a))?b=[B(c[1]),B(c[2]),B(c[3]),parseFloat(c[4],10)]:(c=Ub.exec(a))?b=[B(c[1],16),B(c[2],16),B(c[3],16),1]:(c=Vb.exec(a))&&(b=[B(c[1]),B(c[2]),B(c[3]),1])})(a);return{get:function(c){var f;d?(f=z(a),f.stops=[].concat(f.stops),m(d,function(a,b){f.stops[b]=[f.stops[b][0],a.get(c)]})):f=b&&!isNaN(b[0])?c==="rgb"?"rgb("+b[0]+","+
  b[1]+","+b[2]+")":c==="a"?b[3]:"rgba("+b.join(",")+")":a;return f},brighten:function(a){if(d)m(d,function(b){b.brighten(a)});else if(qa(a)&&a!==0){var c;for(c=0;c<3;c++)b[c]+=B(a*255),b[c]<0&&(b[c]=0),b[c]>255&&(b[c]=255)}return this},rgba:b,setOpacity:function(a){b[3]=a;return this},raw:a}};K.prototype={opacity:1,textProps:"fontSize,fontWeight,fontFamily,fontStyle,color,lineHeight,width,textDecoration,textShadow".split(","),init:function(a,b){this.element=b==="span"?Z(b):A.createElementNS(Ca,b);
  this.renderer=a},animate:function(a,b,c){b=p(b,za,!0);db(this);if(b){b=z(b,{});if(c)b.complete=c;lb(this,a,b)}else this.attr(a),c&&c();return this},colorGradient:function(a,b,c){var d=this.renderer,e,f,g,h,i,j,k,l,n,o,q=[];a.linearGradient?f="linearGradient":a.radialGradient&&(f="radialGradient");if(f){g=a[f];h=d.gradients;j=a.stops;n=c.radialReference;Ha(g)&&(a[f]=g={x1:g[0],y1:g[1],x2:g[2],y2:g[3],gradientUnits:"userSpaceOnUse"});f==="radialGradient"&&n&&!s(g.gradientUnits)&&(g=z(g,{cx:n[0]-n[2]/
  2+g.cx*n[2],cy:n[1]-n[2]/2+g.cy*n[2],r:g.r*n[2],gradientUnits:"userSpaceOnUse"}));for(o in g)o!=="id"&&q.push(o,g[o]);for(o in j)q.push(j[o]);q=q.join(",");h[q]?a=h[q].attr("id"):(g.id=a="highcharts-"+yb++,h[q]=i=d.createElement(f).attr(g).add(d.defs),i.stops=[],m(j,function(a){a[1].indexOf("rgba")===0?(e=na(a[1]),k=e.get("rgb"),l=e.get("a")):(k=a[1],l=1);a=d.createElement("stop").attr({offset:a[0],"stop-color":k,"stop-opacity":l}).add(i);i.stops.push(a)}));c.setAttribute(b,"url("+d.url+"#"+a+")")}},
  applyTextShadow:function(a){var b=this.element,c,d=a.indexOf("contrast")!==-1,e=this.renderer.forExport||b.style.textShadow!==u&&!ya;d&&(a=a.replace(/contrast/g,this.renderer.getContrast(b.style.fill)));e?d&&F(b,{textShadow:a}):(this.fakeTS=!0,this.ySetter=this.xSetter,c=[].slice.call(b.getElementsByTagName("tspan")),m(a.split(/\s?,\s?/g),function(a){var d=b.firstChild,e,i,a=a.split(" ");e=a[a.length-1];(i=a[a.length-2])&&m(c,function(a,c){var f;c===0&&(a.setAttribute("x",b.getAttribute("x")),c=b.getAttribute("y"),
  a.setAttribute("y",c||0),c===null&&b.setAttribute("y",0));f=a.cloneNode(1);L(f,{"class":"highcharts-text-shadow",fill:e,stroke:e,"stroke-opacity":1/t(B(i),3),"stroke-width":i,"stroke-linejoin":"round"});b.insertBefore(f,d)})}))},attr:function(a,b){var c,d,e=this.element,f,g=this,h;typeof a==="string"&&b!==u&&(c=a,a={},a[c]=b);if(typeof a==="string")g=(this[a+"Getter"]||this._defaultGetter).call(this,a,e);else{for(c in a){d=a[c];h=!1;this.symbolName&&/^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(c)&&
  (f||(this.symbolAttr(a),f=!0),h=!0);if(this.rotation&&(c==="x"||c==="y"))this.doTransform=!0;h||(this[c+"Setter"]||this._defaultSetter).call(this,d,c,e);this.shadows&&/^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(c)&&this.updateShadows(c,d)}if(this.doTransform)this.updateTransform(),this.doTransform=!1}return g},updateShadows:function(a,b){for(var c=this.shadows,d=c.length;d--;)c[d].setAttribute(a,a==="height"?t(b-(c[d].cutHeight||0),0):a==="d"?this.d:b)},addClass:function(a){var b=this.element,
  c=L(b,"class")||"";c.indexOf(a)===-1&&L(b,"class",c+" "+a);return this},symbolAttr:function(a){var b=this;m("x,y,r,start,end,width,height,innerR,anchorX,anchorY".split(","),function(c){b[c]=p(a[c],b[c])});b.attr({d:b.renderer.symbols[b.symbolName](b.x,b.y,b.width,b.height,b)})},clip:function(a){return this.attr("clip-path",a?"url("+this.renderer.url+"#"+a.id+")":R)},crisp:function(a){var b,c={},d,e=a.strokeWidth||this.strokeWidth||0;d=x(e)%2/2;a.x=U(a.x||this.x||0)+d;a.y=U(a.y||this.y||0)+d;a.width=
  U((a.width||this.width||0)-2*d);a.height=U((a.height||this.height||0)-2*d);a.strokeWidth=e;for(b in a)this[b]!==a[b]&&(this[b]=c[b]=a[b]);return c},css:function(a){var b=this.styles,c={},d=this.element,e,f,g="";e=!b;if(a&&a.color)a.fill=a.color;if(b)for(f in a)a[f]!==b[f]&&(c[f]=a[f],e=!0);if(e){e=this.textWidth=a&&a.width&&d.nodeName.toLowerCase()==="text"&&B(a.width)||this.textWidth;b&&(a=r(b,c));this.styles=a;e&&(ea||!ba&&this.renderer.forExport)&&delete a.width;if(ya&&!ba)F(this.element,a);else{b=
  function(a,b){return"-"+b.toLowerCase()};for(f in a)g+=f.replace(/([A-Z])/g,b)+":"+a[f]+";";L(d,"style",g)}e&&this.added&&this.renderer.buildText(this)}return this},on:function(a,b){var c=this,d=c.element;ab&&a==="click"?(d.ontouchstart=function(a){c.touchEventFired=Aa.now();a.preventDefault();b.call(d,a)},d.onclick=function(a){(Ba.indexOf("Android")===-1||Aa.now()-(c.touchEventFired||0)>1100)&&b.call(d,a)}):d["on"+a]=b;return this},setRadialReference:function(a){this.element.radialReference=a;return this},
  translate:function(a,b){return this.attr({translateX:a,translateY:b})},invert:function(){this.inverted=!0;this.updateTransform();return this},updateTransform:function(){var a=this.translateX||0,b=this.translateY||0,c=this.scaleX,d=this.scaleY,e=this.inverted,f=this.rotation,g=this.element;e&&(a+=this.attr("width"),b+=this.attr("height"));a=["translate("+a+","+b+")"];e?a.push("rotate(90) scale(-1,1)"):f&&a.push("rotate("+f+" "+(g.getAttribute("x")||0)+" "+(g.getAttribute("y")||0)+")");(s(c)||s(d))&&
  a.push("scale("+p(c,1)+" "+p(d,1)+")");a.length&&g.setAttribute("transform",a.join(" "))},toFront:function(){var a=this.element;a.parentNode.appendChild(a);return this},align:function(a,b,c){var d,e,f,g,h={};e=this.renderer;f=e.alignedObjects;if(a){if(this.alignOptions=a,this.alignByTranslate=b,!c||Da(c))this.alignTo=d=c||"renderer",ia(f,this),f.push(this),c=null}else a=this.alignOptions,b=this.alignByTranslate,d=this.alignTo;c=p(c,e[d],e);d=a.align;e=a.verticalAlign;f=(c.x||0)+(a.x||0);g=(c.y||0)+
  (a.y||0);if(d==="right"||d==="center")f+=(c.width-(a.width||0))/{right:1,center:2}[d];h[b?"translateX":"x"]=x(f);if(e==="bottom"||e==="middle")g+=(c.height-(a.height||0))/({bottom:1,middle:2}[e]||1);h[b?"translateY":"y"]=x(g);this[this.placed?"animate":"attr"](h);this.placed=!0;this.alignAttr=h;return this},getBBox:function(a){var b,c=this.renderer,d,e=this.rotation,f=this.element,g=this.styles,h=e*ga;d=this.textStr;var i,j=f.style,k,l;d!==u&&(l=["",e||0,g&&g.fontSize,f.style.width].join(","),l=d===
  ""||Ob.test(d)?"num:"+d.toString().length+l:d+l);l&&!a&&(b=c.cache[l]);if(!b){if(f.namespaceURI===Ca||c.forExport){try{k=this.fakeTS&&function(a){m(f.querySelectorAll(".highcharts-text-shadow"),function(b){b.style.display=a})},La&&j.textShadow?(i=j.textShadow,j.textShadow=""):k&&k(R),b=f.getBBox?r({},f.getBBox()):{width:f.offsetWidth,height:f.offsetHeight},i?j.textShadow=i:k&&k("")}catch(n){}if(!b||b.width<0)b={width:0,height:0}}else b=this.htmlGetBBox();if(c.isSVG){a=b.width;d=b.height;if(ya&&g&&
  g.fontSize==="11px"&&d.toPrecision(3)==="16.9")b.height=d=14;if(e)b.width=O(d*$(h))+O(a*W(h)),b.height=O(d*W(h))+O(a*$(h))}c.cache[l]=b}return b},show:function(a){a&&this.element.namespaceURI===Ca?this.element.removeAttribute("visibility"):this.attr({visibility:a?"inherit":"visible"});return this},hide:function(){return this.attr({visibility:"hidden"})},fadeOut:function(a){var b=this;b.animate({opacity:0},{duration:a||150,complete:function(){b.attr({y:-9999})}})},add:function(a){var b=this.renderer,
  c=this.element,d;if(a)this.parentGroup=a;this.parentInverted=a&&a.inverted;this.textStr!==void 0&&b.buildText(this);this.added=!0;if(!a||a.handleZ||this.zIndex)d=this.zIndexSetter();d||(a?a.element:b.box).appendChild(c);if(this.onAdd)this.onAdd();return this},safeRemoveChild:function(a){var b=a.parentNode;b&&b.removeChild(a)},destroy:function(){var a=this,b=a.element||{},c=a.shadows,d=a.renderer.isSVG&&b.nodeName==="SPAN"&&a.parentGroup,e,f;b.onclick=b.onmouseout=b.onmouseover=b.onmousemove=b.point=
  null;db(a);if(a.clipPath)a.clipPath=a.clipPath.destroy();if(a.stops){for(f=0;f<a.stops.length;f++)a.stops[f]=a.stops[f].destroy();a.stops=null}a.safeRemoveChild(b);for(c&&m(c,function(b){a.safeRemoveChild(b)});d&&d.div&&d.div.childNodes.length===0;)b=d.parentGroup,a.safeRemoveChild(d.div),delete d.div,d=b;a.alignTo&&ia(a.renderer.alignedObjects,a);for(e in a)delete a[e];return null},shadow:function(a,b,c){var d=[],e,f,g=this.element,h,i,j,k;if(a){i=p(a.width,3);j=(a.opacity||0.15)/i;k=this.parentInverted?
  "(-1,-1)":"("+p(a.offsetX,1)+", "+p(a.offsetY,1)+")";for(e=1;e<=i;e++){f=g.cloneNode(0);h=i*2+1-2*e;L(f,{isShadow:"true",stroke:a.color||"black","stroke-opacity":j*e,"stroke-width":h,transform:"translate"+k,fill:R});if(c)L(f,"height",t(L(f,"height")-h,0)),f.cutHeight=h;b?b.element.appendChild(f):g.parentNode.insertBefore(f,g);d.push(f)}this.shadows=d}return this},xGetter:function(a){this.element.nodeName==="circle"&&(a={x:"cx",y:"cy"}[a]||a);return this._defaultGetter(a)},_defaultGetter:function(a){a=
  p(this[a],this.element?this.element.getAttribute(a):null,0);/^[\-0-9\.]+$/.test(a)&&(a=parseFloat(a));return a},dSetter:function(a,b,c){a&&a.join&&(a=a.join(" "));/(NaN| {2}|^$)/.test(a)&&(a="M 0 0");c.setAttribute(b,a);this[b]=a},dashstyleSetter:function(a){var b;if(a=a&&a.toLowerCase()){a=a.replace("shortdashdotdot","3,1,1,1,1,1,").replace("shortdashdot","3,1,1,1").replace("shortdot","1,1,").replace("shortdash","3,1,").replace("longdash","8,3,").replace(/dot/g,"1,3,").replace("dash","4,3,").replace(/,$/,
  "").split(",");for(b=a.length;b--;)a[b]=B(a[b])*this["stroke-width"];a=a.join(",").replace("NaN","none");this.element.setAttribute("stroke-dasharray",a)}},alignSetter:function(a){this.element.setAttribute("text-anchor",{left:"start",center:"middle",right:"end"}[a])},opacitySetter:function(a,b,c){this[b]=a;c.setAttribute(b,a)},titleSetter:function(a){var b=this.element.getElementsByTagName("title")[0];b||(b=A.createElementNS(Ca,"title"),this.element.appendChild(b));b.textContent=String(p(a),"").replace(/<[^>]*>/g,
  "")},textSetter:function(a){if(a!==this.textStr)delete this.bBox,this.textStr=a,this.added&&this.renderer.buildText(this)},fillSetter:function(a,b,c){typeof a==="string"?c.setAttribute(b,a):a&&this.colorGradient(a,b,c)},zIndexSetter:function(a,b){var c=this.renderer,d=this.parentGroup,c=(d||c).element||c.box,e,f,g=this.element,h;e=this.added;var i;s(a)&&(g.setAttribute(b,a),a=+a,this[b]===a&&(e=!1),this[b]=a);if(e){if((a=this.zIndex)&&d)d.handleZ=!0;d=c.childNodes;for(i=0;i<d.length&&!h;i++)if(e=
  d[i],f=L(e,"zIndex"),e!==g&&(B(f)>a||!s(a)&&s(f)))c.insertBefore(g,e),h=!0;h||c.appendChild(g)}return h},_defaultSetter:function(a,b,c){c.setAttribute(b,a)}};K.prototype.yGetter=K.prototype.xGetter;K.prototype.translateXSetter=K.prototype.translateYSetter=K.prototype.rotationSetter=K.prototype.verticalAlignSetter=K.prototype.scaleXSetter=K.prototype.scaleYSetter=function(a,b){this[b]=a;this.doTransform=!0};K.prototype["stroke-widthSetter"]=K.prototype.strokeSetter=function(a,b,c){this[b]=a;if(this.stroke&&
  this["stroke-width"])this.strokeWidth=this["stroke-width"],K.prototype.fillSetter.call(this,this.stroke,"stroke",c),c.setAttribute("stroke-width",this["stroke-width"]),this.hasStroke=!0;else if(b==="stroke-width"&&a===0&&this.hasStroke)c.removeAttribute("stroke"),this.hasStroke=!1};var ta=function(){this.init.apply(this,arguments)};ta.prototype={Element:K,init:function(a,b,c,d,e){var f=location,g,d=this.createElement("svg").attr({version:"1.1"}).css(this.getStyle(d));g=d.element;a.appendChild(g);
  a.innerHTML.indexOf("xmlns")===-1&&L(g,"xmlns",Ca);this.isSVG=!0;this.box=g;this.boxWrapper=d;this.alignedObjects=[];this.url=(La||xb)&&A.getElementsByTagName("base").length?f.href.replace(/#.*?$/,"").replace(/([\('\)])/g,"\\$1").replace(/ /g,"%20"):"";this.createElement("desc").add().element.appendChild(A.createTextNode("Created with Highcharts 4.1.5"));this.defs=this.createElement("defs").add();this.forExport=e;this.gradients={};this.cache={};this.setSize(b,c,!1);var h;if(La&&a.getBoundingClientRect)this.subPixelFix=
  b=function(){F(a,{left:0,top:0});h=a.getBoundingClientRect();F(a,{left:sa(h.left)-h.left+"px",top:sa(h.top)-h.top+"px"})},b(),N(H,"resize",b)},getStyle:function(a){return this.style=r({fontFamily:'"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif',fontSize:"12px"},a)},isHidden:function(){return!this.boxWrapper.getBBox().width},destroy:function(){var a=this.defs;this.box=null;this.boxWrapper=this.boxWrapper.destroy();Qa(this.gradients||{});this.gradients=null;if(a)this.defs=a.destroy();
  this.subPixelFix&&Y(H,"resize",this.subPixelFix);return this.alignedObjects=null},createElement:function(a){var b=new this.Element;b.init(this,a);return b},draw:function(){},buildText:function(a){for(var b=a.element,c=this,d=c.forExport,e=p(a.textStr,"").toString(),f=e.indexOf("<")!==-1,g=b.childNodes,h,i,j=L(b,"x"),k=a.styles,l=a.textWidth,n=k&&k.lineHeight,o=k&&k.textShadow,q=k&&k.textOverflow==="ellipsis",y=g.length,S=l&&!a.added&&this.box,C=function(a){return n?B(n):c.fontMetrics(/(px|em)$/.test(a&&
  a.style.fontSize)?a.style.fontSize:k&&k.fontSize||c.style.fontSize||12,a).h},v=function(a){return a.replace(/&lt;/g,"<").replace(/&gt;/g,">")};y--;)b.removeChild(g[y]);!f&&!o&&!q&&e.indexOf(" ")===-1?b.appendChild(A.createTextNode(v(e))):(h=/<.*style="([^"]+)".*>/,i=/<.*href="(http[^"]+)".*>/,S&&S.appendChild(b),e=f?e.replace(/<(b|strong)>/g,'<span style="font-weight:bold">').replace(/<(i|em)>/g,'<span style="font-style:italic">').replace(/<a/g,"<span").replace(/<\/(b|strong|i|em|a)>/g,"</span>").split(/<br.*?>/g):
  [e],e[e.length-1]===""&&e.pop(),m(e,function(e,f){var g,n=0,e=e.replace(/<span/g,"|||<span").replace(/<\/span>/g,"</span>|||");g=e.split("|||");m(g,function(e){if(e!==""||g.length===1){var o={},y=A.createElementNS(Ca,"tspan"),p;h.test(e)&&(p=e.match(h)[1].replace(/(;| |^)color([ :])/,"$1fill$2"),L(y,"style",p));i.test(e)&&!d&&(L(y,"onclick",'location.href="'+e.match(i)[1]+'"'),F(y,{cursor:"pointer"}));e=v(e.replace(/<(.|\n)*?>/g,"")||" ");if(e!==" "){y.appendChild(A.createTextNode(e));if(n)o.dx=0;
  else if(f&&j!==null)o.x=j;L(y,o);b.appendChild(y);!n&&f&&(!ba&&d&&F(y,{display:"block"}),L(y,"dy",C(y)));if(l){for(var o=e.replace(/([^\^])-/g,"$1- ").split(" "),m=g.length>1||f||o.length>1&&k.whiteSpace!=="nowrap",S,s,ua,u=[],t=C(y),x=1,r=a.rotation,z=e,w=z.length;(m||q)&&(o.length||u.length);)a.rotation=0,S=a.getBBox(!0),ua=S.width,!ba&&c.forExport&&(ua=c.measureSpanWidth(y.firstChild.data,a.styles)),S=ua>l,s===void 0&&(s=S),q&&s?(w/=2,z===""||!S&&w<0.5?o=[]:(S&&(s=!0),z=e.substring(0,z.length+
  (S?-1:1)*sa(w)),o=[z+"…"],y.removeChild(y.firstChild))):!S||o.length===1?(o=u,u=[],o.length&&(x++,y=A.createElementNS(Ca,"tspan"),L(y,{dy:t,x:j}),p&&L(y,"style",p),b.appendChild(y)),ua>l&&(l=ua)):(y.removeChild(y.firstChild),u.unshift(o.pop())),o.length&&y.appendChild(A.createTextNode(o.join(" ").replace(/- /g,"-")));s&&a.attr("title",a.textStr);a.rotation=r}n++}}})}),S&&S.removeChild(b),o&&a.applyTextShadow&&a.applyTextShadow(o))},getContrast:function(a){a=na(a).rgba;return a[0]+a[1]+a[2]>384?"#000":
  "#FFF"},button:function(a,b,c,d,e,f,g,h,i){var j=this.label(a,b,c,i,null,null,null,null,"button"),k=0,l,n,o,q,y,p,a={x1:0,y1:0,x2:0,y2:1},e=z({"stroke-width":1,stroke:"#CCCCCC",fill:{linearGradient:a,stops:[[0,"#FEFEFE"],[1,"#F6F6F6"]]},r:2,padding:5,style:{color:"black"}},e);o=e.style;delete e.style;f=z(e,{stroke:"#68A",fill:{linearGradient:a,stops:[[0,"#FFF"],[1,"#ACF"]]}},f);q=f.style;delete f.style;g=z(e,{stroke:"#68A",fill:{linearGradient:a,stops:[[0,"#9BD"],[1,"#CDF"]]}},g);y=g.style;delete g.style;
  h=z(e,{style:{color:"#CCC"}},h);p=h.style;delete h.style;N(j.element,ya?"mouseover":"mouseenter",function(){k!==3&&j.attr(f).css(q)});N(j.element,ya?"mouseout":"mouseleave",function(){k!==3&&(l=[e,f,g][k],n=[o,q,y][k],j.attr(l).css(n))});j.setState=function(a){(j.state=k=a)?a===2?j.attr(g).css(y):a===3&&j.attr(h).css(p):j.attr(e).css(o)};return j.on("click",function(){k!==3&&d.call(j)}).attr(e).css(r({cursor:"default"},o))},crispLine:function(a,b){a[1]===a[4]&&(a[1]=a[4]=x(a[1])-b%2/2);a[2]===a[5]&&
  (a[2]=a[5]=x(a[2])+b%2/2);return a},path:function(a){var b={fill:R};Ha(a)?b.d=a:ca(a)&&r(b,a);return this.createElement("path").attr(b)},circle:function(a,b,c){a=ca(a)?a:{x:a,y:b,r:c};b=this.createElement("circle");b.xSetter=function(a){this.element.setAttribute("cx",a)};b.ySetter=function(a){this.element.setAttribute("cy",a)};return b.attr(a)},arc:function(a,b,c,d,e,f){if(ca(a))b=a.y,c=a.r,d=a.innerR,e=a.start,f=a.end,a=a.x;a=this.symbol("arc",a||0,b||0,c||0,c||0,{innerR:d||0,start:e||0,end:f||0});
  a.r=c;return a},rect:function(a,b,c,d,e,f){var e=ca(a)?a.r:e,g=this.createElement("rect"),a=ca(a)?a:a===u?{}:{x:a,y:b,width:t(c,0),height:t(d,0)};if(f!==u)a.strokeWidth=f,a=g.crisp(a);if(e)a.r=e;g.rSetter=function(a){L(this.element,{rx:a,ry:a})};return g.attr(a)},setSize:function(a,b,c){var d=this.alignedObjects,e=d.length;this.width=a;this.height=b;for(this.boxWrapper[p(c,!0)?"animate":"attr"]({width:a,height:b});e--;)d[e].align()},g:function(a){var b=this.createElement("g");return s(a)?b.attr({"class":"highcharts-"+
  a}):b},image:function(a,b,c,d,e){var f={preserveAspectRatio:R};arguments.length>1&&r(f,{x:b,y:c,width:d,height:e});f=this.createElement("image").attr(f);f.element.setAttributeNS?f.element.setAttributeNS("http://www.w3.org/1999/xlink","href",a):f.element.setAttribute("hc-svg-href",a);return f},symbol:function(a,b,c,d,e,f){var g,h=this.symbols[a],h=h&&h(x(b),x(c),d,e,f),i=/^url\((.*?)\)$/,j,k;if(h)g=this.path(h),r(g,{symbolName:a,x:b,y:c,width:d,height:e}),f&&r(g,f);else if(i.test(a))k=function(a,b){a.element&&
  (a.attr({width:b[0],height:b[1]}),a.alignByTranslate||a.translate(x((d-b[0])/2),x((e-b[1])/2)))},j=a.match(i)[1],a=Kb[j]||f&&f.width&&f.height&&[f.width,f.height],g=this.image(j).attr({x:b,y:c}),g.isImg=!0,a?k(g,a):(g.attr({width:0,height:0}),Z("img",{onload:function(){k(g,Kb[j]=[this.width,this.height])},src:j}));return g},symbols:{circle:function(a,b,c,d){var e=0.166*c;return["M",a+c/2,b,"C",a+c+e,b,a+c+e,b+d,a+c/2,b+d,"C",a-e,b+d,a-e,b,a+c/2,b,"Z"]},square:function(a,b,c,d){return["M",a,b,"L",
  a+c,b,a+c,b+d,a,b+d,"Z"]},triangle:function(a,b,c,d){return["M",a+c/2,b,"L",a+c,b+d,a,b+d,"Z"]},"triangle-down":function(a,b,c,d){return["M",a,b,"L",a+c,b,a+c/2,b+d,"Z"]},diamond:function(a,b,c,d){return["M",a+c/2,b,"L",a+c,b+d/2,a+c/2,b+d,a,b+d/2,"Z"]},arc:function(a,b,c,d,e){var f=e.start,c=e.r||c||d,g=e.end-0.001,d=e.innerR,h=e.open,i=W(f),j=$(f),k=W(g),g=$(g),e=e.end-f<la?0:1;return["M",a+c*i,b+c*j,"A",c,c,0,e,1,a+c*k,b+c*g,h?"M":"L",a+d*k,b+d*g,"A",d,d,0,e,0,a+d*i,b+d*j,h?"":"Z"]},callout:function(a,
  b,c,d,e){var f=I(e&&e.r||0,c,d),g=f+6,h=e&&e.anchorX,i=e&&e.anchorY,e=x(e.strokeWidth||0)%2/2;a+=e;b+=e;e=["M",a+f,b,"L",a+c-f,b,"C",a+c,b,a+c,b,a+c,b+f,"L",a+c,b+d-f,"C",a+c,b+d,a+c,b+d,a+c-f,b+d,"L",a+f,b+d,"C",a,b+d,a,b+d,a,b+d-f,"L",a,b+f,"C",a,b,a,b,a+f,b];h&&h>c&&i>b+g&&i<b+d-g?e.splice(13,3,"L",a+c,i-6,a+c+6,i,a+c,i+6,a+c,b+d-f):h&&h<0&&i>b+g&&i<b+d-g?e.splice(33,3,"L",a,i+6,a-6,i,a,i-6,a,b+f):i&&i>d&&h>a+g&&h<a+c-g?e.splice(23,3,"L",h+6,b+d,h,b+d+6,h-6,b+d,a+f,b+d):i&&i<0&&h>a+g&&h<a+c-g&&
  e.splice(3,3,"L",h-6,b,h,b-6,h+6,b,c-f,b);return e}},clipRect:function(a,b,c,d){var e="highcharts-"+yb++,f=this.createElement("clipPath").attr({id:e}).add(this.defs),a=this.rect(a,b,c,d,0).add(f);a.id=e;a.clipPath=f;a.count=0;return a},text:function(a,b,c,d){var e=ea||!ba&&this.forExport,f={};if(d&&!this.forExport)return this.html(a,b,c);f.x=Math.round(b||0);if(c)f.y=Math.round(c);if(a||a===0)f.text=a;a=this.createElement("text").attr(f);e&&a.css({position:"absolute"});if(!d)a.xSetter=function(a,
  b,c){var d=c.getElementsByTagName("tspan"),e,f=c.getAttribute(b),n;for(n=0;n<d.length;n++)e=d[n],e.getAttribute(b)===f&&e.setAttribute(b,a);c.setAttribute(b,a)};return a},fontMetrics:function(a,b){a=a||this.style.fontSize;if(b&&H.getComputedStyle)b=b.element||b,a=H.getComputedStyle(b,"").fontSize;var a=/px/.test(a)?B(a):/em/.test(a)?parseFloat(a)*12:12,c=a<24?a+3:x(a*1.2),d=x(c*0.8);return{h:c,b:d,f:a}},rotCorr:function(a,b,c){var d=a;b&&c&&(d=t(d*W(b*ga),4));return{x:-a/3*$(b*ga),y:d}},label:function(a,
  b,c,d,e,f,g,h,i){function j(){var a,b;a=q.element.style;p=(fa===void 0||t===void 0||o.styles.textAlign)&&s(q.textStr)&&q.getBBox();o.width=(fa||p.width||0)+2*v+ua;o.height=(t||p.height||0)+2*v;I=v+n.fontMetrics(a&&a.fontSize,q).b;if(D){if(!y)a=x(-C*v),b=h?-I:0,o.box=y=d?n.symbol(d,a,b,o.width,o.height,E):n.rect(a,b,o.width,o.height,0,E[Pb]),y.attr("fill",R).add(o);y.isImg||y.attr(r({width:x(o.width),height:x(o.height)},E));E=null}}function k(){var a=o.styles,a=a&&a.textAlign,b=ua+v*(1-C),c;c=h?0:
  I;if(s(fa)&&p&&(a==="center"||a==="right"))b+={center:0.5,right:1}[a]*(fa-p.width);if(b!==q.x||c!==q.y)q.attr("x",b),c!==u&&q.attr(q.element.nodeName==="SPAN"?"y":"translateY",c);q.x=b;q.y=c}function l(a,b){y?y.attr(a,b):E[a]=b}var n=this,o=n.g(i),q=n.text("",0,0,g).attr({zIndex:1}),y,p,C=0,v=3,ua=0,fa,t,w,A,B=0,E={},I,D;o.onAdd=function(){q.add(o);o.attr({text:a||a===0?a:"",x:b,y:c});y&&s(e)&&o.attr({anchorX:e,anchorY:f})};o.widthSetter=function(a){fa=a};o.heightSetter=function(a){t=a};o.paddingSetter=
  function(a){if(s(a)&&a!==v)v=o.padding=a,k()};o.paddingLeftSetter=function(a){s(a)&&a!==ua&&(ua=a,k())};o.alignSetter=function(a){C={left:0,center:0.5,right:1}[a]};o.textSetter=function(a){a!==u&&q.textSetter(a);j();k()};o["stroke-widthSetter"]=function(a,b){a&&(D=!0);B=a%2/2;l(b,a)};o.strokeSetter=o.fillSetter=o.rSetter=function(a,b){b==="fill"&&a&&(D=!0);l(b,a)};o.anchorXSetter=function(a,b){e=a;l(b,a+B-w)};o.anchorYSetter=function(a,b){f=a;l(b,a-A)};o.xSetter=function(a){o.x=a;C&&(a-=C*((fa||p.width)+
  v));w=x(a);o.attr("translateX",w)};o.ySetter=function(a){A=o.y=x(a);o.attr("translateY",A)};var G=o.css;return r(o,{css:function(a){if(a){var b={},a=z(a);m(o.textProps,function(c){a[c]!==u&&(b[c]=a[c],delete a[c])});q.css(b)}return G.call(o,a)},getBBox:function(){return{width:p.width+2*v,height:p.height+2*v,x:p.x-v,y:p.y-v}},shadow:function(a){y&&y.shadow(a);return o},destroy:function(){Y(o.element,"mouseenter");Y(o.element,"mouseleave");q&&(q=q.destroy());y&&(y=y.destroy());K.prototype.destroy.call(o);
  o=n=j=k=l=null}})}};$a=ta;r(K.prototype,{htmlCss:function(a){var b=this.element;if(b=a&&b.tagName==="SPAN"&&a.width)delete a.width,this.textWidth=b,this.updateTransform();if(a&&a.textOverflow==="ellipsis")a.whiteSpace="nowrap",a.overflow="hidden";this.styles=r(this.styles,a);F(this.element,a);return this},htmlGetBBox:function(){var a=this.element;if(a.nodeName==="text")a.style.position="absolute";return{x:a.offsetLeft,y:a.offsetTop,width:a.offsetWidth,height:a.offsetHeight}},htmlUpdateTransform:function(){if(this.added){var a=
  this.renderer,b=this.element,c=this.translateX||0,d=this.translateY||0,e=this.x||0,f=this.y||0,g=this.textAlign||"left",h={left:0,center:0.5,right:1}[g],i=this.shadows,j=this.styles;F(b,{marginLeft:c,marginTop:d});i&&m(i,function(a){F(a,{marginLeft:c+1,marginTop:d+1})});this.inverted&&m(b.childNodes,function(c){a.invertChild(c,b)});if(b.tagName==="SPAN"){var k=this.rotation,l,n=B(this.textWidth),o=[k,g,b.innerHTML,this.textWidth].join(",");if(o!==this.cTT){l=a.fontMetrics(b.style.fontSize).b;s(k)&&
  this.setSpanRotation(k,h,l);i=p(this.elemWidth,b.offsetWidth);if(i>n&&/[ \-]/.test(b.textContent||b.innerText))F(b,{width:n+"px",display:"block",whiteSpace:j&&j.whiteSpace||"normal"}),i=n;this.getSpanCorrection(i,l,h,k,g)}F(b,{left:e+(this.xCorr||0)+"px",top:f+(this.yCorr||0)+"px"});if(xb)l=b.offsetHeight;this.cTT=o}}else this.alignOnAdd=!0},setSpanRotation:function(a,b,c){var d={},e=ya?"-ms-transform":xb?"-webkit-transform":La?"MozTransform":Ib?"-o-transform":"";d[e]=d.transform="rotate("+a+"deg)";
  d[e+(La?"Origin":"-origin")]=d.transformOrigin=b*100+"% "+c+"px";F(this.element,d)},getSpanCorrection:function(a,b,c){this.xCorr=-a*c;this.yCorr=-b}});r(ta.prototype,{html:function(a,b,c){var d=this.createElement("span"),e=d.element,f=d.renderer;d.textSetter=function(a){a!==e.innerHTML&&delete this.bBox;e.innerHTML=this.textStr=a};d.xSetter=d.ySetter=d.alignSetter=d.rotationSetter=function(a,b){b==="align"&&(b="textAlign");d[b]=a;d.htmlUpdateTransform()};d.attr({text:a,x:x(b),y:x(c)}).css({position:"absolute",
  fontFamily:this.style.fontFamily,fontSize:this.style.fontSize});e.style.whiteSpace="nowrap";d.css=d.htmlCss;if(f.isSVG)d.add=function(a){var b,c=f.box.parentNode,j=[];if(this.parentGroup=a){if(b=a.div,!b){for(;a;)j.push(a),a=a.parentGroup;m(j.reverse(),function(a){var d;b=a.div=a.div||Z(Ka,{className:L(a.element,"class")},{position:"absolute",left:(a.translateX||0)+"px",top:(a.translateY||0)+"px"},b||c);d=b.style;r(a,{translateXSetter:function(b,c){d.left=b+"px";a[c]=b;a.doTransform=!0},translateYSetter:function(b,
  c){d.top=b+"px";a[c]=b;a.doTransform=!0},visibilitySetter:function(a,b){d[b]=a}})})}}else b=c;b.appendChild(e);d.added=!0;d.alignOnAdd&&d.htmlUpdateTransform();return d};return d}});if(!ba&&!ea){D={init:function(a,b){var c=["<",b,' filled="f" stroked="f"'],d=["position: ","absolute",";"],e=b===Ka;(b==="shape"||e)&&d.push("left:0;top:0;width:1px;height:1px;");d.push("visibility: ",e?"hidden":"visible");c.push(' style="',d.join(""),'"/>');if(b)c=e||b==="span"||b==="img"?c.join(""):a.prepVML(c),this.element=
  Z(c);this.renderer=a},add:function(a){var b=this.renderer,c=this.element,d=b.box,d=a?a.element||a:d;a&&a.inverted&&b.invertChild(c,d);d.appendChild(c);this.added=!0;this.alignOnAdd&&!this.deferUpdateTransform&&this.updateTransform();if(this.onAdd)this.onAdd();return this},updateTransform:K.prototype.htmlUpdateTransform,setSpanRotation:function(){var a=this.rotation,b=W(a*ga),c=$(a*ga);F(this.element,{filter:a?["progid:DXImageTransform.Microsoft.Matrix(M11=",b,", M12=",-c,", M21=",c,", M22=",b,", sizingMethod='auto expand')"].join(""):
  R})},getSpanCorrection:function(a,b,c,d,e){var f=d?W(d*ga):1,g=d?$(d*ga):0,h=p(this.elemHeight,this.element.offsetHeight),i;this.xCorr=f<0&&-a;this.yCorr=g<0&&-h;i=f*g<0;this.xCorr+=g*b*(i?1-c:c);this.yCorr-=f*b*(d?i?c:1-c:1);e&&e!=="left"&&(this.xCorr-=a*c*(f<0?-1:1),d&&(this.yCorr-=h*c*(g<0?-1:1)),F(this.element,{textAlign:e}))},pathToVML:function(a){for(var b=a.length,c=[];b--;)if(qa(a[b]))c[b]=x(a[b]*10)-5;else if(a[b]==="Z")c[b]="x";else if(c[b]=a[b],a.isArc&&(a[b]==="wa"||a[b]==="at"))c[b+5]===
  c[b+7]&&(c[b+7]+=a[b+7]>a[b+5]?1:-1),c[b+6]===c[b+8]&&(c[b+8]+=a[b+8]>a[b+6]?1:-1);return c.join(" ")||"x"},clip:function(a){var b=this,c;a?(c=a.members,ia(c,b),c.push(b),b.destroyClip=function(){ia(c,b)},a=a.getCSS(b)):(b.destroyClip&&b.destroyClip(),a={clip:hb?"inherit":"rect(auto)"});return b.css(a)},css:K.prototype.htmlCss,safeRemoveChild:function(a){a.parentNode&&Ra(a)},destroy:function(){this.destroyClip&&this.destroyClip();return K.prototype.destroy.apply(this)},on:function(a,b){this.element["on"+
  a]=function(){var a=H.event;a.target=a.srcElement;b(a)};return this},cutOffPath:function(a,b){var c,a=a.split(/[ ,]/);c=a.length;if(c===9||c===11)a[c-4]=a[c-2]=B(a[c-2])-10*b;return a.join(" ")},shadow:function(a,b,c){var d=[],e,f=this.element,g=this.renderer,h,i=f.style,j,k=f.path,l,n,o,q;k&&typeof k.value!=="string"&&(k="x");n=k;if(a){o=p(a.width,3);q=(a.opacity||0.15)/o;for(e=1;e<=3;e++){l=o*2+1-2*e;c&&(n=this.cutOffPath(k.value,l+0.5));j=['<shape isShadow="true" strokeweight="',l,'" filled="false" path="',
  n,'" coordsize="10 10" style="',f.style.cssText,'" />'];h=Z(g.prepVML(j),null,{left:B(i.left)+p(a.offsetX,1),top:B(i.top)+p(a.offsetY,1)});if(c)h.cutOff=l+1;j=['<stroke color="',a.color||"black",'" opacity="',q*e,'"/>'];Z(g.prepVML(j),null,null,h);b?b.element.appendChild(h):f.parentNode.insertBefore(h,f);d.push(h)}this.shadows=d}return this},updateShadows:ma,setAttr:function(a,b){hb?this.element[a]=b:this.element.setAttribute(a,b)},classSetter:function(a){this.element.className=a},dashstyleSetter:function(a,
  b,c){(c.getElementsByTagName("stroke")[0]||Z(this.renderer.prepVML(["<stroke/>"]),null,null,c))[b]=a||"solid";this[b]=a},dSetter:function(a,b,c){var d=this.shadows,a=a||[];this.d=a.join&&a.join(" ");c.path=a=this.pathToVML(a);if(d)for(c=d.length;c--;)d[c].path=d[c].cutOff?this.cutOffPath(a,d[c].cutOff):a;this.setAttr(b,a)},fillSetter:function(a,b,c){var d=c.nodeName;if(d==="SPAN")c.style.color=a;else if(d!=="IMG")c.filled=a!==R,this.setAttr("fillcolor",this.renderer.color(a,c,b,this))},opacitySetter:ma,
  rotationSetter:function(a,b,c){c=c.style;this[b]=c[b]=a;c.left=-x($(a*ga)+1)+"px";c.top=x(W(a*ga))+"px"},strokeSetter:function(a,b,c){this.setAttr("strokecolor",this.renderer.color(a,c,b))},"stroke-widthSetter":function(a,b,c){c.stroked=!!a;this[b]=a;qa(a)&&(a+="px");this.setAttr("strokeweight",a)},titleSetter:function(a,b){this.setAttr(b,a)},visibilitySetter:function(a,b,c){a==="inherit"&&(a="visible");this.shadows&&m(this.shadows,function(c){c.style[b]=a});c.nodeName==="DIV"&&(a=a==="hidden"?"-999em":
  0,hb||(c.style[b]=a?"visible":"hidden"),b="top");c.style[b]=a},xSetter:function(a,b,c){this[b]=a;b==="x"?b="left":b==="y"&&(b="top");this.updateClipping?(this[b]=a,this.updateClipping()):c.style[b]=a},zIndexSetter:function(a,b,c){c.style[b]=a}};w.VMLElement=D=ja(K,D);D.prototype.ySetter=D.prototype.widthSetter=D.prototype.heightSetter=D.prototype.xSetter;var Na={Element:D,isIE8:Ba.indexOf("MSIE 8.0")>-1,init:function(a,b,c,d){var e;this.alignedObjects=[];d=this.createElement(Ka).css(r(this.getStyle(d),
  {position:"relative"}));e=d.element;a.appendChild(d.element);this.isVML=!0;this.box=e;this.boxWrapper=d;this.cache={};this.setSize(b,c,!1);if(!A.namespaces.hcv){A.namespaces.add("hcv","urn:schemas-microsoft-com:vml");try{A.createStyleSheet().cssText="hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke{ behavior:url(#default#VML); display: inline-block; } "}catch(f){A.styleSheets[0].cssText+="hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke{ behavior:url(#default#VML); display: inline-block; } "}}},
  isHidden:function(){return!this.box.offsetWidth},clipRect:function(a,b,c,d){var e=this.createElement(),f=ca(a);return r(e,{members:[],count:0,left:(f?a.x:a)+1,top:(f?a.y:b)+1,width:(f?a.width:c)-1,height:(f?a.height:d)-1,getCSS:function(a){var b=a.element,c=b.nodeName,a=a.inverted,d=this.top-(c==="shape"?b.offsetTop:0),e=this.left,b=e+this.width,f=d+this.height,d={clip:"rect("+x(a?e:d)+"px,"+x(a?f:b)+"px,"+x(a?b:f)+"px,"+x(a?d:e)+"px)"};!a&&hb&&c==="DIV"&&r(d,{width:b+"px",height:f+"px"});return d},
  updateClipping:function(){m(e.members,function(a){a.element&&a.css(e.getCSS(a))})}})},color:function(a,b,c,d){var e=this,f,g=/^rgba/,h,i,j=R;a&&a.linearGradient?i="gradient":a&&a.radialGradient&&(i="pattern");if(i){var k,l,n=a.linearGradient||a.radialGradient,o,q,y,p,C,v="",a=a.stops,s,fa=[],t=function(){h=['<fill colors="'+fa.join(",")+'" opacity="',y,'" o:opacity2="',q,'" type="',i,'" ',v,'focus="100%" method="any" />'];Z(e.prepVML(h),null,null,b)};o=a[0];s=a[a.length-1];o[0]>0&&a.unshift([0,o[1]]);
  s[0]<1&&a.push([1,s[1]]);m(a,function(a,b){g.test(a[1])?(f=na(a[1]),k=f.get("rgb"),l=f.get("a")):(k=a[1],l=1);fa.push(a[0]*100+"% "+k);b?(y=l,p=k):(q=l,C=k)});if(c==="fill")if(i==="gradient")c=n.x1||n[0]||0,a=n.y1||n[1]||0,o=n.x2||n[2]||0,n=n.y2||n[3]||0,v='angle="'+(90-V.atan((n-a)/(o-c))*180/la)+'"',t();else{var j=n.r,u=j*2,x=j*2,r=n.cx,E=n.cy,z=b.radialReference,w,j=function(){z&&(w=d.getBBox(),r+=(z[0]-w.x)/w.width-0.5,E+=(z[1]-w.y)/w.height-0.5,u*=z[2]/w.width,x*=z[2]/w.height);v='src="'+P.global.VMLRadialGradientURL+
  '" size="'+u+","+x+'" origin="0.5,0.5" position="'+r+","+E+'" color2="'+C+'" ';t()};d.added?j():d.onAdd=j;j=p}else j=k}else if(g.test(a)&&b.tagName!=="IMG")f=na(a),h=["<",c,' opacity="',f.get("a"),'"/>'],Z(this.prepVML(h),null,null,b),j=f.get("rgb");else{j=b.getElementsByTagName(c);if(j.length)j[0].opacity=1,j[0].type="solid";j=a}return j},prepVML:function(a){var b=this.isIE8,a=a.join("");b?(a=a.replace("/>",' xmlns="urn:schemas-microsoft-com:vml" />'),a=a.indexOf('style="')===-1?a.replace("/>",' style="display:inline-block;behavior:url(#default#VML);" />'):
  a.replace('style="','style="display:inline-block;behavior:url(#default#VML);')):a=a.replace("<","<hcv:");return a},text:ta.prototype.html,path:function(a){var b={coordsize:"10 10"};Ha(a)?b.d=a:ca(a)&&r(b,a);return this.createElement("shape").attr(b)},circle:function(a,b,c){var d=this.symbol("circle");if(ca(a))c=a.r,b=a.y,a=a.x;d.isCircle=!0;d.r=c;return d.attr({x:a,y:b})},g:function(a){var b;a&&(b={className:"highcharts-"+a,"class":"highcharts-"+a});return this.createElement(Ka).attr(b)},image:function(a,
  b,c,d,e){var f=this.createElement("img").attr({src:a});arguments.length>1&&f.attr({x:b,y:c,width:d,height:e});return f},createElement:function(a){return a==="rect"?this.symbol(a):ta.prototype.createElement.call(this,a)},invertChild:function(a,b){var c=this,d=b.style,e=a.tagName==="IMG"&&a.style;F(a,{flip:"x",left:B(d.width)-(e?B(e.top):1),top:B(d.height)-(e?B(e.left):1),rotation:-90});m(a.childNodes,function(b){c.invertChild(b,a)})},symbols:{arc:function(a,b,c,d,e){var f=e.start,g=e.end,h=e.r||c||
  d,c=e.innerR,d=W(f),i=$(f),j=W(g),k=$(g);if(g-f===0)return["x"];f=["wa",a-h,b-h,a+h,b+h,a+h*d,b+h*i,a+h*j,b+h*k];e.open&&!c&&f.push("e","M",a,b);f.push("at",a-c,b-c,a+c,b+c,a+c*j,b+c*k,a+c*d,b+c*i,"x","e");f.isArc=!0;return f},circle:function(a,b,c,d,e){e&&(c=d=2*e.r);e&&e.isCircle&&(a-=c/2,b-=d/2);return["wa",a,b,a+c,b+d,a+c,b+d/2,a+c,b+d/2,"e"]},rect:function(a,b,c,d,e){return ta.prototype.symbols[!s(e)||!e.r?"square":"callout"].call(0,a,b,c,d,e)}}};w.VMLRenderer=D=function(){this.init.apply(this,
  arguments)};D.prototype=z(ta.prototype,Na);$a=D}ta.prototype.measureSpanWidth=function(a,b){var c=A.createElement("span"),d;d=A.createTextNode(a);c.appendChild(d);F(c,b);this.box.appendChild(c);d=c.offsetWidth;Ra(c);return d};var Lb;if(ea)w.CanVGRenderer=D=function(){Ca="http://www.w3.org/1999/xhtml"},D.prototype.symbols={},Lb=function(){function a(){var a=b.length,d;for(d=0;d<a;d++)b[d]();b=[]}var b=[];return{push:function(c,d){b.length===0&&Qb(d,a);b.push(c)}}}(),$a=D;Ta.prototype={addLabel:function(){var a=
  this.axis,b=a.options,c=a.chart,d=a.categories,e=a.names,f=this.pos,g=b.labels,h=a.tickPositions,i=f===h[0],j=f===h[h.length-1],e=d?p(d[f],e[f],f):f,d=this.label,h=h.info,k;a.isDatetimeAxis&&h&&(k=b.dateTimeLabelFormats[h.higherRanks[f]||h.unitName]);this.isFirst=i;this.isLast=j;b=a.labelFormatter.call({axis:a,chart:c,isFirst:i,isLast:j,dateTimeLabelFormat:k,value:a.isLog?da(ha(e)):e});s(d)?d&&d.attr({text:b}):(this.labelLength=(this.label=d=s(b)&&g.enabled?c.renderer.text(b,0,0,g.useHTML).css(z(g.style)).add(a.labelGroup):
  null)&&d.getBBox().width,this.rotation=0)},getLabelSize:function(){return this.label?this.label.getBBox()[this.axis.horiz?"height":"width"]:0},handleOverflow:function(a){var b=this.axis,c=a.x,d=b.chart.chartWidth,e=b.chart.spacing,f=p(b.labelLeft,e[3]),e=p(b.labelRight,d-e[1]),g=this.label,h=this.rotation,i={left:0,center:0.5,right:1}[b.labelAlign],j=g.getBBox().width,k=b.slotWidth,l;if(h)h<0&&c-i*j<f?l=x(c/W(h*ga)-f):h>0&&c+i*j>e&&(l=x((d-c)/W(h*ga)));else{d=c-i*j;c+=i*j;if(d<f)k-=f-d,a.x=f,g.attr({align:"left"});
  else if(c>e)k-=c-e,a.x=e,g.attr({align:"right"});if(j>k||b.autoRotation&&g.styles.width)l=k}l&&g.css({width:l,textOverflow:"ellipsis"})},getPosition:function(a,b,c,d){var e=this.axis,f=e.chart,g=d&&f.oldChartHeight||f.chartHeight;return{x:a?e.translate(b+c,null,null,d)+e.transB:e.left+e.offset+(e.opposite?(d&&f.oldChartWidth||f.chartWidth)-e.right-e.left:0),y:a?g-e.bottom+e.offset-(e.opposite?e.height:0):g-e.translate(b+c,null,null,d)-e.transB}},getLabelPosition:function(a,b,c,d,e,f,g,h){var i=this.axis,
  j=i.transA,k=i.reversed,l=i.staggerLines,n=i.tickRotCorr||{x:0,y:0},c=p(e.y,n.y+(i.side===2?8:-(c.getBBox().height/2))),a=a+e.x+n.x-(f&&d?f*j*(k?-1:1):0),b=b+c-(f&&!d?f*j*(k?1:-1):0);l&&(b+=g/(h||1)%l*(i.labelOffset/l));return{x:a,y:x(b)}},getMarkPath:function(a,b,c,d,e,f){return f.crispLine(["M",a,b,"L",a+(e?0:-c),b+(e?c:0)],d)},render:function(a,b,c){var d=this.axis,e=d.options,f=d.chart.renderer,g=d.horiz,h=this.type,i=this.label,j=this.pos,k=e.labels,l=this.gridLine,n=h?h+"Grid":"grid",o=h?h+
  "Tick":"tick",q=e[n+"LineWidth"],y=e[n+"LineColor"],m=e[n+"LineDashStyle"],C=e[o+"Length"],n=e[o+"Width"]||0,v=e[o+"Color"],s=e[o+"Position"],o=this.mark,fa=k.step,t=!0,x=d.tickmarkOffset,r=this.getPosition(g,j,x,b),w=r.x,r=r.y,z=g&&w===d.pos+d.len||!g&&r===d.pos?-1:1,c=p(c,1);this.isActive=!0;if(q){j=d.getPlotLinePath(j+x,q*z,b,!0);if(l===u){l={stroke:y,"stroke-width":q};if(m)l.dashstyle=m;if(!h)l.zIndex=1;if(b)l.opacity=0;this.gridLine=l=q?f.path(j).attr(l).add(d.gridGroup):null}if(!b&&l&&j)l[this.isNew?
  "attr":"animate"]({d:j,opacity:c})}if(n&&C)s==="inside"&&(C=-C),d.opposite&&(C=-C),h=this.getMarkPath(w,r,C,n*z,g,f),o?o.animate({d:h,opacity:c}):this.mark=f.path(h).attr({stroke:v,"stroke-width":n,opacity:c}).add(d.axisGroup);if(i&&!isNaN(w))i.xy=r=this.getLabelPosition(w,r,i,g,k,x,a,fa),this.isFirst&&!this.isLast&&!p(e.showFirstLabel,1)||this.isLast&&!this.isFirst&&!p(e.showLastLabel,1)?t=!1:g&&!d.isRadial&&!k.step&&!k.rotation&&!b&&c!==0&&this.handleOverflow(r),fa&&a%fa&&(t=!1),t&&!isNaN(r.y)?
  (r.opacity=c,i[this.isNew?"attr":"animate"](r),this.isNew=!1):i.attr("y",-9999)},destroy:function(){Qa(this,this.axis)}};w.PlotLineOrBand=function(a,b){this.axis=a;if(b)this.options=b,this.id=b.id};w.PlotLineOrBand.prototype={render:function(){var a=this,b=a.axis,c=b.horiz,d=a.options,e=d.label,f=a.label,g=d.width,h=d.to,i=d.from,j=s(i)&&s(h),k=d.value,l=d.dashStyle,n=a.svgElem,o=[],q,y=d.color,p=d.zIndex,m=d.events,v={},t=b.chart.renderer;b.isLog&&(i=Ea(i),h=Ea(h),k=Ea(k));if(g){if(o=b.getPlotLinePath(k,
  g),v={stroke:y,"stroke-width":g},l)v.dashstyle=l}else if(j){o=b.getPlotBandPath(i,h,d);if(y)v.fill=y;if(d.borderWidth)v.stroke=d.borderColor,v["stroke-width"]=d.borderWidth}else return;if(s(p))v.zIndex=p;if(n)if(o)n.animate({d:o},null,n.onGetPath);else{if(n.hide(),n.onGetPath=function(){n.show()},f)a.label=f=f.destroy()}else if(o&&o.length&&(a.svgElem=n=t.path(o).attr(v).add(),m))for(q in d=function(b){n.on(b,function(c){m[b].apply(a,[c])})},m)d(q);if(e&&s(e.text)&&o&&o.length&&b.width>0&&b.height>
  0){e=z({align:c&&j&&"center",x:c?!j&&4:10,verticalAlign:!c&&j&&"middle",y:c?j?16:10:j?6:-4,rotation:c&&!j&&90},e);if(!f){v={align:e.textAlign||e.align,rotation:e.rotation};if(s(p))v.zIndex=p;a.label=f=t.text(e.text,0,0,e.useHTML).attr(v).css(e.style).add()}b=[o[1],o[4],j?o[6]:o[1]];j=[o[2],o[5],j?o[7]:o[2]];o=Pa(b);c=Pa(j);f.align(e,!1,{x:o,y:c,width:Fa(b)-o,height:Fa(j)-c});f.show()}else f&&f.hide();return a},destroy:function(){ia(this.axis.plotLinesAndBands,this);delete this.axis;Qa(this)}};var va=
  w.Axis=function(){this.init.apply(this,arguments)};va.prototype={defaultOptions:{dateTimeLabelFormats:{millisecond:"%H:%M:%S.%L",second:"%H:%M:%S",minute:"%H:%M",hour:"%H:%M",day:"%e. %b",week:"%e. %b",month:"%b '%y",year:"%Y"},endOnTick:!1,gridLineColor:"#D8D8D8",labels:{enabled:!0,style:{color:"#606060",cursor:"default",fontSize:"11px"},x:0,y:15},lineColor:"#C0D0E0",lineWidth:1,minPadding:0.01,maxPadding:0.01,minorGridLineColor:"#E0E0E0",minorGridLineWidth:1,minorTickColor:"#A0A0A0",minorTickLength:2,
  minorTickPosition:"outside",startOfWeek:1,startOnTick:!1,tickColor:"#C0D0E0",tickLength:10,tickmarkPlacement:"between",tickPixelInterval:100,tickPosition:"outside",tickWidth:1,title:{align:"middle",style:{color:"#707070"}},type:"linear"},defaultYAxisOptions:{endOnTick:!0,gridLineWidth:1,tickPixelInterval:72,showLastLabel:!0,labels:{x:-8,y:3},lineWidth:0,maxPadding:0.05,minPadding:0.05,startOnTick:!0,tickWidth:0,title:{rotation:270,text:"Values"},stackLabels:{enabled:!1,formatter:function(){return w.numberFormat(this.total,
  -1)},style:z(aa.line.dataLabels.style,{color:"#000000"})}},defaultLeftAxisOptions:{labels:{x:-15,y:null},title:{rotation:270}},defaultRightAxisOptions:{labels:{x:15,y:null},title:{rotation:90}},defaultBottomAxisOptions:{labels:{autoRotation:[-45],x:0,y:null},title:{rotation:0}},defaultTopAxisOptions:{labels:{autoRotation:[-45],x:0,y:-15},title:{rotation:0}},init:function(a,b){var c=b.isX;this.horiz=a.inverted?!c:c;this.coll=(this.isXAxis=c)?"xAxis":"yAxis";this.opposite=b.opposite;this.side=b.side||
  (this.horiz?this.opposite?0:2:this.opposite?1:3);this.setOptions(b);var d=this.options,e=d.type;this.labelFormatter=d.labels.formatter||this.defaultLabelFormatter;this.userOptions=b;this.minPixelPadding=0;this.chart=a;this.reversed=d.reversed;this.zoomEnabled=d.zoomEnabled!==!1;this.categories=d.categories||e==="category";this.names=this.names||[];this.isLog=e==="logarithmic";this.isDatetimeAxis=e==="datetime";this.isLinked=s(d.linkedTo);this.ticks={};this.labelEdge=[];this.minorTicks={};this.plotLinesAndBands=
  [];this.alternateBands={};this.len=0;this.minRange=this.userMinRange=d.minRange||d.maxZoom;this.range=d.range;this.offset=d.offset||0;this.stacks={};this.oldStacks={};this.min=this.max=null;this.crosshair=p(d.crosshair,ra(a.options.tooltip.crosshairs)[c?0:1],!1);var f,d=this.options.events;Ma(this,a.axes)===-1&&(c&&!this.isColorAxis?a.axes.splice(a.xAxis.length,0,this):a.axes.push(this),a[this.coll].push(this));this.series=this.series||[];if(a.inverted&&c&&this.reversed===u)this.reversed=!0;this.removePlotLine=
  this.removePlotBand=this.removePlotBandOrLine;for(f in d)N(this,f,d[f]);if(this.isLog)this.val2lin=Ea,this.lin2val=ha},setOptions:function(a){this.options=z(this.defaultOptions,this.isXAxis?{}:this.defaultYAxisOptions,[this.defaultTopAxisOptions,this.defaultRightAxisOptions,this.defaultBottomAxisOptions,this.defaultLeftAxisOptions][this.side],z(P[this.coll],a))},defaultLabelFormatter:function(){var a=this.axis,b=this.value,c=a.categories,d=this.dateTimeLabelFormat,e=P.lang.numericSymbols,f=e&&e.length,
  g,h=a.options.labels.format,a=a.isLog?b:a.tickInterval;if(h)g=Ja(h,this);else if(c)g=b;else if(d)g=Oa(d,b);else if(f&&a>=1E3)for(;f--&&g===u;)c=Math.pow(1E3,f+1),a>=c&&e[f]!==null&&(g=w.numberFormat(b/c,-1)+e[f]);g===u&&(g=O(b)>=1E4?w.numberFormat(b,0):w.numberFormat(b,-1,u,""));return g},getSeriesExtremes:function(){var a=this,b=a.chart;a.hasVisibleSeries=!1;a.dataMin=a.dataMax=a.ignoreMinPadding=a.ignoreMaxPadding=null;a.buildStacks&&a.buildStacks();m(a.series,function(c){if(c.visible||!b.options.chart.ignoreHiddenSeries){var d;
  d=c.options.threshold;var e;a.hasVisibleSeries=!0;a.isLog&&d<=0&&(d=null);if(a.isXAxis){if(d=c.xData,d.length)a.dataMin=I(p(a.dataMin,d[0]),Pa(d)),a.dataMax=t(p(a.dataMax,d[0]),Fa(d))}else{c.getExtremes();e=c.dataMax;c=c.dataMin;if(s(c)&&s(e))a.dataMin=I(p(a.dataMin,c),c),a.dataMax=t(p(a.dataMax,e),e);if(s(d))if(a.dataMin>=d)a.dataMin=d,a.ignoreMinPadding=!0;else if(a.dataMax<d)a.dataMax=d,a.ignoreMaxPadding=!0}}})},translate:function(a,b,c,d,e,f){var g=1,h=0,i=d?this.oldTransA:this.transA,d=d?this.oldMin:
  this.min,j=this.minPixelPadding,e=(this.doPostTranslate||this.isLog&&e)&&this.lin2val;if(!i)i=this.transA;if(c)g*=-1,h=this.len;this.reversed&&(g*=-1,h-=g*(this.sector||this.len));b?(a=a*g+h,a-=j,a=a/i+d,e&&(a=this.lin2val(a))):(e&&(a=this.val2lin(a)),f==="between"&&(f=0.5),a=g*(a-d)*i+h+g*j+(qa(f)?i*f*this.pointRange:0));return a},toPixels:function(a,b){return this.translate(a,!1,!this.horiz,null,!0)+(b?0:this.pos)},toValue:function(a,b){return this.translate(a-(b?0:this.pos),!0,!this.horiz,null,
  !0)},getPlotLinePath:function(a,b,c,d,e){var f=this.chart,g=this.left,h=this.top,i,j,k=c&&f.oldChartHeight||f.chartHeight,l=c&&f.oldChartWidth||f.chartWidth,n;i=this.transB;var o=function(a,b,c){if(a<b||a>c)d?a=I(t(b,a),c):n=!0;return a},e=p(e,this.translate(a,null,null,c)),a=c=x(e+i);i=j=x(k-e-i);isNaN(e)?n=!0:this.horiz?(i=h,j=k-this.bottom,a=c=o(a,g,g+this.width)):(a=g,c=l-this.right,i=j=o(i,h,h+this.height));return n&&!d?null:f.renderer.crispLine(["M",a,i,"L",c,j],b||1)},getLinearTickPositions:function(a,
  b,c){var d,e=da(U(b/a)*a),f=da(sa(c/a)*a),g=[];if(b===c&&qa(b))return[b];for(b=e;b<=f;){g.push(b);b=da(b+a);if(b===d)break;d=b}return g},getMinorTickPositions:function(){var a=this.options,b=this.tickPositions,c=this.minorTickInterval,d=[],e,f=this.min;e=this.max;var g=e-f;if(g&&g/c<this.len/3)if(this.isLog){a=b.length;for(e=1;e<a;e++)d=d.concat(this.getLogTickPositions(c,b[e-1],b[e],!0))}else if(this.isDatetimeAxis&&a.minorTickInterval==="auto")d=d.concat(this.getTimeTicks(this.normalizeTimeTickInterval(c),
  f,e,a.startOfWeek));else for(b=f+(b[0]-f)%c;b<=e;b+=c)d.push(b);this.trimTicks(d);return d},adjustForMinRange:function(){var a=this.options,b=this.min,c=this.max,d,e=this.dataMax-this.dataMin>=this.minRange,f,g,h,i,j;if(this.isXAxis&&this.minRange===u&&!this.isLog)s(a.min)||s(a.max)?this.minRange=null:(m(this.series,function(a){i=a.xData;for(g=j=a.xIncrement?1:i.length-1;g>0;g--)if(h=i[g]-i[g-1],f===u||h<f)f=h}),this.minRange=I(f*5,this.dataMax-this.dataMin));if(c-b<this.minRange){var k=this.minRange;
  d=(k-c+b)/2;d=[b-d,p(a.min,b-d)];if(e)d[2]=this.dataMin;b=Fa(d);c=[b+k,p(a.max,b+k)];if(e)c[2]=this.dataMax;c=Pa(c);c-b<k&&(d[0]=c-k,d[1]=p(a.min,c-k),b=Fa(d))}this.min=b;this.max=c},setAxisTranslation:function(a){var b=this,c=b.max-b.min,d=b.axisPointRange||0,e,f=0,g=0,h=b.linkedParent,i=!!b.categories,j=b.transA,k=b.isXAxis;if(k||i||d)if(h?(f=h.minPointOffset,g=h.pointRangePadding):m(b.series,function(a){var h=i?1:k?a.pointRange:b.axisPointRange||0,j=a.options.pointPlacement,q=a.closestPointRange;
  h>c&&(h=0);d=t(d,h);b.single||(f=t(f,Da(j)?0:h/2),g=t(g,j==="on"?0:h));!a.noSharedTooltip&&s(q)&&(e=s(e)?I(e,q):q)}),h=b.ordinalSlope&&e?b.ordinalSlope/e:1,b.minPointOffset=f*=h,b.pointRangePadding=g*=h,b.pointRange=I(d,c),k)b.closestPointRange=e;if(a)b.oldTransA=j;b.translationSlope=b.transA=j=b.len/(c+g||1);b.transB=b.horiz?b.left:b.bottom;b.minPixelPadding=j*f},setTickInterval:function(a){var b=this,c=b.chart,d=b.options,e=b.isLog,f=b.isDatetimeAxis,g=b.isXAxis,h=b.isLinked,i=d.maxPadding,j=d.minPadding,
  k=d.tickInterval,l=d.tickPixelInterval,n=b.categories;!f&&!n&&!h&&this.getTickAmount();h?(b.linkedParent=c[b.coll][d.linkedTo],c=b.linkedParent.getExtremes(),b.min=p(c.min,c.dataMin),b.max=p(c.max,c.dataMax),d.type!==b.linkedParent.options.type&&ka(11,1)):(b.min=p(b.userMin,d.min,b.dataMin),b.max=p(b.userMax,d.max,b.dataMax));if(e)!a&&I(b.min,p(b.dataMin,b.min))<=0&&ka(10,1),b.min=da(Ea(b.min)),b.max=da(Ea(b.max));if(b.range&&s(b.max))b.userMin=b.min=t(b.min,b.max-b.range),b.userMax=b.max,b.range=
  null;b.beforePadding&&b.beforePadding();b.adjustForMinRange();if(!n&&!b.axisPointRange&&!b.usePercentage&&!h&&s(b.min)&&s(b.max)&&(c=b.max-b.min)){if(!s(d.min)&&!s(b.userMin)&&j&&(b.dataMin<0||!b.ignoreMinPadding))b.min-=c*j;if(!s(d.max)&&!s(b.userMax)&&i&&(b.dataMax>0||!b.ignoreMaxPadding))b.max+=c*i}if(qa(d.floor))b.min=t(b.min,d.floor);if(qa(d.ceiling))b.max=I(b.max,d.ceiling);b.tickInterval=b.min===b.max||b.min===void 0||b.max===void 0?1:h&&!k&&l===b.linkedParent.options.tickPixelInterval?b.linkedParent.tickInterval:
  p(k,this.tickAmount?(b.max-b.min)/t(this.tickAmount-1,1):void 0,n?1:(b.max-b.min)*l/t(b.len,l));g&&!a&&m(b.series,function(a){a.processData(b.min!==b.oldMin||b.max!==b.oldMax)});b.setAxisTranslation(!0);b.beforeSetTickPositions&&b.beforeSetTickPositions();if(b.postProcessTickInterval)b.tickInterval=b.postProcessTickInterval(b.tickInterval);if(b.pointRange)b.tickInterval=t(b.pointRange,b.tickInterval);a=p(d.minTickInterval,b.isDatetimeAxis&&b.closestPointRange);if(!k&&b.tickInterval<a)b.tickInterval=
  a;if(!f&&!e&&!k)b.tickInterval=pb(b.tickInterval,null,ob(b.tickInterval),p(d.allowDecimals,!(b.tickInterval>0.5&&b.tickInterval<5&&b.max>1E3&&b.max<9999)),!!this.tickAmount);if(!this.tickAmount&&this.len)b.tickInterval=b.unsquish();this.setTickPositions()},setTickPositions:function(){var a=this.options,b,c=a.tickPositions,d=a.tickPositioner,e=a.startOnTick,f=a.endOnTick,g;this.tickmarkOffset=this.categories&&a.tickmarkPlacement==="between"&&this.tickInterval===1?0.5:0;this.minorTickInterval=a.minorTickInterval===
  "auto"&&this.tickInterval?this.tickInterval/5:a.minorTickInterval;this.tickPositions=b=a.tickPositions&&a.tickPositions.slice();if(!b&&(this.tickPositions=b=this.isDatetimeAxis?this.getTimeTicks(this.normalizeTimeTickInterval(this.tickInterval,a.units),this.min,this.max,a.startOfWeek,this.ordinalPositions,this.closestPointRange,!0):this.isLog?this.getLogTickPositions(this.tickInterval,this.min,this.max):this.getLinearTickPositions(this.tickInterval,this.min,this.max),d&&(d=d.apply(this,[this.min,
  this.max]))))this.tickPositions=b=d;if(!this.isLinked)this.trimTicks(b,e,f),this.min===this.max&&s(this.min)&&!this.tickAmount&&(g=!0,this.min-=0.5,this.max+=0.5),this.single=g,!c&&!d&&this.adjustTickAmount()},trimTicks:function(a,b,c){var d=a[0],e=a[a.length-1],f=this.minPointOffset||0;b?this.min=d:this.min-f>d&&a.shift();c?this.max=e:this.max+f<e&&a.pop();a.length===0&&s(d)&&a.push((e+d)/2)},getTickAmount:function(){var a={},b,c=this.options,d=c.tickAmount,e=c.tickPixelInterval;!s(c.tickInterval)&&
  this.len<e&&!this.isRadial&&!this.isLog&&c.startOnTick&&c.endOnTick&&(d=2);!d&&this.chart.options.chart.alignTicks!==!1&&c.alignTicks!==!1&&(m(this.chart[this.coll],function(c){var d=c.options,c=c.horiz,d=[c?d.left:d.top,c?d.width:d.height,d.pane].join(",");a[d]?b=!0:a[d]=1}),b&&(d=sa(this.len/e)+1));if(d<4)this.finalTickAmt=d,d=5;this.tickAmount=d},adjustTickAmount:function(){var a=this.tickInterval,b=this.tickPositions,c=this.tickAmount,d=this.finalTickAmt,e=b&&b.length;if(e<c){for(;b.length<c;)b.push(da(b[b.length-
  1]+a));this.transA*=(e-1)/(c-1);this.max=b[b.length-1]}else e>c&&(this.tickInterval*=2,this.setTickPositions());if(s(d)){for(a=c=b.length;a--;)(d===3&&a%2===1||d<=2&&a>0&&a<c-1)&&b.splice(a,1);this.finalTickAmt=u}},setScale:function(){var a=this.stacks,b,c,d,e;this.oldMin=this.min;this.oldMax=this.max;this.oldAxisLength=this.len;this.setAxisSize();e=this.len!==this.oldAxisLength;m(this.series,function(a){if(a.isDirtyData||a.isDirty||a.xAxis.isDirty)d=!0});if(e||d||this.isLinked||this.forceRedraw||
  this.userMin!==this.oldUserMin||this.userMax!==this.oldUserMax){if(!this.isXAxis)for(b in a)for(c in a[b])a[b][c].total=null,a[b][c].cum=0;this.forceRedraw=!1;this.getSeriesExtremes();this.setTickInterval();this.oldUserMin=this.userMin;this.oldUserMax=this.userMax;if(!this.isDirty)this.isDirty=e||this.min!==this.oldMin||this.max!==this.oldMax}else if(!this.isXAxis){if(this.oldStacks)a=this.stacks=this.oldStacks;for(b in a)for(c in a[b])a[b][c].cum=a[b][c].total}},setExtremes:function(a,b,c,d,e){var f=
  this,g=f.chart,c=p(c,!0);m(f.series,function(a){delete a.kdTree});e=r(e,{min:a,max:b});M(f,"setExtremes",e,function(){f.userMin=a;f.userMax=b;f.eventArgs=e;f.isDirtyExtremes=!0;c&&g.redraw(d)})},zoom:function(a,b){var c=this.dataMin,d=this.dataMax,e=this.options;this.allowZoomOutside||(s(c)&&a<=I(c,p(e.min,c))&&(a=u),s(d)&&b>=t(d,p(e.max,d))&&(b=u));this.displayBtn=a!==u||b!==u;this.setExtremes(a,b,!1,u,{trigger:"zoom"});return!0},setAxisSize:function(){var a=this.chart,b=this.options,c=b.offsetLeft||
  0,d=this.horiz,e=p(b.width,a.plotWidth-c+(b.offsetRight||0)),f=p(b.height,a.plotHeight),g=p(b.top,a.plotTop),b=p(b.left,a.plotLeft+c),c=/%$/;c.test(f)&&(f=parseFloat(f)/100*a.plotHeight);c.test(g)&&(g=parseFloat(g)/100*a.plotHeight+a.plotTop);this.left=b;this.top=g;this.width=e;this.height=f;this.bottom=a.chartHeight-f-g;this.right=a.chartWidth-e-b;this.len=t(d?e:f,0);this.pos=d?b:g},getExtremes:function(){var a=this.isLog;return{min:a?da(ha(this.min)):this.min,max:a?da(ha(this.max)):this.max,dataMin:this.dataMin,
  dataMax:this.dataMax,userMin:this.userMin,userMax:this.userMax}},getThreshold:function(a){var b=this.isLog,c=b?ha(this.min):this.min,b=b?ha(this.max):this.max;c>a||a===null?a=c:b<a&&(a=b);return this.translate(a,0,1,0,1)},autoLabelAlign:function(a){a=(p(a,0)-this.side*90+720)%360;return a>15&&a<165?"right":a>195&&a<345?"left":"center"},unsquish:function(){var a=this.ticks,b=this.options.labels,c=this.horiz,d=this.tickInterval,e=d,f=this.len/(((this.categories?1:0)+this.max-this.min)/d),g,h=b.rotation,
  i=this.chart.renderer.fontMetrics(b.style.fontSize,a[0]&&a[0].label),j,k=Number.MAX_VALUE,l,n=function(a){a/=f||1;a=a>1?sa(a):1;return a*d};c?(l=s(h)?[h]:f<p(b.autoRotationLimit,80)&&!b.staggerLines&&!b.step&&b.autoRotation)&&m(l,function(a){var b;if(a===h||a&&a>=-90&&a<=90)j=n(O(i.h/$(ga*a))),b=j+O(a/360),b<k&&(k=b,g=a,e=j)}):e=n(i.h);this.autoRotation=l;this.labelRotation=g;return e},renderUnsquish:function(){var a=this.chart,b=a.renderer,c=this.tickPositions,d=this.ticks,e=this.options.labels,
  f=this.horiz,g=a.margin,h=this.slotWidth=f&&!e.step&&!e.rotation&&(this.staggerLines||1)*a.plotWidth/c.length||!f&&(g[3]&&g[3]-a.spacing[3]||a.chartWidth*0.33),i=t(1,x(h-2*(e.padding||5))),j={},g=b.fontMetrics(e.style.fontSize,d[0]&&d[0].label),k,l=0;if(!Da(e.rotation))j.rotation=e.rotation;if(this.autoRotation)m(c,function(a){if((a=d[a])&&a.labelLength>l)l=a.labelLength}),l>i&&l>g.h?j.rotation=this.labelRotation:this.labelRotation=0;else if(h){k={width:i+"px",textOverflow:"clip"};for(h=c.length;!f&&
  h--;)if(i=c[h],i=d[i].label)if(i.styles.textOverflow==="ellipsis"&&i.css({textOverflow:"clip"}),i.getBBox().height>this.len/c.length-(g.h-g.f))i.specCss={textOverflow:"ellipsis"}}j.rotation&&(k={width:(l>a.chartHeight*0.5?a.chartHeight*0.33:a.chartHeight)+"px",textOverflow:"ellipsis"});this.labelAlign=j.align=e.align||this.autoLabelAlign(this.labelRotation);m(c,function(a){var b=(a=d[a])&&a.label;if(b)k&&b.css(z(k,b.specCss)),delete b.specCss,b.attr(j),a.rotation=j.rotation});this.tickRotCorr=b.rotCorr(g.b,
  this.labelRotation||0,this.side===2)},getOffset:function(){var a=this,b=a.chart,c=b.renderer,d=a.options,e=a.tickPositions,f=a.ticks,g=a.horiz,h=a.side,i=b.inverted?[1,0,3,2][h]:h,j,k,l=0,n,o=0,q=d.title,y=d.labels,S=0,C=b.axisOffset,b=b.clipOffset,v=[-1,1,1,-1][h],r;a.hasData=j=a.hasVisibleSeries||s(a.min)&&s(a.max)&&!!e;a.showAxis=k=j||p(d.showEmpty,!0);a.staggerLines=a.horiz&&y.staggerLines;if(!a.axisGroup)a.gridGroup=c.g("grid").attr({zIndex:d.gridZIndex||1}).add(),a.axisGroup=c.g("axis").attr({zIndex:d.zIndex||
  2}).add(),a.labelGroup=c.g("axis-labels").attr({zIndex:y.zIndex||7}).addClass("highcharts-"+a.coll.toLowerCase()+"-labels").add();if(j||a.isLinked){if(m(e,function(b){f[b]?f[b].addLabel():f[b]=new Ta(a,b)}),a.renderUnsquish(),m(e,function(b){if(h===0||h===2||{1:"left",3:"right"}[h]===a.labelAlign)S=t(f[b].getLabelSize(),S)}),a.staggerLines)S*=a.staggerLines,a.labelOffset=S}else for(r in f)f[r].destroy(),delete f[r];if(q&&q.text&&q.enabled!==!1){if(!a.axisTitle)a.axisTitle=c.text(q.text,0,0,q.useHTML).attr({zIndex:7,
  rotation:q.rotation||0,align:q.textAlign||{low:"left",middle:"center",high:"right"}[q.align]}).addClass("highcharts-"+this.coll.toLowerCase()+"-title").css(q.style).add(a.axisGroup),a.axisTitle.isNew=!0;if(k)l=a.axisTitle.getBBox()[g?"height":"width"],n=q.offset,o=s(n)?0:p(q.margin,g?5:10);a.axisTitle[k?"show":"hide"]()}a.offset=v*p(d.offset,C[h]);a.tickRotCorr=a.tickRotCorr||{x:0,y:0};c=h===2?a.tickRotCorr.y:0;g=S+o+(S&&v*(g?p(y.y,a.tickRotCorr.y+8):y.x)-c);a.axisTitleMargin=p(n,g);C[h]=t(C[h],a.axisTitleMargin+
  l+v*a.offset,g);b[i]=t(b[i],U(d.lineWidth/2)*2)},getLinePath:function(a){var b=this.chart,c=this.opposite,d=this.offset,e=this.horiz,f=this.left+(c?this.width:0)+d,d=b.chartHeight-this.bottom-(c?this.height:0)+d;c&&(a*=-1);return b.renderer.crispLine(["M",e?this.left:f,e?d:this.top,"L",e?b.chartWidth-this.right:f,e?d:b.chartHeight-this.bottom],a)},getTitlePosition:function(){var a=this.horiz,b=this.left,c=this.top,d=this.len,e=this.options.title,f=a?b:c,g=this.opposite,h=this.offset,i=B(e.style.fontSize||
  12),d={low:f+(a?0:d),middle:f+d/2,high:f+(a?d:0)}[e.align],b=(a?c+this.height:b)+(a?1:-1)*(g?-1:1)*this.axisTitleMargin+(this.side===2?i:0);return{x:a?d:b+(g?this.width:0)+h+(e.x||0),y:a?b-(g?this.height:0)+h:d+(e.y||0)}},render:function(){var a=this,b=a.chart,c=b.renderer,d=a.options,e=a.isLog,f=a.isLinked,g=a.tickPositions,h=a.axisTitle,i=a.ticks,j=a.minorTicks,k=a.alternateBands,l=d.stackLabels,n=d.alternateGridColor,o=a.tickmarkOffset,q=d.lineWidth,y,p=b.hasRendered&&s(a.oldMin)&&!isNaN(a.oldMin);
  y=a.hasData;var C=a.showAxis,v,r;a.labelEdge.length=0;a.overlap=!1;m([i,j,k],function(a){for(var b in a)a[b].isActive=!1});if(y||f){a.minorTickInterval&&!a.categories&&m(a.getMinorTickPositions(),function(b){j[b]||(j[b]=new Ta(a,b,"minor"));p&&j[b].isNew&&j[b].render(null,!0);j[b].render(null,!1,1)});if(g.length&&(m(g,function(b,c){if(!f||b>=a.min&&b<=a.max)i[b]||(i[b]=new Ta(a,b)),p&&i[b].isNew&&i[b].render(c,!0,0.1),i[b].render(c)}),o&&(a.min===0||a.single)))i[-1]||(i[-1]=new Ta(a,-1,null,!0)),
  i[-1].render(-1);n&&m(g,function(b,c){if(c%2===0&&b<a.max)k[b]||(k[b]=new w.PlotLineOrBand(a)),v=b+o,r=g[c+1]!==u?g[c+1]+o:a.max,k[b].options={from:e?ha(v):v,to:e?ha(r):r,color:n},k[b].render(),k[b].isActive=!0});if(!a._addedPlotLB)m((d.plotLines||[]).concat(d.plotBands||[]),function(b){a.addPlotBandOrLine(b)}),a._addedPlotLB=!0}m([i,j,k],function(a){var c,d,e=[],f=za?za.duration||500:0,g=function(){for(d=e.length;d--;)a[e[d]]&&!a[e[d]].isActive&&(a[e[d]].destroy(),delete a[e[d]])};for(c in a)if(!a[c].isActive)a[c].render(c,
  !1,0),a[c].isActive=!1,e.push(c);a===k||!b.hasRendered||!f?g():f&&setTimeout(g,f)});if(q)y=a.getLinePath(q),a.axisLine?a.axisLine.animate({d:y}):a.axisLine=c.path(y).attr({stroke:d.lineColor,"stroke-width":q,zIndex:7}).add(a.axisGroup),a.axisLine[C?"show":"hide"]();if(h&&C)h[h.isNew?"attr":"animate"](a.getTitlePosition()),h.isNew=!1;l&&l.enabled&&a.renderStackTotals();a.isDirty=!1},redraw:function(){this.render();m(this.plotLinesAndBands,function(a){a.render()});m(this.series,function(a){a.isDirty=
  !0})},destroy:function(a){var b=this,c=b.stacks,d,e=b.plotLinesAndBands;a||Y(b);for(d in c)Qa(c[d]),c[d]=null;m([b.ticks,b.minorTicks,b.alternateBands],function(a){Qa(a)});for(a=e.length;a--;)e[a].destroy();m("stackTotalGroup,axisLine,axisTitle,axisGroup,cross,gridGroup,labelGroup".split(","),function(a){b[a]&&(b[a]=b[a].destroy())});this.cross&&this.cross.destroy()},drawCrosshair:function(a,b){var c,d=this.crosshair,e=d.animation;if(!this.crosshair||(s(b)||!p(this.crosshair.snap,!0))===!1)this.hideCrosshair();
  else if(p(d.snap,!0)?s(b)&&(c=this.isXAxis?b.plotX:this.len-b.plotY):c=this.horiz?a.chartX-this.pos:this.len-a.chartY+this.pos,c=this.isRadial?this.getPlotLinePath(this.isXAxis?b.x:p(b.stackY,b.y))||null:this.getPlotLinePath(null,null,null,null,c)||null,c===null)this.hideCrosshair();else if(this.cross)this.cross.attr({visibility:"visible"})[e?"animate":"attr"]({d:c},e);else{e=this.categories&&!this.isRadial;e={"stroke-width":d.width||(e?this.transA:1),stroke:d.color||(e?"rgba(155,200,255,0.2)":"#C0C0C0"),
  zIndex:d.zIndex||2};if(d.dashStyle)e.dashstyle=d.dashStyle;this.cross=this.chart.renderer.path(c).attr(e).add()}},hideCrosshair:function(){this.cross&&this.cross.hide()}};r(va.prototype,{getPlotBandPath:function(a,b){var c=this.getPlotLinePath(b,null,null,!0),d=this.getPlotLinePath(a,null,null,!0);d&&c&&d.toString()!==c.toString()?d.push(c[4],c[5],c[1],c[2]):d=null;return d},addPlotBand:function(a){return this.addPlotBandOrLine(a,"plotBands")},addPlotLine:function(a){return this.addPlotBandOrLine(a,
  "plotLines")},addPlotBandOrLine:function(a,b){var c=(new w.PlotLineOrBand(this,a)).render(),d=this.userOptions;c&&(b&&(d[b]=d[b]||[],d[b].push(a)),this.plotLinesAndBands.push(c));return c},removePlotBandOrLine:function(a){for(var b=this.plotLinesAndBands,c=this.options,d=this.userOptions,e=b.length;e--;)b[e].id===a&&b[e].destroy();m([c.plotLines||[],d.plotLines||[],c.plotBands||[],d.plotBands||[]],function(b){for(e=b.length;e--;)b[e].id===a&&ia(b,b[e])})}});va.prototype.getTimeTicks=function(a,b,
  c,d){var e=[],f={},g=P.global.useUTC,h,i=new Aa(b-Wa(b)),j=a.unitRange,k=a.count;if(s(b)){i[Db](j>=G.second?0:k*U(i.getMilliseconds()/k));if(j>=G.second)i[Eb](j>=G.minute?0:k*U(i.getSeconds()/k));if(j>=G.minute)i[Fb](j>=G.hour?0:k*U(i[rb]()/k));if(j>=G.hour)i[Gb](j>=G.day?0:k*U(i[sb]()/k));if(j>=G.day)i[ub](j>=G.month?1:k*U(i[Xa]()/k));j>=G.month&&(i[vb](j>=G.year?0:k*U(i[Ya]()/k)),h=i[Za]());j>=G.year&&(h-=h%k,i[wb](h));if(j===G.week)i[ub](i[Xa]()-i[tb]()+p(d,1));b=1;if(nb||eb)i=i.getTime(),i=new Aa(i+
  Wa(i));h=i[Za]();for(var d=i.getTime(),l=i[Ya](),n=i[Xa](),o=(G.day+(g?Wa(i):i.getTimezoneOffset()*6E4))%G.day;d<c;)e.push(d),j===G.year?d=gb(h+b*k,0):j===G.month?d=gb(h,l+b*k):!g&&(j===G.day||j===G.week)?d=gb(h,l,n+b*k*(j===G.day?1:7)):d+=j*k,b++;e.push(d);m(kb(e,function(a){return j<=G.hour&&a%G.day===o}),function(a){f[a]="day"})}e.info=r(a,{higherRanks:f,totalRange:j*k});return e};va.prototype.normalizeTimeTickInterval=function(a,b){var c=b||[["millisecond",[1,2,5,10,20,25,50,100,200,500]],["second",
  [1,2,5,10,15,30]],["minute",[1,2,5,10,15,30]],["hour",[1,2,3,4,6,8,12]],["day",[1,2]],["week",[1,2]],["month",[1,2,3,4,6]],["year",null]],d=c[c.length-1],e=G[d[0]],f=d[1],g;for(g=0;g<c.length;g++)if(d=c[g],e=G[d[0]],f=d[1],c[g+1]&&a<=(e*f[f.length-1]+G[c[g+1][0]])/2)break;e===G.year&&a<5*e&&(f=[1,2,5]);c=pb(a/e,f,d[0]==="year"?t(ob(a/e),1):1);return{unitRange:e,count:c,unitName:d[0]}};va.prototype.getLogTickPositions=function(a,b,c,d){var e=this.options,f=this.len,g=[];if(!d)this._minorAutoInterval=
  null;if(a>=0.5)a=x(a),g=this.getLinearTickPositions(a,b,c);else if(a>=0.08)for(var f=U(b),h,i,j,k,l,e=a>0.3?[1,2,4]:a>0.15?[1,2,4,6,8]:[1,2,3,4,5,6,7,8,9];f<c+1&&!l;f++){i=e.length;for(h=0;h<i&&!l;h++)j=Ea(ha(f)*e[h]),j>b&&(!d||k<=c)&&k!==u&&g.push(k),k>c&&(l=!0),k=j}else if(b=ha(b),c=ha(c),a=e[d?"minorTickInterval":"tickInterval"],a=p(a==="auto"?null:a,this._minorAutoInterval,(c-b)*(e.tickPixelInterval/(d?5:1))/((d?f/this.tickPositions.length:f)||1)),a=pb(a,null,ob(a)),g=Ua(this.getLinearTickPositions(a,
  b,c),Ea),!d)this._minorAutoInterval=a/5;if(!d)this.tickInterval=a;return g};var Mb=w.Tooltip=function(){this.init.apply(this,arguments)};Mb.prototype={init:function(a,b){var c=b.borderWidth,d=b.style,e=B(d.padding);this.chart=a;this.options=b;this.crosshairs=[];this.now={x:0,y:0};this.isHidden=!0;this.label=a.renderer.label("",0,0,b.shape||"callout",null,null,b.useHTML,null,"tooltip").attr({padding:e,fill:b.backgroundColor,"stroke-width":c,r:b.borderRadius,zIndex:8}).css(d).css({padding:0}).add().attr({y:-9999});
  ea||this.label.shadow(b.shadow);this.shared=b.shared},destroy:function(){if(this.label)this.label=this.label.destroy();clearTimeout(this.hideTimer);clearTimeout(this.tooltipTimeout)},move:function(a,b,c,d){var e=this,f=e.now,g=e.options.animation!==!1&&!e.isHidden&&(O(a-f.x)>1||O(b-f.y)>1),h=e.followPointer||e.len>1;r(f,{x:g?(2*f.x+a)/3:a,y:g?(f.y+b)/2:b,anchorX:h?u:g?(2*f.anchorX+c)/3:c,anchorY:h?u:g?(f.anchorY+d)/2:d});e.label.attr(f);if(g)clearTimeout(this.tooltipTimeout),this.tooltipTimeout=setTimeout(function(){e&&
  e.move(a,b,c,d)},32)},hide:function(a){var b=this,c;clearTimeout(this.hideTimer);if(!this.isHidden)c=this.chart.hoverPoints,this.hideTimer=setTimeout(function(){b.label.fadeOut();b.isHidden=!0},p(a,this.options.hideDelay,500)),c&&m(c,function(a){a.setState()}),this.chart.hoverPoints=null,this.chart.hoverSeries=null},getAnchor:function(a,b){var c,d=this.chart,e=d.inverted,f=d.plotTop,g=d.plotLeft,h=0,i=0,j,k,a=ra(a);c=a[0].tooltipPos;this.followPointer&&b&&(b.chartX===u&&(b=d.pointer.normalize(b)),
  c=[b.chartX-d.plotLeft,b.chartY-f]);c||(m(a,function(a){j=a.series.yAxis;k=a.series.xAxis;h+=a.plotX+(!e&&k?k.left-g:0);i+=(a.plotLow?(a.plotLow+a.plotHigh)/2:a.plotY)+(!e&&j?j.top-f:0)}),h/=a.length,i/=a.length,c=[e?d.plotWidth-i:h,this.shared&&!e&&a.length>1&&b?b.chartY-f:e?d.plotHeight-h:i]);return Ua(c,x)},getPosition:function(a,b,c){var d=this.chart,e=this.distance,f={},g=c.h,h,i=["y",d.chartHeight,b,c.plotY+d.plotTop],j=["x",d.chartWidth,a,c.plotX+d.plotLeft],k=p(c.ttBelow,d.inverted&&!c.negative||
  !d.inverted&&c.negative),l=function(a,b,c,d){var h=c<d-e,i=d+e+c<b,j=d-e-c;d+=e;if(k&&i)f[a]=d;else if(!k&&h)f[a]=j;else if(h)f[a]=j-g<0?j:j-g;else if(i)f[a]=d+g+c>b?d:d+g;else return!1},n=function(a,b,c,d){if(d<e||d>b-e)return!1;else f[a]=d<c/2?1:d>b-c/2?b-c-2:d-c/2},o=function(a){var b=i;i=j;j=b;h=a},q=function(){l.apply(0,i)!==!1?n.apply(0,j)===!1&&!h&&(o(!0),q()):h?f.x=f.y=0:(o(!0),q())};(d.inverted||this.len>1)&&o();q();return f},defaultFormatter:function(a){var b=this.points||ra(this),c;c=[a.tooltipFooterHeaderFormatter(b[0])];
  c=c.concat(a.bodyFormatter(b));c.push(a.tooltipFooterHeaderFormatter(b[0],!0));return c.join("")},refresh:function(a,b){var c=this.chart,d=this.label,e=this.options,f,g,h={},i,j=[];i=e.formatter||this.defaultFormatter;var h=c.hoverPoints,k,l=this.shared;clearTimeout(this.hideTimer);this.followPointer=ra(a)[0].series.tooltipOptions.followPointer;g=this.getAnchor(a,b);f=g[0];g=g[1];l&&(!a.series||!a.series.noSharedTooltip)?(c.hoverPoints=a,h&&m(h,function(a){a.setState()}),m(a,function(a){a.setState("hover");
  j.push(a.getLabelConfig())}),h={x:a[0].category,y:a[0].y},h.points=j,this.len=j.length,a=a[0]):h=a.getLabelConfig();i=i.call(h,this);h=a.series;this.distance=p(h.tooltipOptions.distance,16);i===!1?this.hide():(this.isHidden&&(db(d),d.attr("opacity",1).show()),d.attr({text:i}),k=e.borderColor||a.color||h.color||"#606060",d.attr({stroke:k}),this.updatePosition({plotX:f,plotY:g,negative:a.negative,ttBelow:a.ttBelow,h:a.shapeArgs&&a.shapeArgs.height||0}),this.isHidden=!1);M(c,"tooltipRefresh",{text:i,
  x:f+c.plotLeft,y:g+c.plotTop,borderColor:k})},updatePosition:function(a){var b=this.chart,c=this.label,c=(this.options.positioner||this.getPosition).call(this,c.width,c.height,a);this.move(x(c.x),x(c.y),a.plotX+b.plotLeft,a.plotY+b.plotTop)},getXDateFormat:function(a,b,c){var d,b=b.dateTimeLabelFormats,e=c&&c.closestPointRange,f,g={millisecond:15,second:12,minute:9,hour:6,day:3},h,i;if(e){h=Oa("%m-%d %H:%M:%S.%L",a.x);for(f in G){if(e===G.week&&+Oa("%w",a.x)===c.options.startOfWeek&&h.substr(6)===
  "00:00:00.000"){f="week";break}else if(G[f]>e){f=i;break}else if(g[f]&&h.substr(g[f])!=="01-01 00:00:00.000".substr(g[f]))break;f!=="week"&&(i=f)}f&&(d=b[f])}else d=b.day;return d||b.year},tooltipFooterHeaderFormatter:function(a,b){var c=b?"footer":"header",d=a.series,e=d.tooltipOptions,f=e.xDateFormat,g=d.xAxis,h=g&&g.options.type==="datetime"&&qa(a.key),c=e[c+"Format"];h&&!f&&(f=this.getXDateFormat(a,e,g));h&&f&&(c=c.replace("{point.key}","{point.key:"+f+"}"));return Ja(c,{point:a,series:d})},bodyFormatter:function(a){return Ua(a,
  function(a){var c=a.series.tooltipOptions;return(c.pointFormatter||a.point.tooltipFormatter).call(a.point,c.pointFormat)})}};var oa;ab=A.documentElement.ontouchstart!==u;var Va=w.Pointer=function(a,b){this.init(a,b)};Va.prototype={init:function(a,b){var c=b.chart,d=c.events,e=ea?"":c.zoomType,c=a.inverted,f;this.options=b;this.chart=a;this.zoomX=f=/x/.test(e);this.zoomY=e=/y/.test(e);this.zoomHor=f&&!c||e&&c;this.zoomVert=e&&!c||f&&c;this.hasZoom=f||e;this.runChartClick=d&&!!d.click;this.pinchDown=
  [];this.lastValidTouch={};if(w.Tooltip&&b.tooltip.enabled)a.tooltip=new Mb(a,b.tooltip),this.followTouchMove=p(b.tooltip.followTouchMove,!0);this.setDOMEvents()},normalize:function(a,b){var c,d,a=a||window.event,a=Sb(a);if(!a.target)a.target=a.srcElement;d=a.touches?a.touches.length?a.touches.item(0):a.changedTouches[0]:a;if(!b)this.chartPosition=b=Rb(this.chart.container);d.pageX===u?(c=t(a.x,a.clientX-b.left),d=a.y):(c=d.pageX-b.left,d=d.pageY-b.top);return r(a,{chartX:x(c),chartY:x(d)})},getCoordinates:function(a){var b=
  {xAxis:[],yAxis:[]};m(this.chart.axes,function(c){b[c.isXAxis?"xAxis":"yAxis"].push({axis:c,value:c.toValue(a[c.horiz?"chartX":"chartY"])})});return b},runPointActions:function(a){var b=this.chart,c=b.series,d=b.tooltip,e=d?d.shared:!1,f=b.hoverPoint,g=b.hoverSeries,h,i=b.chartWidth,j=b.chartWidth,k,l=[],n,o;if(!e&&!g)for(h=0;h<c.length;h++)if(c[h].directTouch||!c[h].options.stickyTracking)c=[];!e&&g&&g.directTouch&&f?n=f:(m(c,function(b){k=b.noSharedTooltip&&e;b.visible&&!k&&p(b.options.enableMouseTracking,
  !0)&&(o=b.searchPoint(a))&&l.push(o)}),m(l,function(a){if(a&&s(a.plotX)&&s(a.plotY)&&(a.dist.distX<i||(a.dist.distX===i||a.series.kdDimensions>1)&&a.dist.distR<j))i=a.dist.distX,j=a.dist.distR,n=a}));if(n&&(n!==f||d&&d.isHidden))if(e&&!n.series.noSharedTooltip){for(h=l.length;h--;)(l[h].clientX!==n.clientX||l[h].series.noSharedTooltip)&&l.splice(h,1);l.length&&d&&d.refresh(l,a);m(l,function(b){if(b!==n)b.onMouseOver(a)});(g&&g.directTouch&&f||n).onMouseOver(a)}else d&&d.refresh(n,a),n.onMouseOver(a);
  else c=g&&g.tooltipOptions.followPointer,d&&c&&!d.isHidden&&(c=d.getAnchor([{}],a),d.updatePosition({plotX:c[0],plotY:c[1]}));if(d&&!this._onDocumentMouseMove)this._onDocumentMouseMove=function(a){if(X[oa])X[oa].pointer.onDocumentMouseMove(a)},N(A,"mousemove",this._onDocumentMouseMove);m(b.axes,function(b){b.drawCrosshair(a,p(n,f))})},reset:function(a,b){var c=this.chart,d=c.hoverSeries,e=c.hoverPoint,f=c.tooltip,g=f&&f.shared?c.hoverPoints:e;(a=a&&f&&g)&&ra(g)[0].plotX===u&&(a=!1);if(a)f.refresh(g),
  e&&(e.setState(e.state,!0),m(c.axes,function(b){p(b.options.crosshair&&b.options.crosshair.snap,!0)?b.drawCrosshair(null,a):b.hideCrosshair()}));else{if(e)e.onMouseOut();if(d)d.onMouseOut();f&&f.hide(b);if(this._onDocumentMouseMove)Y(A,"mousemove",this._onDocumentMouseMove),this._onDocumentMouseMove=null;m(c.axes,function(a){a.hideCrosshair()});this.hoverX=null}},scaleGroups:function(a,b){var c=this.chart,d;m(c.series,function(e){d=a||e.getPlotBox();e.xAxis&&e.xAxis.zoomEnabled&&(e.group.attr(d),
  e.markerGroup&&(e.markerGroup.attr(d),e.markerGroup.clip(b?c.clipRect:null)),e.dataLabelsGroup&&e.dataLabelsGroup.attr(d))});c.clipRect.attr(b||c.clipBox)},dragStart:function(a){var b=this.chart;b.mouseIsDown=a.type;b.cancelClick=!1;b.mouseDownX=this.mouseDownX=a.chartX;b.mouseDownY=this.mouseDownY=a.chartY},drag:function(a){var b=this.chart,c=b.options.chart,d=a.chartX,e=a.chartY,f=this.zoomHor,g=this.zoomVert,h=b.plotLeft,i=b.plotTop,j=b.plotWidth,k=b.plotHeight,l,n=this.mouseDownX,o=this.mouseDownY,
  q=c.panKey&&a[c.panKey+"Key"];d<h?d=h:d>h+j&&(d=h+j);e<i?e=i:e>i+k&&(e=i+k);this.hasDragged=Math.sqrt(Math.pow(n-d,2)+Math.pow(o-e,2));if(this.hasDragged>10){l=b.isInsidePlot(n-h,o-i);if(b.hasCartesianSeries&&(this.zoomX||this.zoomY)&&l&&!q&&!this.selectionMarker)this.selectionMarker=b.renderer.rect(h,i,f?1:j,g?1:k,0).attr({fill:c.selectionMarkerFill||"rgba(69,114,167,0.25)",zIndex:7}).add();this.selectionMarker&&f&&(d-=n,this.selectionMarker.attr({width:O(d),x:(d>0?0:d)+n}));this.selectionMarker&&
  g&&(d=e-o,this.selectionMarker.attr({height:O(d),y:(d>0?0:d)+o}));l&&!this.selectionMarker&&c.panning&&b.pan(a,c.panning)}},drop:function(a){var b=this,c=this.chart,d=this.hasPinched;if(this.selectionMarker){var e={xAxis:[],yAxis:[],originalEvent:a.originalEvent||a},f=this.selectionMarker,g=f.attr?f.attr("x"):f.x,h=f.attr?f.attr("y"):f.y,i=f.attr?f.attr("width"):f.width,j=f.attr?f.attr("height"):f.height,k;if(this.hasDragged||d)m(c.axes,function(c){if(c.zoomEnabled&&s(c.min)&&(d||b[{xAxis:"zoomX",
  yAxis:"zoomY"}[c.coll]])){var f=c.horiz,o=a.type==="touchend"?c.minPixelPadding:0,q=c.toValue((f?g:h)+o),f=c.toValue((f?g+i:h+j)-o);e[c.coll].push({axis:c,min:I(q,f),max:t(q,f)});k=!0}}),k&&M(c,"selection",e,function(a){c.zoom(r(a,d?{animation:!1}:null))});this.selectionMarker=this.selectionMarker.destroy();d&&this.scaleGroups()}if(c)F(c.container,{cursor:c._cursor}),c.cancelClick=this.hasDragged>10,c.mouseIsDown=this.hasDragged=this.hasPinched=!1,this.pinchDown=[]},onContainerMouseDown:function(a){a=
  this.normalize(a);a.preventDefault&&a.preventDefault();this.dragStart(a)},onDocumentMouseUp:function(a){X[oa]&&X[oa].pointer.drop(a)},onDocumentMouseMove:function(a){var b=this.chart,c=this.chartPosition,a=this.normalize(a,c);c&&!this.inClass(a.target,"highcharts-tracker")&&!b.isInsidePlot(a.chartX-b.plotLeft,a.chartY-b.plotTop)&&this.reset()},onContainerMouseLeave:function(){var a=X[oa];if(a)a.pointer.reset(),a.pointer.chartPosition=null},onContainerMouseMove:function(a){var b=this.chart;oa=b.index;
  a=this.normalize(a);a.returnValue=!1;b.mouseIsDown==="mousedown"&&this.drag(a);(this.inClass(a.target,"highcharts-tracker")||b.isInsidePlot(a.chartX-b.plotLeft,a.chartY-b.plotTop))&&!b.openMenu&&this.runPointActions(a)},inClass:function(a,b){for(var c;a;){if(c=L(a,"class"))if(c.indexOf(b)!==-1)return!0;else if(c.indexOf("highcharts-container")!==-1)return!1;a=a.parentNode}},onTrackerMouseOut:function(a){var b=this.chart.hoverSeries,c=(a=a.relatedTarget||a.toElement)&&a.point&&a.point.series;if(b&&
  !b.options.stickyTracking&&!this.inClass(a,"highcharts-tooltip")&&c!==b)b.onMouseOut()},onContainerClick:function(a){var b=this.chart,c=b.hoverPoint,d=b.plotLeft,e=b.plotTop,a=this.normalize(a);a.originalEvent=a;a.cancelBubble=!0;b.cancelClick||(c&&this.inClass(a.target,"highcharts-tracker")?(M(c.series,"click",r(a,{point:c})),b.hoverPoint&&c.firePointEvent("click",a)):(r(a,this.getCoordinates(a)),b.isInsidePlot(a.chartX-d,a.chartY-e)&&M(b,"click",a)))},setDOMEvents:function(){var a=this,b=a.chart.container;
  b.onmousedown=function(b){a.onContainerMouseDown(b)};b.onmousemove=function(b){a.onContainerMouseMove(b)};b.onclick=function(b){a.onContainerClick(b)};N(b,"mouseleave",a.onContainerMouseLeave);bb===1&&N(A,"mouseup",a.onDocumentMouseUp);if(ab)b.ontouchstart=function(b){a.onContainerTouchStart(b)},b.ontouchmove=function(b){a.onContainerTouchMove(b)},bb===1&&N(A,"touchend",a.onDocumentTouchEnd)},destroy:function(){var a;Y(this.chart.container,"mouseleave",this.onContainerMouseLeave);bb||(Y(A,"mouseup",
  this.onDocumentMouseUp),Y(A,"touchend",this.onDocumentTouchEnd));clearInterval(this.tooltipTimeout);for(a in this)this[a]=null}};r(w.Pointer.prototype,{pinchTranslate:function(a,b,c,d,e,f){(this.zoomHor||this.pinchHor)&&this.pinchTranslateDirection(!0,a,b,c,d,e,f);(this.zoomVert||this.pinchVert)&&this.pinchTranslateDirection(!1,a,b,c,d,e,f)},pinchTranslateDirection:function(a,b,c,d,e,f,g,h){var i=this.chart,j=a?"x":"y",k=a?"X":"Y",l="chart"+k,n=a?"width":"height",o=i["plot"+(a?"Left":"Top")],q,p,
  m=h||1,C=i.inverted,v=i.bounds[a?"h":"v"],s=b.length===1,r=b[0][l],t=c[0][l],u=!s&&b[1][l],x=!s&&c[1][l],w,c=function(){!s&&O(r-u)>20&&(m=h||O(t-x)/O(r-u));p=(o-t)/m+r;q=i["plot"+(a?"Width":"Height")]/m};c();b=p;b<v.min?(b=v.min,w=!0):b+q>v.max&&(b=v.max-q,w=!0);w?(t-=0.8*(t-g[j][0]),s||(x-=0.8*(x-g[j][1])),c()):g[j]=[t,x];C||(f[j]=p-o,f[n]=q);f=C?1/m:m;e[n]=q;e[j]=b;d[C?a?"scaleY":"scaleX":"scale"+k]=m;d["translate"+k]=f*o+(t-f*r)},pinch:function(a){var b=this,c=b.chart,d=b.pinchDown,e=a.touches,
  f=e.length,g=b.lastValidTouch,h=b.hasZoom,i=b.selectionMarker,j={},k=f===1&&(b.inClass(a.target,"highcharts-tracker")&&c.runTrackerClick||b.runChartClick),l={};h&&!k&&a.preventDefault();Ua(e,function(a){return b.normalize(a)});if(a.type==="touchstart")m(e,function(a,b){d[b]={chartX:a.chartX,chartY:a.chartY}}),g.x=[d[0].chartX,d[1]&&d[1].chartX],g.y=[d[0].chartY,d[1]&&d[1].chartY],m(c.axes,function(a){if(a.zoomEnabled){var b=c.bounds[a.horiz?"h":"v"],d=a.minPixelPadding,e=a.toPixels(p(a.options.min,
  a.dataMin)),f=a.toPixels(p(a.options.max,a.dataMax)),g=I(e,f),e=t(e,f);b.min=I(a.pos,g-d);b.max=t(a.pos+a.len,e+d)}}),b.res=!0;else if(d.length){if(!i)b.selectionMarker=i=r({destroy:ma},c.plotBox);b.pinchTranslate(d,e,j,i,l,g);b.hasPinched=h;b.scaleGroups(j,l);if(!h&&b.followTouchMove&&f===1)this.runPointActions(b.normalize(a));else if(b.res)b.res=!1,this.reset(!1,0)}},onContainerTouchStart:function(a){var b=this.chart;oa=b.index;a.touches.length===1?(a=this.normalize(a),b.isInsidePlot(a.chartX-b.plotLeft,
  a.chartY-b.plotTop)&&!b.openMenu?(this.runPointActions(a),this.pinch(a)):this.reset()):a.touches.length===2&&this.pinch(a)},onContainerTouchMove:function(a){(a.touches.length===1||a.touches.length===2)&&this.pinch(a)},onDocumentTouchEnd:function(a){X[oa]&&X[oa].pointer.drop(a)}});if(H.PointerEvent||H.MSPointerEvent){var wa={},Ab=!!H.PointerEvent,Wb=function(){var a,b=[];b.item=function(a){return this[a]};for(a in wa)wa.hasOwnProperty(a)&&b.push({pageX:wa[a].pageX,pageY:wa[a].pageY,target:wa[a].target});
  return b},Bb=function(a,b,c,d){a=a.originalEvent||a;if((a.pointerType==="touch"||a.pointerType===a.MSPOINTER_TYPE_TOUCH)&&X[oa])d(a),d=X[oa].pointer,d[b]({type:c,target:a.currentTarget,preventDefault:ma,touches:Wb()})};r(Va.prototype,{onContainerPointerDown:function(a){Bb(a,"onContainerTouchStart","touchstart",function(a){wa[a.pointerId]={pageX:a.pageX,pageY:a.pageY,target:a.currentTarget}})},onContainerPointerMove:function(a){Bb(a,"onContainerTouchMove","touchmove",function(a){wa[a.pointerId]={pageX:a.pageX,
  pageY:a.pageY};if(!wa[a.pointerId].target)wa[a.pointerId].target=a.currentTarget})},onDocumentPointerUp:function(a){Bb(a,"onDocumentTouchEnd","touchend",function(a){delete wa[a.pointerId]})},batchMSEvents:function(a){a(this.chart.container,Ab?"pointerdown":"MSPointerDown",this.onContainerPointerDown);a(this.chart.container,Ab?"pointermove":"MSPointerMove",this.onContainerPointerMove);a(A,Ab?"pointerup":"MSPointerUp",this.onDocumentPointerUp)}});cb(Va.prototype,"init",function(a,b,c){a.call(this,b,
  c);this.hasZoom&&F(b.container,{"-ms-touch-action":R,"touch-action":R})});cb(Va.prototype,"setDOMEvents",function(a){a.apply(this);(this.hasZoom||this.followTouchMove)&&this.batchMSEvents(N)});cb(Va.prototype,"destroy",function(a){this.batchMSEvents(Y);a.call(this)})}var mb=w.Legend=function(a,b){this.init(a,b)};mb.prototype={init:function(a,b){var c=this,d=b.itemStyle,e=b.itemMarginTop||0;this.options=b;if(b.enabled)c.itemStyle=d,c.itemHiddenStyle=z(d,b.itemHiddenStyle),c.itemMarginTop=e,c.padding=
  d=p(b.padding,8),c.initialItemX=d,c.initialItemY=d-5,c.maxItemWidth=0,c.chart=a,c.itemHeight=0,c.symbolWidth=p(b.symbolWidth,16),c.pages=[],c.render(),N(c.chart,"endResize",function(){c.positionCheckboxes()})},colorizeItem:function(a,b){var c=this.options,d=a.legendItem,e=a.legendLine,f=a.legendSymbol,g=this.itemHiddenStyle.color,c=b?c.itemStyle.color:g,h=b?a.legendColor||a.color||"#CCC":g,g=a.options&&a.options.marker,i={fill:h},j;d&&d.css({fill:c,color:c});e&&e.attr({stroke:h});if(f){if(g&&f.isMarker)for(j in i.stroke=
  h,g=a.convertAttribs(g),g)d=g[j],d!==u&&(i[j]=d);f.attr(i)}},positionItem:function(a){var b=this.options,c=b.symbolPadding,b=!b.rtl,d=a._legendItemPos,e=d[0],d=d[1],f=a.checkbox;a.legendGroup&&a.legendGroup.translate(b?e:this.legendWidth-e-2*c-4,d);if(f)f.x=e,f.y=d},destroyItem:function(a){var b=a.checkbox;m(["legendItem","legendLine","legendSymbol","legendGroup"],function(b){a[b]&&(a[b]=a[b].destroy())});b&&Ra(a.checkbox)},clearItems:function(){var a=this;m(a.getAllItems(),function(b){a.destroyItem(b)})},
  destroy:function(){var a=this.group,b=this.box;if(b)this.box=b.destroy();if(a)this.group=a.destroy()},positionCheckboxes:function(a){var b=this.group.alignAttr,c,d=this.clipHeight||this.legendHeight;if(b)c=b.translateY,m(this.allItems,function(e){var f=e.checkbox,g;f&&(g=c+f.y+(a||0)+3,F(f,{left:b.translateX+e.checkboxOffset+f.x-20+"px",top:g+"px",display:g>c-6&&g<c+d-6?"":R}))})},renderTitle:function(){var a=this.padding,b=this.options.title,c=0;if(b.text){if(!this.title)this.title=this.chart.renderer.label(b.text,
  a-3,a-4,null,null,null,null,null,"legend-title").attr({zIndex:1}).css(b.style).add(this.group);a=this.title.getBBox();c=a.height;this.offsetWidth=a.width;this.contentGroup.attr({translateY:c})}this.titleHeight=c},renderItem:function(a){var b=this.chart,c=b.renderer,d=this.options,e=d.layout==="horizontal",f=this.symbolWidth,g=d.symbolPadding,h=this.itemStyle,i=this.itemHiddenStyle,j=this.padding,k=e?p(d.itemDistance,20):0,l=!d.rtl,n=d.width,o=d.itemMarginBottom||0,q=this.itemMarginTop,y=this.initialItemX,
  m=a.legendItem,s=a.series&&a.series.drawLegendSymbol?a.series:a,v=s.options,v=this.createCheckboxForItem&&v&&v.showCheckbox,r=d.useHTML;if(!m){a.legendGroup=c.g("legend-item").attr({zIndex:1}).add(this.scrollGroup);a.legendItem=m=c.text(d.labelFormat?Ja(d.labelFormat,a):d.labelFormatter.call(a),l?f+g:-g,this.baseline||0,r).css(z(a.visible?h:i)).attr({align:l?"left":"right",zIndex:2}).add(a.legendGroup);if(!this.baseline)this.fontMetrics=c.fontMetrics(h.fontSize,m),this.baseline=this.fontMetrics.f+
  3+q,m.attr("y",this.baseline);s.drawLegendSymbol(this,a);this.setItemEvents&&this.setItemEvents(a,m,r,h,i);this.colorizeItem(a,a.visible);v&&this.createCheckboxForItem(a)}c=m.getBBox();f=a.checkboxOffset=d.itemWidth||a.legendItemWidth||f+g+c.width+k+(v?20:0);this.itemHeight=g=x(a.legendItemHeight||c.height);if(e&&this.itemX-y+f>(n||b.chartWidth-2*j-y-d.x))this.itemX=y,this.itemY+=q+this.lastLineHeight+o,this.lastLineHeight=0;this.maxItemWidth=t(this.maxItemWidth,f);this.lastItemY=q+this.itemY+o;this.lastLineHeight=
  t(g,this.lastLineHeight);a._legendItemPos=[this.itemX,this.itemY];e?this.itemX+=f:(this.itemY+=q+g+o,this.lastLineHeight=g);this.offsetWidth=n||t((e?this.itemX-y-k:f)+j,this.offsetWidth)},getAllItems:function(){var a=[];m(this.chart.series,function(b){var c=b.options;if(p(c.showInLegend,!s(c.linkedTo)?u:!1,!0))a=a.concat(b.legendItems||(c.legendType==="point"?b.data:b))});return a},adjustMargins:function(a,b){var c=this.chart,d=this.options,e=d.align[0]+d.verticalAlign[0]+d.layout[0];this.display&&
  !d.floating&&m([/(lth|ct|rth)/,/(rtv|rm|rbv)/,/(rbh|cb|lbh)/,/(lbv|lm|ltv)/],function(f,g){f.test(e)&&!s(a[g])&&(c[ib[g]]=t(c[ib[g]],c.legend[(g+1)%2?"legendHeight":"legendWidth"]+[1,-1,-1,1][g]*d[g%2?"x":"y"]+p(d.margin,12)+b[g]))})},render:function(){var a=this,b=a.chart,c=b.renderer,d=a.group,e,f,g,h,i=a.box,j=a.options,k=a.padding,l=j.borderWidth,n=j.backgroundColor;a.itemX=a.initialItemX;a.itemY=a.initialItemY;a.offsetWidth=0;a.lastItemY=0;if(!d)a.group=d=c.g("legend").attr({zIndex:7}).add(),
  a.contentGroup=c.g().attr({zIndex:1}).add(d),a.scrollGroup=c.g().add(a.contentGroup);a.renderTitle();e=a.getAllItems();qb(e,function(a,b){return(a.options&&a.options.legendIndex||0)-(b.options&&b.options.legendIndex||0)});j.reversed&&e.reverse();a.allItems=e;a.display=f=!!e.length;a.lastLineHeight=0;m(e,function(b){a.renderItem(b)});g=(j.width||a.offsetWidth)+k;h=a.lastItemY+a.lastLineHeight+a.titleHeight;h=a.handleOverflow(h);h+=k;if(l||n){if(i){if(g>0&&h>0)i[i.isNew?"attr":"animate"](i.crisp({width:g,
  height:h})),i.isNew=!1}else a.box=i=c.rect(0,0,g,h,j.borderRadius,l||0).attr({stroke:j.borderColor,"stroke-width":l||0,fill:n||R}).add(d).shadow(j.shadow),i.isNew=!0;i[f?"show":"hide"]()}a.legendWidth=g;a.legendHeight=h;m(e,function(b){a.positionItem(b)});f&&d.align(r({width:g,height:h},j),!0,"spacingBox");b.isResizing||this.positionCheckboxes()},handleOverflow:function(a){var b=this,c=this.chart,d=c.renderer,e=this.options,f=e.y,f=c.spacingBox.height+(e.verticalAlign==="top"?-f:f)-this.padding,g=
  e.maxHeight,h,i=this.clipRect,j=e.navigation,k=p(j.animation,!0),l=j.arrowSize||12,n=this.nav,o=this.pages,q,y=this.allItems;e.layout==="horizontal"&&(f/=2);g&&(f=I(f,g));o.length=0;if(a>f&&!e.useHTML){this.clipHeight=h=t(f-20-this.titleHeight-this.padding,0);this.currentPage=p(this.currentPage,1);this.fullHeight=a;m(y,function(a,b){var c=a._legendItemPos[1],d=x(a.legendItem.getBBox().height),e=o.length;if(!e||c-o[e-1]>h&&(q||c)!==o[e-1])o.push(q||c),e++;b===y.length-1&&c+d-o[e-1]>h&&o.push(c);c!==
  q&&(q=c)});if(!i)i=b.clipRect=d.clipRect(0,this.padding,9999,0),b.contentGroup.clip(i);i.attr({height:h});if(!n)this.nav=n=d.g().attr({zIndex:1}).add(this.group),this.up=d.symbol("triangle",0,0,l,l).on("click",function(){b.scroll(-1,k)}).add(n),this.pager=d.text("",15,10).css(j.style).add(n),this.down=d.symbol("triangle-down",0,0,l,l).on("click",function(){b.scroll(1,k)}).add(n);b.scroll(0);a=f}else if(n)i.attr({height:c.chartHeight}),n.hide(),this.scrollGroup.attr({translateY:1}),this.clipHeight=
  0;return a},scroll:function(a,b){var c=this.pages,d=c.length,e=this.currentPage+a,f=this.clipHeight,g=this.options.navigation,h=g.activeColor,g=g.inactiveColor,i=this.pager,j=this.padding;e>d&&(e=d);if(e>0)b!==u&&Sa(b,this.chart),this.nav.attr({translateX:j,translateY:f+this.padding+7+this.titleHeight,visibility:"visible"}),this.up.attr({fill:e===1?g:h}).css({cursor:e===1?"default":"pointer"}),i.attr({text:e+"/"+d}),this.down.attr({x:18+this.pager.getBBox().width,fill:e===d?g:h}).css({cursor:e===
  d?"default":"pointer"}),c=-c[e-1]+this.initialItemY,this.scrollGroup.animate({translateY:c}),this.currentPage=e,this.positionCheckboxes(c)}};Na=w.LegendSymbolMixin={drawRectangle:function(a,b){var c=a.options.symbolHeight||a.fontMetrics.f;b.legendSymbol=this.chart.renderer.rect(0,a.baseline-c+1,a.symbolWidth,c,a.options.symbolRadius||0).attr({zIndex:3}).add(b.legendGroup)},drawLineMarker:function(a){var b=this.options,c=b.marker,d;d=a.symbolWidth;var e=this.chart.renderer,f=this.legendGroup,a=a.baseline-
  x(a.fontMetrics.b*0.3),g;if(b.lineWidth){g={"stroke-width":b.lineWidth};if(b.dashStyle)g.dashstyle=b.dashStyle;this.legendLine=e.path(["M",0,a,"L",d,a]).attr(g).add(f)}if(c&&c.enabled!==!1)b=c.radius,this.legendSymbol=d=e.symbol(this.symbol,d/2-b,a-b,2*b,2*b).add(f),d.isMarker=!0}};(/Trident\/7\.0/.test(Ba)||La)&&cb(mb.prototype,"positionItem",function(a,b){var c=this,d=function(){b._legendItemPos&&a.call(c,b)};d();setTimeout(d)});D=w.Chart=function(){this.init.apply(this,arguments)};D.prototype=
  {callbacks:[],init:function(a,b){var c,d=a.series;a.series=null;c=z(P,a);c.series=a.series=d;this.userOptions=a;d=c.chart;this.margin=this.splashArray("margin",d);this.spacing=this.splashArray("spacing",d);var e=d.events;this.bounds={h:{},v:{}};this.callback=b;this.isResizing=0;this.options=c;this.axes=[];this.series=[];this.hasCartesianSeries=d.showAxes;var f=this,g;f.index=X.length;X.push(f);bb++;d.reflow!==!1&&N(f,"load",function(){f.initReflow()});if(e)for(g in e)N(f,g,e[g]);f.xAxis=[];f.yAxis=
  [];f.animation=ea?!1:p(d.animation,!0);f.pointCount=f.colorCounter=f.symbolCounter=0;f.firstRender()},initSeries:function(a){var b=this.options.chart;(b=J[a.type||b.type||b.defaultSeriesType])||ka(17,!0);b=new b;b.init(this,a);return b},isInsidePlot:function(a,b,c){var d=c?b:a,a=c?a:b;return d>=0&&d<=this.plotWidth&&a>=0&&a<=this.plotHeight},redraw:function(a){var b=this.axes,c=this.series,d=this.pointer,e=this.legend,f=this.isDirtyLegend,g,h,i=this.hasCartesianSeries,j=this.isDirtyBox,k=c.length,
  l=k,n=this.renderer,o=n.isHidden(),q=[];Sa(a,this);o&&this.cloneRenderTo();for(this.layOutTitles();l--;)if(a=c[l],a.options.stacking&&(g=!0,a.isDirty)){h=!0;break}if(h)for(l=k;l--;)if(a=c[l],a.options.stacking)a.isDirty=!0;m(c,function(a){a.isDirty&&a.options.legendType==="point"&&(f=!0)});if(f&&e.options.enabled)e.render(),this.isDirtyLegend=!1;g&&this.getStacks();if(i&&!this.isResizing)this.maxTicks=null,m(b,function(a){a.setScale()});this.getMargins();i&&(m(b,function(a){a.isDirty&&(j=!0)}),m(b,
  function(a){if(a.isDirtyExtremes)a.isDirtyExtremes=!1,q.push(function(){M(a,"afterSetExtremes",r(a.eventArgs,a.getExtremes()));delete a.eventArgs});(j||g)&&a.redraw()}));j&&this.drawChartBox();m(c,function(a){a.isDirty&&a.visible&&(!a.isCartesian||a.xAxis)&&a.redraw()});d&&d.reset(!0);n.draw();M(this,"redraw");o&&this.cloneRenderTo(!0);m(q,function(a){a.call()})},get:function(a){var b=this.axes,c=this.series,d,e;for(d=0;d<b.length;d++)if(b[d].options.id===a)return b[d];for(d=0;d<c.length;d++)if(c[d].options.id===
  a)return c[d];for(d=0;d<c.length;d++){e=c[d].points||[];for(b=0;b<e.length;b++)if(e[b].id===a)return e[b]}return null},getAxes:function(){var a=this,b=this.options,c=b.xAxis=ra(b.xAxis||{}),b=b.yAxis=ra(b.yAxis||{});m(c,function(a,b){a.index=b;a.isX=!0});m(b,function(a,b){a.index=b});c=c.concat(b);m(c,function(b){new va(a,b)})},getSelectedPoints:function(){var a=[];m(this.series,function(b){a=a.concat(kb(b.points||[],function(a){return a.selected}))});return a},getSelectedSeries:function(){return kb(this.series,
  function(a){return a.selected})},getStacks:function(){var a=this;m(a.yAxis,function(a){if(a.stacks&&a.hasVisibleSeries)a.oldStacks=a.stacks});m(a.series,function(b){if(b.options.stacking&&(b.visible===!0||a.options.chart.ignoreHiddenSeries===!1))b.stackKey=b.type+p(b.options.stack,"")})},setTitle:function(a,b,c){var g;var d=this,e=d.options,f;f=e.title=z(e.title,a);g=e.subtitle=z(e.subtitle,b),e=g;m([["title",a,f],["subtitle",b,e]],function(a){var b=a[0],c=d[b],e=a[1],a=a[2];c&&e&&(d[b]=c=c.destroy());
  a&&a.text&&!c&&(d[b]=d.renderer.text(a.text,0,0,a.useHTML).attr({align:a.align,"class":"highcharts-"+b,zIndex:a.zIndex||4}).css(a.style).add())});d.layOutTitles(c)},layOutTitles:function(a){var b=0,c=this.title,d=this.subtitle,e=this.options,f=e.title,e=e.subtitle,g=this.renderer,h=this.spacingBox.width-44;if(c&&(c.css({width:(f.width||h)+"px"}).align(r({y:g.fontMetrics(f.style.fontSize,c).b-3},f),!1,"spacingBox"),!f.floating&&!f.verticalAlign))b=c.getBBox().height;d&&(d.css({width:(e.width||h)+"px"}).align(r({y:b+
  (f.margin-13)+g.fontMetrics(f.style.fontSize,d).b},e),!1,"spacingBox"),!e.floating&&!e.verticalAlign&&(b=sa(b+d.getBBox().height)));c=this.titleOffset!==b;this.titleOffset=b;if(!this.isDirtyBox&&c)this.isDirtyBox=c,this.hasRendered&&p(a,!0)&&this.isDirtyBox&&this.redraw()},getChartSize:function(){var a=this.options.chart,b=a.width,a=a.height,c=this.renderToClone||this.renderTo;if(!s(b))this.containerWidth=jb(c,"width");if(!s(a))this.containerHeight=jb(c,"height");this.chartWidth=t(0,b||this.containerWidth||
  600);this.chartHeight=t(0,p(a,this.containerHeight>19?this.containerHeight:400))},cloneRenderTo:function(a){var b=this.renderToClone,c=this.container;a?b&&(this.renderTo.appendChild(c),Ra(b),delete this.renderToClone):(c&&c.parentNode===this.renderTo&&this.renderTo.removeChild(c),this.renderToClone=b=this.renderTo.cloneNode(0),F(b,{position:"absolute",top:"-9999px",display:"block"}),b.style.setProperty&&b.style.setProperty("display","block","important"),A.body.appendChild(b),c&&b.appendChild(c))},
  getContainer:function(){var a,b=this.options.chart,c,d,e;this.renderTo=a=b.renderTo;e="highcharts-"+yb++;if(Da(a))this.renderTo=a=A.getElementById(a);a||ka(13,!0);c=B(L(a,"data-highcharts-chart"));!isNaN(c)&&X[c]&&X[c].hasRendered&&X[c].destroy();L(a,"data-highcharts-chart",this.index);a.innerHTML="";!b.skipClone&&!a.offsetWidth&&this.cloneRenderTo();this.getChartSize();c=this.chartWidth;d=this.chartHeight;this.container=a=Z(Ka,{className:"highcharts-container"+(b.className?" "+b.className:""),id:e},
  r({position:"relative",overflow:"hidden",width:c+"px",height:d+"px",textAlign:"left",lineHeight:"normal",zIndex:0,"-webkit-tap-highlight-color":"rgba(0,0,0,0)"},b.style),this.renderToClone||a);this._cursor=a.style.cursor;this.renderer=b.forExport?new ta(a,c,d,b.style,!0):new $a(a,c,d,b.style);ea&&this.renderer.create(this,a,c,d);this.renderer.chartIndex=this.index},getMargins:function(a){var b=this.spacing,c=this.margin,d=this.titleOffset;this.resetMargins();if(d&&!s(c[0]))this.plotTop=t(this.plotTop,
  d+this.options.title.margin+b[0]);this.legend.adjustMargins(c,b);this.extraBottomMargin&&(this.marginBottom+=this.extraBottomMargin);this.extraTopMargin&&(this.plotTop+=this.extraTopMargin);a||this.getAxisMargins()},getAxisMargins:function(){var a=this,b=a.axisOffset=[0,0,0,0],c=a.margin;a.hasCartesianSeries&&m(a.axes,function(a){a.getOffset()});m(ib,function(d,e){s(c[e])||(a[d]+=b[e])});a.setChartSize()},reflow:function(a){var b=this,c=b.options.chart,d=b.renderTo,e=c.width||jb(d,"width"),f=c.height||
  jb(d,"height"),c=a?a.target:H,d=function(){if(b.container)b.setSize(e,f,!1),b.hasUserSize=null};if(!b.hasUserSize&&!b.isPrinting&&e&&f&&(c===H||c===A)){if(e!==b.containerWidth||f!==b.containerHeight)clearTimeout(b.reflowTimeout),a?b.reflowTimeout=setTimeout(d,100):d();b.containerWidth=e;b.containerHeight=f}},initReflow:function(){var a=this,b=function(b){a.reflow(b)};N(H,"resize",b);N(a,"destroy",function(){Y(H,"resize",b)})},setSize:function(a,b,c){var d=this,e,f,g;d.isResizing+=1;g=function(){d&&
  M(d,"endResize",null,function(){d.isResizing-=1})};Sa(c,d);d.oldChartHeight=d.chartHeight;d.oldChartWidth=d.chartWidth;if(s(a))d.chartWidth=e=t(0,x(a)),d.hasUserSize=!!e;if(s(b))d.chartHeight=f=t(0,x(b));(za?lb:F)(d.container,{width:e+"px",height:f+"px"},za);d.setChartSize(!0);d.renderer.setSize(e,f,c);d.maxTicks=null;m(d.axes,function(a){a.isDirty=!0;a.setScale()});m(d.series,function(a){a.isDirty=!0});d.isDirtyLegend=!0;d.isDirtyBox=!0;d.layOutTitles();d.getMargins();d.redraw(c);d.oldChartHeight=
  null;M(d,"resize");za===!1?g():setTimeout(g,za&&za.duration||500)},setChartSize:function(a){var b=this.inverted,c=this.renderer,d=this.chartWidth,e=this.chartHeight,f=this.options.chart,g=this.spacing,h=this.clipOffset,i,j,k,l;this.plotLeft=i=x(this.plotLeft);this.plotTop=j=x(this.plotTop);this.plotWidth=k=t(0,x(d-i-this.marginRight));this.plotHeight=l=t(0,x(e-j-this.marginBottom));this.plotSizeX=b?l:k;this.plotSizeY=b?k:l;this.plotBorderWidth=f.plotBorderWidth||0;this.spacingBox=c.spacingBox={x:g[3],
  y:g[0],width:d-g[3]-g[1],height:e-g[0]-g[2]};this.plotBox=c.plotBox={x:i,y:j,width:k,height:l};d=2*U(this.plotBorderWidth/2);b=sa(t(d,h[3])/2);c=sa(t(d,h[0])/2);this.clipBox={x:b,y:c,width:U(this.plotSizeX-t(d,h[1])/2-b),height:t(0,U(this.plotSizeY-t(d,h[2])/2-c))};a||m(this.axes,function(a){a.setAxisSize();a.setAxisTranslation()})},resetMargins:function(){var a=this;m(ib,function(b,c){a[b]=p(a.margin[c],a.spacing[c])});a.axisOffset=[0,0,0,0];a.clipOffset=[0,0,0,0]},drawChartBox:function(){var a=
  this.options.chart,b=this.renderer,c=this.chartWidth,d=this.chartHeight,e=this.chartBackground,f=this.plotBackground,g=this.plotBorder,h=this.plotBGImage,i=a.borderWidth||0,j=a.backgroundColor,k=a.plotBackgroundColor,l=a.plotBackgroundImage,n=a.plotBorderWidth||0,o,q=this.plotLeft,p=this.plotTop,m=this.plotWidth,s=this.plotHeight,v=this.plotBox,r=this.clipRect,t=this.clipBox;o=i+(a.shadow?8:0);if(i||j)if(e)e.animate(e.crisp({width:c-o,height:d-o}));else{e={fill:j||R};if(i)e.stroke=a.borderColor,e["stroke-width"]=
  i;this.chartBackground=b.rect(o/2,o/2,c-o,d-o,a.borderRadius,i).attr(e).addClass("highcharts-background").add().shadow(a.shadow)}if(k)f?f.animate(v):this.plotBackground=b.rect(q,p,m,s,0).attr({fill:k}).add().shadow(a.plotShadow);if(l)h?h.animate(v):this.plotBGImage=b.image(l,q,p,m,s).add();r?r.animate({width:t.width,height:t.height}):this.clipRect=b.clipRect(t);if(n)g?g.animate(g.crisp({x:q,y:p,width:m,height:s,strokeWidth:-n})):this.plotBorder=b.rect(q,p,m,s,0,-n).attr({stroke:a.plotBorderColor,
  "stroke-width":n,fill:R,zIndex:1}).add();this.isDirtyBox=!1},propFromSeries:function(){var a=this,b=a.options.chart,c,d=a.options.series,e,f;m(["inverted","angular","polar"],function(g){c=J[b.type||b.defaultSeriesType];f=a[g]||b[g]||c&&c.prototype[g];for(e=d&&d.length;!f&&e--;)(c=J[d[e].type])&&c.prototype[g]&&(f=!0);a[g]=f})},linkSeries:function(){var a=this,b=a.series;m(b,function(a){a.linkedSeries.length=0});m(b,function(b){var d=b.options.linkedTo;if(Da(d)&&(d=d===":previous"?a.series[b.index-
  1]:a.get(d)))d.linkedSeries.push(b),b.linkedParent=d})},renderSeries:function(){m(this.series,function(a){a.translate();a.render()})},renderLabels:function(){var a=this,b=a.options.labels;b.items&&m(b.items,function(c){var d=r(b.style,c.style),e=B(d.left)+a.plotLeft,f=B(d.top)+a.plotTop+12;delete d.left;delete d.top;a.renderer.text(c.html,e,f).attr({zIndex:2}).css(d).add()})},render:function(){var a=this.axes,b=this.renderer,c=this.options,d,e,f,g;this.setTitle();this.legend=new mb(this,c.legend);
  this.getStacks();this.getMargins(!0);this.setChartSize();d=this.plotWidth;e=this.plotHeight-=13;m(a,function(a){a.setScale()});this.getAxisMargins();f=d/this.plotWidth>1.1;g=e/this.plotHeight>1.1;if(f||g)this.maxTicks=null,m(a,function(a){(a.horiz&&f||!a.horiz&&g)&&a.setTickInterval(!0)}),this.getMargins();this.drawChartBox();this.hasCartesianSeries&&m(a,function(a){a.render()});if(!this.seriesGroup)this.seriesGroup=b.g("series-group").attr({zIndex:3}).add();this.renderSeries();this.renderLabels();
  this.showCredits(c.credits);this.hasRendered=!0},showCredits:function(a){if(a.enabled&&!this.credits)this.credits=this.renderer.text(a.text,0,0).on("click",function(){if(a.href)location.href=a.href}).attr({align:a.position.align,zIndex:8}).css(a.style).add().align(a.position)},destroy:function(){var a=this,b=a.axes,c=a.series,d=a.container,e,f=d&&d.parentNode;M(a,"destroy");X[a.index]=u;bb--;a.renderTo.removeAttribute("data-highcharts-chart");Y(a);for(e=b.length;e--;)b[e]=b[e].destroy();for(e=c.length;e--;)c[e]=
  c[e].destroy();m("title,subtitle,chartBackground,plotBackground,plotBGImage,plotBorder,seriesGroup,clipRect,credits,pointer,scroller,rangeSelector,legend,resetZoomButton,tooltip,renderer".split(","),function(b){var c=a[b];c&&c.destroy&&(a[b]=c.destroy())});if(d)d.innerHTML="",Y(d),f&&Ra(d);for(e in a)delete a[e]},isReadyToRender:function(){var a=this;return!ba&&H==H.top&&A.readyState!=="complete"||ea&&!H.canvg?(ea?Lb.push(function(){a.firstRender()},a.options.global.canvasToolsURL):A.attachEvent("onreadystatechange",
  function(){A.detachEvent("onreadystatechange",a.firstRender);A.readyState==="complete"&&a.firstRender()}),!1):!0},firstRender:function(){var a=this,b=a.options,c=a.callback;if(a.isReadyToRender()){a.getContainer();M(a,"init");a.resetMargins();a.setChartSize();a.propFromSeries();a.getAxes();m(b.series||[],function(b){a.initSeries(b)});a.linkSeries();M(a,"beforeRender");if(w.Pointer)a.pointer=new Va(a,b);a.render();a.renderer.draw();c&&c.apply(a,[a]);m(a.callbacks,function(b){a.index!==u&&b.apply(a,
  [a])});M(a,"load");a.cloneRenderTo(!0)}},splashArray:function(a,b){var c=b[a],c=ca(c)?c:[c,c,c,c];return[p(b[a+"Top"],c[0]),p(b[a+"Right"],c[1]),p(b[a+"Bottom"],c[2]),p(b[a+"Left"],c[3])]}};var Xb=w.CenteredSeriesMixin={getCenter:function(){var a=this.options,b=this.chart,c=2*(a.slicedOffset||0),d=b.plotWidth-2*c,b=b.plotHeight-2*c,e=a.center,e=[p(e[0],"50%"),p(e[1],"50%"),a.size||"100%",a.innerSize||0],f=I(d,b),g,h,i;for(h=0;h<4;++h)i=e[h],g=/%$/.test(i),a=h<2||h===2&&g,e[h]=(g?[d,b,f,e[2]][h]*B(i)/
  100:B(i))+(a?c:0);return e}},Ga=function(){};Ga.prototype={init:function(a,b,c){this.series=a;this.color=a.color;this.applyOptions(b,c);this.pointAttr={};if(a.options.colorByPoint&&(b=a.options.colors||a.chart.options.colors,this.color=this.color||b[a.colorCounter++],a.colorCounter===b.length))a.colorCounter=0;a.chart.pointCount++;return this},applyOptions:function(a,b){var c=this.series,d=c.options.pointValKey||c.pointValKey,a=Ga.prototype.optionsToObject.call(this,a);r(this,a);this.options=this.options?
  r(this.options,a):a;if(d)this.y=this[d];if(this.x===u&&c)this.x=b===u?c.autoIncrement():b;return this},optionsToObject:function(a){var b={},c=this.series,d=c.options.keys,e=d||c.pointArrayMap||["y"],f=e.length,g=0,h=0;if(typeof a==="number"||a===null)b[e[0]]=a;else if(Ha(a)){if(!d&&a.length>f){c=typeof a[0];if(c==="string")b.name=a[0];else if(c==="number")b.x=a[0];g++}for(;h<f;)b[e[h++]]=a[g++]}else if(typeof a==="object"){b=a;if(a.dataLabels)c._hasPointLabels=!0;if(a.marker)c._hasPointMarkers=!0}return b},
  destroy:function(){var a=this.series.chart,b=a.hoverPoints,c;a.pointCount--;if(b&&(this.setState(),ia(b,this),!b.length))a.hoverPoints=null;if(this===a.hoverPoint)this.onMouseOut();if(this.graphic||this.dataLabel)Y(this),this.destroyElements();this.legendItem&&a.legend.destroyItem(this);for(c in this)this[c]=null},destroyElements:function(){for(var a="graphic,dataLabel,dataLabelUpper,group,connector,shadowGroup".split(","),b,c=6;c--;)b=a[c],this[b]&&(this[b]=this[b].destroy())},getLabelConfig:function(){return{x:this.category,
  y:this.y,key:this.name||this.category,series:this.series,point:this,percentage:this.percentage,total:this.total||this.stackTotal}},tooltipFormatter:function(a){var b=this.series,c=b.tooltipOptions,d=p(c.valueDecimals,""),e=c.valuePrefix||"",f=c.valueSuffix||"";m(b.pointArrayMap||["y"],function(b){b="{point."+b;if(e||f)a=a.replace(b+"}",e+b+"}"+f);a=a.replace(b+"}",b+":,."+d+"f}")});return Ja(a,{point:this,series:this.series})},firePointEvent:function(a,b,c){var d=this,e=this.series.options;(e.point.events[a]||
  d.options&&d.options.events&&d.options.events[a])&&this.importEvents();a==="click"&&e.allowPointSelect&&(c=function(a){d.select(null,a.ctrlKey||a.metaKey||a.shiftKey)});M(this,a,b,c)}};var Q=w.Series=function(){};Q.prototype={isCartesian:!0,type:"line",pointClass:Ga,sorted:!0,requireSorting:!0,pointAttrToOptions:{stroke:"lineColor","stroke-width":"lineWidth",fill:"fillColor",r:"radius"},axisTypes:["xAxis","yAxis"],colorCounter:0,parallelArrays:["x","y"],init:function(a,b){var c=this,d,e,f=a.series,
  g=function(a,b){return p(a.options.index,a._i)-p(b.options.index,b._i)};c.chart=a;c.options=b=c.setOptions(b);c.linkedSeries=[];c.bindAxes();r(c,{name:b.name,state:"",pointAttr:{},visible:b.visible!==!1,selected:b.selected===!0});if(ea)b.animation=!1;e=b.events;for(d in e)N(c,d,e[d]);if(e&&e.click||b.point&&b.point.events&&b.point.events.click||b.allowPointSelect)a.runTrackerClick=!0;c.getColor();c.getSymbol();m(c.parallelArrays,function(a){c[a+"Data"]=[]});c.setData(b.data,!1);if(c.isCartesian)a.hasCartesianSeries=
  !0;f.push(c);c._i=f.length-1;qb(f,g);this.yAxis&&qb(this.yAxis.series,g);m(f,function(a,b){a.index=b;a.name=a.name||"Series "+(b+1)})},bindAxes:function(){var a=this,b=a.options,c=a.chart,d;m(a.axisTypes||[],function(e){m(c[e],function(c){d=c.options;if(b[e]===d.index||b[e]!==u&&b[e]===d.id||b[e]===u&&d.index===0)c.series.push(a),a[e]=c,c.isDirty=!0});!a[e]&&a.optionalAxis!==e&&ka(18,!0)})},updateParallelArrays:function(a,b){var c=a.series,d=arguments;m(c.parallelArrays,typeof b==="number"?function(d){var f=
  d==="y"&&c.toYData?c.toYData(a):a[d];c[d+"Data"][b]=f}:function(a){Array.prototype[b].apply(c[a+"Data"],Array.prototype.slice.call(d,2))})},autoIncrement:function(){var a=this.options,b=this.xIncrement,c,d=a.pointIntervalUnit,b=p(b,a.pointStart,0);this.pointInterval=c=p(this.pointInterval,a.pointInterval,1);if(d==="month"||d==="year")a=new Aa(b),a=d==="month"?+a[vb](a[Ya]()+c):+a[wb](a[Za]()+c),c=a-b;this.xIncrement=b+c;return b},getSegments:function(){var a=-1,b=[],c,d=this.points,e=d.length;if(e)if(this.options.connectNulls){for(c=
  e;c--;)d[c].y===null&&d.splice(c,1);d.length&&(b=[d])}else m(d,function(c,g){c.y===null?(g>a+1&&b.push(d.slice(a+1,g)),a=g):g===e-1&&b.push(d.slice(a+1,g+1))});this.segments=b},setOptions:function(a){var b=this.chart,c=b.options.plotOptions,b=b.userOptions||{},d=b.plotOptions||{},e=c[this.type];this.userOptions=a;c=z(e,c.series,a);this.tooltipOptions=z(P.tooltip,P.plotOptions[this.type].tooltip,b.tooltip,d.series&&d.series.tooltip,d[this.type]&&d[this.type].tooltip,a.tooltip);e.marker===null&&delete c.marker;
  this.zoneAxis=c.zoneAxis;a=this.zones=(c.zones||[]).slice();if((c.negativeColor||c.negativeFillColor)&&!c.zones)a.push({value:c[this.zoneAxis+"Threshold"]||c.threshold||0,color:c.negativeColor,fillColor:c.negativeFillColor});a.length&&s(a[a.length-1].value)&&a.push({color:this.color,fillColor:this.fillColor});return c},getCyclic:function(a,b,c){var d=this.userOptions,e="_"+a+"Index",f=a+"Counter";b||(s(d[e])?b=d[e]:(d[e]=b=this.chart[f]%c.length,this.chart[f]+=1),b=c[b]);this[a]=b},getColor:function(){this.options.colorByPoint||
  this.getCyclic("color",this.options.color||aa[this.type].color,this.chart.options.colors)},getSymbol:function(){var a=this.options.marker;this.getCyclic("symbol",a.symbol,this.chart.options.symbols);if(/^url/.test(this.symbol))a.radius=0},drawLegendSymbol:Na.drawLineMarker,setData:function(a,b,c,d){var e=this,f=e.points,g=f&&f.length||0,h,i=e.options,j=e.chart,k=null,l=e.xAxis,n=l&&!!l.categories,o=i.turboThreshold,q=this.xData,y=this.yData,s=(h=e.pointArrayMap)&&h.length,a=a||[];h=a.length;b=p(b,
  !0);if(d!==!1&&h&&g===h&&!e.cropped&&!e.hasGroupedData&&e.visible)m(a,function(a,b){f[b].update(a,!1,null,!1)});else{e.xIncrement=null;e.pointRange=n?1:i.pointRange;e.colorCounter=0;m(this.parallelArrays,function(a){e[a+"Data"].length=0});if(o&&h>o){for(c=0;k===null&&c<h;)k=a[c],c++;if(qa(k)){n=p(i.pointStart,0);i=p(i.pointInterval,1);for(c=0;c<h;c++)q[c]=n,y[c]=a[c],n+=i;e.xIncrement=n}else if(Ha(k))if(s)for(c=0;c<h;c++)i=a[c],q[c]=i[0],y[c]=i.slice(1,s+1);else for(c=0;c<h;c++)i=a[c],q[c]=i[0],y[c]=
  i[1];else ka(12)}else for(c=0;c<h;c++)if(a[c]!==u&&(i={series:e},e.pointClass.prototype.applyOptions.apply(i,[a[c]]),e.updateParallelArrays(i,c),n&&i.name))l.names[i.x]=i.name;Da(y[0])&&ka(14,!0);e.data=[];e.options.data=a;for(c=g;c--;)f[c]&&f[c].destroy&&f[c].destroy();if(l)l.minRange=l.userMinRange;e.isDirty=e.isDirtyData=j.isDirtyBox=!0;c=!1}b&&j.redraw(c)},processData:function(a){var b=this.xData,c=this.yData,d=b.length,e;e=0;var f,g,h=this.xAxis,i,j=this.options;i=j.cropThreshold;var k=this.isCartesian,
  l,n;if(k&&!this.isDirty&&!h.isDirty&&!this.yAxis.isDirty&&!a)return!1;if(h)a=h.getExtremes(),l=a.min,n=a.max;if(k&&this.sorted&&(!i||d>i||this.forceCrop))if(b[d-1]<l||b[0]>n)b=[],c=[];else if(b[0]<l||b[d-1]>n)e=this.cropData(this.xData,this.yData,l,n),b=e.xData,c=e.yData,e=e.start,f=!0;for(i=b.length-1;i>=0;i--)d=b[i]-b[i-1],d>0&&(g===u||d<g)?g=d:d<0&&this.requireSorting&&ka(15);this.cropped=f;this.cropStart=e;this.processedXData=b;this.processedYData=c;if(j.pointRange===null)this.pointRange=g||1;
  this.closestPointRange=g},cropData:function(a,b,c,d){var e=a.length,f=0,g=e,h=p(this.cropShoulder,1),i;for(i=0;i<e;i++)if(a[i]>=c){f=t(0,i-h);break}for(;i<e;i++)if(a[i]>d){g=i+h;break}return{xData:a.slice(f,g),yData:b.slice(f,g),start:f,end:g}},generatePoints:function(){var a=this.options.data,b=this.data,c,d=this.processedXData,e=this.processedYData,f=this.pointClass,g=d.length,h=this.cropStart||0,i,j=this.hasGroupedData,k,l=[],n;if(!b&&!j)b=[],b.length=a.length,b=this.data=b;for(n=0;n<g;n++)i=h+
  n,j?l[n]=(new f).init(this,[d[n]].concat(ra(e[n]))):(b[i]?k=b[i]:a[i]!==u&&(b[i]=k=(new f).init(this,a[i],d[n])),l[n]=k),l[n].index=i;if(b&&(g!==(c=b.length)||j))for(n=0;n<c;n++)if(n===h&&!j&&(n+=g),b[n])b[n].destroyElements(),b[n].plotX=u;this.data=b;this.points=l},getExtremes:function(a){var b=this.yAxis,c=this.processedXData,d,e=[],f=0;d=this.xAxis.getExtremes();var g=d.min,h=d.max,i,j,k,l,a=a||this.stackedYData||this.processedYData;d=a.length;for(l=0;l<d;l++)if(j=c[l],k=a[l],i=k!==null&&k!==u&&
  (!b.isLog||k.length||k>0),j=this.getExtremesFromAll||this.cropped||(c[l+1]||j)>=g&&(c[l-1]||j)<=h,i&&j)if(i=k.length)for(;i--;)k[i]!==null&&(e[f++]=k[i]);else e[f++]=k;this.dataMin=Pa(e);this.dataMax=Fa(e)},translate:function(){this.processedXData||this.processData();this.generatePoints();for(var a=this.options,b=a.stacking,c=this.xAxis,d=c.categories,e=this.yAxis,f=this.points,g=f.length,h=!!this.modifyValue,i=a.pointPlacement,j=i==="between"||qa(i),k=a.threshold,l,n,o,q=Number.MAX_VALUE,a=0;a<g;a++){var m=
  f[a],r=m.x,C=m.y;n=m.low;var v=b&&e.stacks[(this.negStacks&&C<k?"-":"")+this.stackKey];if(e.isLog&&C!==null&&C<=0)m.y=C=null,ka(10);m.plotX=l=c.translate(r,0,0,0,1,i,this.type==="flags");if(b&&this.visible&&v&&v[r])v=v[r],C=v.points[this.index+","+a],n=C[0],C=C[1],n===0&&(n=p(k,e.min)),e.isLog&&n<=0&&(n=null),m.total=m.stackTotal=v.total,m.percentage=v.total&&m.y/v.total*100,m.stackY=C,v.setOffset(this.pointXOffset||0,this.barW||0);m.yBottom=s(n)?e.translate(n,0,1,0,1):null;h&&(C=this.modifyValue(C,
  m));m.plotY=n=typeof C==="number"&&C!==Infinity?I(t(-1E5,e.translate(C,0,1,0,1)),1E5):u;m.isInside=n!==u&&n>=0&&n<=e.len&&l>=0&&l<=c.len;m.clientX=j?c.translate(r,0,0,0,1):l;m.negative=m.y<(k||0);m.category=d&&d[m.x]!==u?d[m.x]:m.x;a&&(q=I(q,O(l-o)));o=l}this.closestPointRangePx=q;this.getSegments()},setClip:function(a){var b=this.chart,c=b.renderer,d=b.inverted,e=this.clipBox,f=e||b.clipBox,g=this.sharedClipKey||["_sharedClip",a&&a.duration,a&&a.easing,f.height].join(","),h=b[g],i=b[g+"m"];if(!h){if(a)f.width=
  0,b[g+"m"]=i=c.clipRect(-99,d?-b.plotLeft:-b.plotTop,99,d?b.chartWidth:b.chartHeight);b[g]=h=c.clipRect(f)}a&&(h.count+=1);if(this.options.clip!==!1)this.group.clip(a||e?h:b.clipRect),this.markerGroup.clip(i),this.sharedClipKey=g;a||(h.count-=1,h.count<=0&&g&&b[g]&&(e||(b[g]=b[g].destroy()),b[g+"m"]&&(b[g+"m"]=b[g+"m"].destroy())))},animate:function(a){var b=this.chart,c=this.options.animation,d;if(c&&!ca(c))c=aa[this.type].animation;a?this.setClip(c):(d=this.sharedClipKey,(a=b[d])&&a.animate({width:b.plotSizeX},
  c),b[d+"m"]&&b[d+"m"].animate({width:b.plotSizeX+99},c),this.animate=null)},afterAnimate:function(){this.setClip();M(this,"afterAnimate")},drawPoints:function(){var a,b=this.points,c=this.chart,d,e,f,g,h,i,j,k,l=this.options.marker,n=this.pointAttr[""],o,q,m,s=this.markerGroup,t=p(l.enabled,this.xAxis.isRadial,this.closestPointRangePx>2*l.radius);if(l.enabled!==!1||this._hasPointMarkers)for(f=b.length;f--;)if(g=b[f],d=U(g.plotX),e=g.plotY,k=g.graphic,o=g.marker||{},q=!!g.marker,a=t&&o.enabled===u||
  o.enabled,m=g.isInside,a&&e!==u&&!isNaN(e)&&g.y!==null)if(a=g.pointAttr[g.selected?"select":""]||n,h=a.r,i=p(o.symbol,this.symbol),j=i.indexOf("url")===0,k)k[m?"show":"hide"](!0).animate(r({x:d-h,y:e-h},k.symbolName?{width:2*h,height:2*h}:{}));else{if(m&&(h>0||j))g.graphic=c.renderer.symbol(i,d-h,e-h,2*h,2*h,q?o:l).attr(a).add(s)}else if(k)g.graphic=k.destroy()},convertAttribs:function(a,b,c,d){var e=this.pointAttrToOptions,f,g,h={},a=a||{},b=b||{},c=c||{},d=d||{};for(f in e)g=e[f],h[f]=p(a[g],b[f],
  c[f],d[f]);return h},getAttribs:function(){var a=this,b=a.options,c=aa[a.type].marker?b.marker:b,d=c.states,e=d.hover,f,g=a.color,h=a.options.negativeColor;f={stroke:g,fill:g};var i=a.points||[],j,k=[],l,n=a.pointAttrToOptions;l=a.hasPointSpecificOptions;var o=c.lineColor,q=c.fillColor;j=b.turboThreshold;var p=a.zones,t=a.zoneAxis||"y",C;b.marker?(e.radius=e.radius||c.radius+e.radiusPlus,e.lineWidth=e.lineWidth||c.lineWidth+e.lineWidthPlus):(e.color=e.color||na(e.color||g).brighten(e.brightness).get(),
  e.negativeColor=e.negativeColor||na(e.negativeColor||h).brighten(e.brightness).get());k[""]=a.convertAttribs(c,f);m(["hover","select"],function(b){k[b]=a.convertAttribs(d[b],k[""])});a.pointAttr=k;g=i.length;if(!j||g<j||l)for(;g--;){j=i[g];if((c=j.options&&j.options.marker||j.options)&&c.enabled===!1)c.radius=0;if(p.length){l=0;for(f=p[l];j[t]>=f.value;)f=p[++l];j.color=j.fillColor=f.color}l=b.colorByPoint||j.color;if(j.options)for(C in n)s(c[n[C]])&&(l=!0);if(l){c=c||{};l=[];d=c.states||{};f=d.hover=
  d.hover||{};if(!b.marker)f.color=f.color||!j.options.color&&e[j.negative&&h?"negativeColor":"color"]||na(j.color).brighten(f.brightness||e.brightness).get();f={color:j.color};if(!q)f.fillColor=j.color;if(!o)f.lineColor=j.color;c.hasOwnProperty("color")&&!c.color&&delete c.color;l[""]=a.convertAttribs(r(f,c),k[""]);l.hover=a.convertAttribs(d.hover,k.hover,l[""]);l.select=a.convertAttribs(d.select,k.select,l[""])}else l=k;j.pointAttr=l}},destroy:function(){var a=this,b=a.chart,c=/AppleWebKit\/533/.test(Ba),
  d,e=a.data||[],f,g,h;M(a,"destroy");Y(a);m(a.axisTypes||[],function(b){if(h=a[b])ia(h.series,a),h.isDirty=h.forceRedraw=!0});a.legendItem&&a.chart.legend.destroyItem(a);for(d=e.length;d--;)(f=e[d])&&f.destroy&&f.destroy();a.points=null;clearTimeout(a.animationTimeout);for(g in a)a[g]instanceof K&&!a[g].survive&&(d=c&&g==="group"?"hide":"destroy",a[g][d]());if(b.hoverSeries===a)b.hoverSeries=null;ia(b.series,a);for(g in a)delete a[g]},getSegmentPath:function(a){var b=this,c=[],d=b.options.step;m(a,
  function(e,f){var g=e.plotX,h=e.plotY,i;b.getPointSpline?c.push.apply(c,b.getPointSpline(a,e,f)):(c.push(f?"L":"M"),d&&f&&(i=a[f-1],d==="right"?c.push(i.plotX,h):d==="center"?c.push((i.plotX+g)/2,i.plotY,(i.plotX+g)/2,h):c.push(g,i.plotY)),c.push(e.plotX,e.plotY))});return c},getGraphPath:function(){var a=this,b=[],c,d=[];m(a.segments,function(e){c=a.getSegmentPath(e);e.length>1?b=b.concat(c):d.push(e[0])});a.singlePoints=d;return a.graphPath=b},drawGraph:function(){var a=this,b=this.options,c=[["graph",
  b.lineColor||this.color,b.dashStyle]],d=b.lineWidth,e=b.linecap!=="square",f=this.getGraphPath(),g=this.fillGraph&&this.color||R;m(this.zones,function(d,e){c.push(["zoneGraph"+e,d.color||a.color,d.dashStyle||b.dashStyle])});m(c,function(c,i){var j=c[0],k=a[j];if(k)db(k),k.animate({d:f});else if((d||g)&&f.length)k={stroke:c[1],"stroke-width":d,fill:g,zIndex:1},c[2]?k.dashstyle=c[2]:e&&(k["stroke-linecap"]=k["stroke-linejoin"]="round"),a[j]=a.chart.renderer.path(f).attr(k).add(a.group).shadow(i<2&&
  b.shadow)})},applyZones:function(){var a=this,b=this.chart,c=b.renderer,d=this.zones,e,f,g=this.clips||[],h,i=this.graph,j=this.area,k=t(b.chartWidth,b.chartHeight),l=this[(this.zoneAxis||"y")+"Axis"],n=l.reversed,o=l.horiz,q=!1;if(d.length&&(i||j))i&&i.hide(),j&&j.hide(),m(d,function(d,m){e=p(f,n?o?b.plotWidth:0:o?0:l.toPixels(l.min));f=x(l.toPixels(p(d.value,l.max),!0));e=l.isXAxis?e>f?f:e:e<f?f:e;q&&(e=f=l.toPixels(l.max));if(l.isXAxis){if(h={x:n?f:e,y:0,width:Math.abs(e-f),height:k},!o)h.x=b.plotHeight-
  h.x}else if(h={x:0,y:n?e:f,width:k,height:Math.abs(e-f)},o)h.y=b.plotWidth-h.y;b.inverted&&c.isVML&&(h=l.isXAxis?{x:0,y:n?e:f,height:h.width,width:b.chartWidth}:{x:h.y-b.plotLeft-b.spacingBox.x,y:0,width:h.height,height:b.chartHeight});g[m]?g[m].animate(h):(g[m]=c.clipRect(h),i&&a["zoneGraph"+m].clip(g[m]),j&&a["zoneArea"+m].clip(g[m]));q=d.value>l.max}),this.clips=g},invertGroups:function(){function a(){var a={width:b.yAxis.len,height:b.xAxis.len};m(["group","markerGroup"],function(c){b[c]&&b[c].attr(a).invert()})}
  var b=this,c=b.chart;if(b.xAxis)N(c,"resize",a),N(b,"destroy",function(){Y(c,"resize",a)}),a(),b.invertGroups=a},plotGroup:function(a,b,c,d,e){var f=this[a],g=!f;g&&(this[a]=f=this.chart.renderer.g(b).attr({visibility:c,zIndex:d||0.1}).add(e));f[g?"attr":"animate"](this.getPlotBox());return f},getPlotBox:function(){var a=this.chart,b=this.xAxis,c=this.yAxis;if(a.inverted)b=c,c=this.xAxis;return{translateX:b?b.left:a.plotLeft,translateY:c?c.top:a.plotTop,scaleX:1,scaleY:1}},render:function(){var a=
  this,b=a.chart,c,d=a.options,e=(c=d.animation)&&!!a.animate&&b.renderer.isSVG&&p(c.duration,500)||0,f=a.visible?"visible":"hidden",g=d.zIndex,h=a.hasRendered,i=b.seriesGroup;c=a.plotGroup("group","series",f,g,i);a.markerGroup=a.plotGroup("markerGroup","markers",f,g,i);e&&a.animate(!0);a.getAttribs();c.inverted=a.isCartesian?b.inverted:!1;a.drawGraph&&(a.drawGraph(),a.applyZones());m(a.points,function(a){a.redraw&&a.redraw()});a.drawDataLabels&&a.drawDataLabels();a.visible&&a.drawPoints();a.drawTracker&&
  a.options.enableMouseTracking!==!1&&a.drawTracker();b.inverted&&a.invertGroups();d.clip!==!1&&!a.sharedClipKey&&!h&&c.clip(b.clipRect);e&&a.animate();if(!h)e?a.animationTimeout=setTimeout(function(){a.afterAnimate()},e):a.afterAnimate();a.isDirty=a.isDirtyData=!1;a.hasRendered=!0},redraw:function(){var a=this.chart,b=this.isDirtyData,c=this.isDirty,d=this.group,e=this.xAxis,f=this.yAxis;d&&(a.inverted&&d.attr({width:a.plotWidth,height:a.plotHeight}),d.animate({translateX:p(e&&e.left,a.plotLeft),translateY:p(f&&
  f.top,a.plotTop)}));this.translate();this.render();b&&M(this,"updatedData");(c||b)&&delete this.kdTree},kdDimensions:1,kdTree:null,kdAxisArray:["clientX","plotY"],kdComparer:"distX",searchPoint:function(a){var b=this.xAxis,c=this.yAxis,d=this.chart.inverted;return this.searchKDTree({clientX:d?b.len-a.chartY+b.pos:a.chartX-b.pos,plotY:d?c.len-a.chartX+c.pos:a.chartY-c.pos})},buildKDTree:function(){function a(b,d,g){var h,i;if(i=b&&b.length)return h=c.kdAxisArray[d%g],b.sort(function(a,b){return a[h]-
  b[h]}),i=Math.floor(i/2),{point:b[i],left:a(b.slice(0,i),d+1,g),right:a(b.slice(i+1),d+1,g)}}function b(){var b=kb(c.points,function(a){return a.y!==null});c.kdTree=a(b,d,d)}var c=this,d=c.kdDimensions;delete c.kdTree;c.options.kdSync?b():setTimeout(b)},searchKDTree:function(a){function b(a,h,i,j){var k=h.point,l=c.kdAxisArray[i%j],n,o=k;n=s(a[e])&&s(k[e])?Math.pow(a[e]-k[e],2):null;var m=s(a[f])&&s(k[f])?Math.pow(a[f]-k[f],2):null,p=(n||0)+(m||0);n={distX:s(n)?Math.sqrt(n):Number.MAX_VALUE,distY:s(m)?
  Math.sqrt(m):Number.MAX_VALUE,distR:s(p)?Math.sqrt(p):Number.MAX_VALUE};k.dist=n;l=a[l]-k[l];n=l<0?"left":"right";h[n]&&(n=b(a,h[n],i+1,j),o=n.dist[d]<o.dist[d]?n:k,k=l<0?"right":"left",h[k]&&Math.sqrt(l*l)<o.dist[d]&&(a=b(a,h[k],i+1,j),o=a.dist[d]<o.dist[d]?a:o));return o}var c=this,d=this.kdComparer,e=this.kdAxisArray[0],f=this.kdAxisArray[1];this.kdTree||this.buildKDTree();if(this.kdTree)return b(a,this.kdTree,this.kdDimensions,this.kdDimensions)}};Hb.prototype={destroy:function(){Qa(this,this.axis)},
  render:function(a){var b=this.options,c=b.format,c=c?Ja(c,this):b.formatter.call(this);this.label?this.label.attr({text:c,visibility:"hidden"}):this.label=this.axis.chart.renderer.text(c,null,null,b.useHTML).css(b.style).attr({align:this.textAlign,rotation:b.rotation,visibility:"hidden"}).add(a)},setOffset:function(a,b){var c=this.axis,d=c.chart,e=d.inverted,f=c.reversed,f=this.isNegative&&!f||!this.isNegative&&f,g=c.translate(c.usePercentage?100:this.total,0,0,0,1),c=c.translate(0),c=O(g-c),h=d.xAxis[0].translate(this.x)+
  a,i=d.plotHeight,f={x:e?f?g:g-c:h,y:e?i-h-b:f?i-g-c:i-g,width:e?c:b,height:e?b:c};if(e=this.label)e.align(this.alignOptions,null,f),f=e.alignAttr,e[this.options.crop===!1||d.isInsidePlot(f.x,f.y)?"show":"hide"](!0)}};va.prototype.buildStacks=function(){var a=this.series,b=p(this.options.reversedStacks,!0),c=a.length;if(!this.isXAxis){for(this.usePercentage=!1;c--;)a[b?c:a.length-c-1].setStackedPoints();if(this.usePercentage)for(c=0;c<a.length;c++)a[c].setPercentStacks()}};va.prototype.renderStackTotals=
  function(){var a=this.chart,b=a.renderer,c=this.stacks,d,e,f=this.stackTotalGroup;if(!f)this.stackTotalGroup=f=b.g("stack-labels").attr({visibility:"visible",zIndex:6}).add();f.translate(a.plotLeft,a.plotTop);for(d in c)for(e in a=c[d],a)a[e].render(f)};Q.prototype.setStackedPoints=function(){if(this.options.stacking&&!(this.visible!==!0&&this.chart.options.chart.ignoreHiddenSeries!==!1)){var a=this.processedXData,b=this.processedYData,c=[],d=b.length,e=this.options,f=e.threshold,g=e.stack,e=e.stacking,
  h=this.stackKey,i="-"+h,j=this.negStacks,k=this.yAxis,l=k.stacks,n=k.oldStacks,o,m,p,s,r,v;for(s=0;s<d;s++){r=a[s];v=b[s];p=this.index+","+s;m=(o=j&&v<f)?i:h;l[m]||(l[m]={});if(!l[m][r])n[m]&&n[m][r]?(l[m][r]=n[m][r],l[m][r].total=null):l[m][r]=new Hb(k,k.options.stackLabels,o,r,g);m=l[m][r];m.points[p]=[m.cum||0];e==="percent"?(o=o?h:i,j&&l[o]&&l[o][r]?(o=l[o][r],m.total=o.total=t(o.total,m.total)+O(v)||0):m.total=da(m.total+(O(v)||0))):m.total=da(m.total+(v||0));m.cum=(m.cum||0)+(v||0);m.points[p].push(m.cum);
  c[s]=m.cum}if(e==="percent")k.usePercentage=!0;this.stackedYData=c;k.oldStacks={}}};Q.prototype.setPercentStacks=function(){var a=this,b=a.stackKey,c=a.yAxis.stacks,d=a.processedXData;m([b,"-"+b],function(b){var e;for(var f=d.length,g,h;f--;)if(g=d[f],e=(h=c[b]&&c[b][g])&&h.points[a.index+","+f],g=e)h=h.total?100/h.total:0,g[0]=da(g[0]*h),g[1]=da(g[1]*h),a.stackedYData[f]=g[1]})};r(D.prototype,{addSeries:function(a,b,c){var d,e=this;a&&(b=p(b,!0),M(e,"addSeries",{options:a},function(){d=e.initSeries(a);
  e.isDirtyLegend=!0;e.linkSeries();b&&e.redraw(c)}));return d},addAxis:function(a,b,c,d){var e=b?"xAxis":"yAxis",f=this.options;new va(this,z(a,{index:this[e].length,isX:b}));f[e]=ra(f[e]||{});f[e].push(a);p(c,!0)&&this.redraw(d)},showLoading:function(a){var b=this,c=b.options,d=b.loadingDiv,e=c.loading,f=function(){d&&F(d,{left:b.plotLeft+"px",top:b.plotTop+"px",width:b.plotWidth+"px",height:b.plotHeight+"px"})};if(!d)b.loadingDiv=d=Z(Ka,{className:"highcharts-loading"},r(e.style,{zIndex:10,display:R}),
  b.container),b.loadingSpan=Z("span",null,e.labelStyle,d),N(b,"redraw",f);b.loadingSpan.innerHTML=a||c.lang.loading;if(!b.loadingShown)F(d,{opacity:0,display:""}),lb(d,{opacity:e.style.opacity},{duration:e.showDuration||0}),b.loadingShown=!0;f()},hideLoading:function(){var a=this.options,b=this.loadingDiv;b&&lb(b,{opacity:0},{duration:a.loading.hideDuration||100,complete:function(){F(b,{display:R})}});this.loadingShown=!1}});r(Ga.prototype,{update:function(a,b,c,d){function e(){f.applyOptions(a);if(ca(a)&&
  !Ha(a))f.redraw=function(){if(h)a&&a.marker&&a.marker.symbol?f.graphic=h.destroy():h.attr(f.pointAttr[f.state||""]);if(a&&a.dataLabels&&f.dataLabel)f.dataLabel=f.dataLabel.destroy();f.redraw=null};i=f.index;g.updateParallelArrays(f,i);if(l&&f.name)l[f.x]=f.name;k.data[i]=f.options;g.isDirty=g.isDirtyData=!0;if(!g.fixedBox&&g.hasCartesianSeries)j.isDirtyBox=!0;j.legend.display&&k.legendType==="point"&&(g.updateTotals(),j.legend.clearItems());b&&j.redraw(c)}var f=this,g=f.series,h=f.graphic,i,j=g.chart,
  k=g.options,l=g.xAxis&&g.xAxis.names,b=p(b,!0);d===!1?e():f.firePointEvent("update",{options:a},e)},remove:function(a,b){this.series.removePoint(Ma(this,this.series.data),a,b)}});r(Q.prototype,{addPoint:function(a,b,c,d){var e=this,f=e.options,g=e.data,h=e.graph,i=e.area,j=e.chart,k=e.xAxis&&e.xAxis.names,l=h&&h.shift||0,n=["graph","area"],h=f.data,o,q=e.xData;Sa(d,j);if(c){for(d=e.zones.length;d--;)n.push("zoneGraph"+d,"zoneArea"+d);m(n,function(a){if(e[a])e[a].shift=l+1})}if(i)i.isArea=!0;b=p(b,
  !0);i={series:e};e.pointClass.prototype.applyOptions.apply(i,[a]);n=i.x;d=q.length;if(e.requireSorting&&n<q[d-1])for(o=!0;d&&q[d-1]>n;)d--;e.updateParallelArrays(i,"splice",d,0,0);e.updateParallelArrays(i,d);if(k&&i.name)k[n]=i.name;h.splice(d,0,a);o&&(e.data.splice(d,0,null),e.processData());f.legendType==="point"&&e.generatePoints();c&&(g[0]&&g[0].remove?g[0].remove(!1):(g.shift(),e.updateParallelArrays(i,"shift"),h.shift()));e.isDirty=!0;e.isDirtyData=!0;b&&(e.getAttribs(),j.redraw())},removePoint:function(a,
  b,c){var d=this,e=d.data,f=e[a],g=d.points,h=d.chart,i=function(){e.length===g.length&&g.splice(a,1);e.splice(a,1);d.options.data.splice(a,1);d.updateParallelArrays(f||{series:d},"splice",a,1);f&&f.destroy();d.isDirty=!0;d.isDirtyData=!0;b&&h.redraw()};Sa(c,h);b=p(b,!0);f?f.firePointEvent("remove",null,i):i()},remove:function(a,b){var c=this,d=c.chart,a=p(a,!0);if(!c.isRemoving)c.isRemoving=!0,M(c,"remove",null,function(){c.destroy();d.isDirtyLegend=d.isDirtyBox=!0;d.linkSeries();a&&d.redraw(b)});
  c.isRemoving=!1},update:function(a,b){var c=this,d=this.chart,e=this.userOptions,f=this.type,g=J[f].prototype,h=["group","markerGroup","dataLabelsGroup"],i;if(a.type&&a.type!==f||a.zIndex!==void 0)h.length=0;m(h,function(a){h[a]=c[a];delete c[a]});a=z(e,{animation:!1,index:this.index,pointStart:this.xData[0]},{data:this.options.data},a);this.remove(!1);for(i in g)this[i]=u;r(this,J[a.type||f].prototype);m(h,function(a){c[a]=h[a]});this.init(d,a);d.linkSeries();p(b,!0)&&d.redraw(!1)}});r(va.prototype,
  {update:function(a,b){var c=this.chart,a=c.options[this.coll][this.options.index]=z(this.userOptions,a);this.destroy(!0);this._addedPlotLB=u;this.init(c,r(a,{events:u}));c.isDirtyBox=!0;p(b,!0)&&c.redraw()},remove:function(a){for(var b=this.chart,c=this.coll,d=this.series,e=d.length;e--;)d[e]&&d[e].remove(!1);ia(b.axes,this);ia(b[c],this);b.options[c].splice(this.options.index,1);m(b[c],function(a,b){a.options.index=b});this.destroy();b.isDirtyBox=!0;p(a,!0)&&b.redraw()},setTitle:function(a,b){this.update({title:a},
  b)},setCategories:function(a,b){this.update({categories:a},b)}});var xa=ja(Q);J.line=xa;aa.area=z(T,{threshold:0});var pa=ja(Q,{type:"area",getSegments:function(){var a=this,b=[],c=[],d=[],e=this.xAxis,f=this.yAxis,g=f.stacks[this.stackKey],h={},i,j,k=this.points,l=this.options.connectNulls,n,o;if(this.options.stacking&&!this.cropped){for(n=0;n<k.length;n++)h[k[n].x]=k[n];for(o in g)g[o].total!==null&&d.push(+o);d.sort(function(a,b){return a-b});m(d,function(b){var d=0,k;if(!l||h[b]&&h[b].y!==null)if(h[b])c.push(h[b]);
  else{for(n=a.index;n<=f.series.length;n++)if(k=g[b].points[n+","+b]){d=k[1];break}i=e.translate(b);j=f.toPixels(d,!0);c.push({y:null,plotX:i,clientX:i,plotY:j,yBottom:j,onMouseOver:ma})}});c.length&&b.push(c)}else Q.prototype.getSegments.call(this),b=this.segments;this.segments=b},getSegmentPath:function(a){var b=Q.prototype.getSegmentPath.call(this,a),c=[].concat(b),d,e=this.options;d=b.length;var f=this.yAxis.getThreshold(e.threshold),g;d===3&&c.push("L",b[1],b[2]);if(e.stacking&&!this.closedStacks)for(d=
  a.length-1;d>=0;d--)g=p(a[d].yBottom,f),d<a.length-1&&e.step&&c.push(a[d+1].plotX,g),c.push(a[d].plotX,g);else this.closeSegment(c,a,f);this.areaPath=this.areaPath.concat(c);return b},closeSegment:function(a,b,c){a.push("L",b[b.length-1].plotX,c,"L",b[0].plotX,c)},drawGraph:function(){this.areaPath=[];Q.prototype.drawGraph.apply(this);var a=this,b=this.areaPath,c=this.options,d=[["area",this.color,c.fillColor]];m(this.zones,function(b,f){d.push(["zoneArea"+f,b.color||a.color,b.fillColor||c.fillColor])});
  m(d,function(d){var f=d[0],g=a[f];g?g.animate({d:b}):a[f]=a.chart.renderer.path(b).attr({fill:p(d[2],na(d[1]).setOpacity(p(c.fillOpacity,0.75)).get()),zIndex:0}).add(a.group)})},drawLegendSymbol:Na.drawRectangle});J.area=pa;aa.spline=z(T);xa=ja(Q,{type:"spline",getPointSpline:function(a,b,c){var d=b.plotX,e=b.plotY,f=a[c-1],g=a[c+1],h,i,j,k;if(f&&g){a=f.plotY;j=g.plotX;var g=g.plotY,l;h=(1.5*d+f.plotX)/2.5;i=(1.5*e+a)/2.5;j=(1.5*d+j)/2.5;k=(1.5*e+g)/2.5;l=(k-i)*(j-d)/(j-h)+e-k;i+=l;k+=l;i>a&&i>e?
  (i=t(a,e),k=2*e-i):i<a&&i<e&&(i=I(a,e),k=2*e-i);k>g&&k>e?(k=t(g,e),i=2*e-k):k<g&&k<e&&(k=I(g,e),i=2*e-k);b.rightContX=j;b.rightContY=k}c?(b=["C",f.rightContX||f.plotX,f.rightContY||f.plotY,h||d,i||e,d,e],f.rightContX=f.rightContY=null):b=["M",d,e];return b}});J.spline=xa;aa.areaspline=z(aa.area);pa=pa.prototype;xa=ja(xa,{type:"areaspline",closedStacks:!0,getSegmentPath:pa.getSegmentPath,closeSegment:pa.closeSegment,drawGraph:pa.drawGraph,drawLegendSymbol:Na.drawRectangle});J.areaspline=xa;aa.column=
  z(T,{borderColor:"#FFFFFF",borderRadius:0,groupPadding:0.2,marker:null,pointPadding:0.1,minPointLength:0,cropThreshold:50,pointRange:null,states:{hover:{brightness:0.1,shadow:!1,halo:!1},select:{color:"#C0C0C0",borderColor:"#000000",shadow:!1}},dataLabels:{align:null,verticalAlign:null,y:null},stickyTracking:!1,tooltip:{distance:6},threshold:0});xa=ja(Q,{type:"column",pointAttrToOptions:{stroke:"borderColor",fill:"color",r:"borderRadius"},cropShoulder:0,directTouch:!0,trackerGroups:["group","dataLabelsGroup"],
  negStacks:!0,init:function(){Q.prototype.init.apply(this,arguments);var a=this,b=a.chart;b.hasRendered&&m(b.series,function(b){if(b.type===a.type)b.isDirty=!0})},getColumnMetrics:function(){var a=this,b=a.options,c=a.xAxis,d=a.yAxis,e=c.reversed,f,g={},h,i=0;b.grouping===!1?i=1:m(a.chart.series,function(b){var c=b.options,e=b.yAxis;if(b.type===a.type&&b.visible&&d.len===e.len&&d.pos===e.pos)c.stacking?(f=b.stackKey,g[f]===u&&(g[f]=i++),h=g[f]):c.grouping!==!1&&(h=i++),b.columnIndex=h});var c=I(O(c.transA)*
  (c.ordinalSlope||b.pointRange||c.closestPointRange||c.tickInterval||1),c.len),j=c*b.groupPadding,k=(c-2*j)/i,l=b.pointWidth,b=s(l)?(k-l)/2:k*b.pointPadding,l=p(l,k-2*b);return a.columnMetrics={width:l,offset:b+(j+((e?i-(a.columnIndex||0):a.columnIndex)||0)*k-c/2)*(e?-1:1)}},translate:function(){var a=this,b=a.chart,c=a.options,d=a.borderWidth=p(c.borderWidth,a.closestPointRange*a.xAxis.transA<2?0:1),e=a.yAxis,f=a.translatedThreshold=e.getThreshold(c.threshold),g=p(c.minPointLength,5),h=a.getColumnMetrics(),
  i=h.width,j=a.barW=t(i,1+2*d),k=a.pointXOffset=h.offset,l=-(d%2?0.5:0),n=d%2?0.5:1;b.inverted&&(f-=0.5,b.renderer.isVML&&(n+=1));c.pointPadding&&(j=sa(j));Q.prototype.translate.apply(a);m(a.points,function(c){var d=p(c.yBottom,f),h=I(t(-999-d,c.plotY),e.len+999+d),m=c.plotX+k,s=j,r=I(h,d),u,w;u=t(h,d)-r;O(u)<g&&g&&(u=g,w=!e.reversed&&!c.negative||e.reversed&&c.negative,r=x(O(r-f)>g?d-g:f-(w?g:0)));c.barX=m;c.pointWidth=i;c.tooltipPos=b.inverted?[e.len+e.pos-b.plotLeft-h,a.xAxis.len-m-s/2]:[m+s/2,
  h+e.pos-b.plotTop];s=x(m+s)+l;m=x(m)+l;s-=m;d=O(r)<0.5;u=I(x(r+u)+n,9E4);r=x(r)+n;u-=r;d&&(r-=1,u+=1);c.shapeType="rect";c.shapeArgs={x:m,y:r,width:s,height:u}})},getSymbol:ma,drawLegendSymbol:Na.drawRectangle,drawGraph:ma,drawPoints:function(){var a=this,b=this.chart,c=a.options,d=b.renderer,e=c.animationLimit||250,f,g;m(a.points,function(h){var i=h.plotY,j=h.graphic;if(i!==u&&!isNaN(i)&&h.y!==null)f=h.shapeArgs,i=s(a.borderWidth)?{"stroke-width":a.borderWidth}:{},g=h.pointAttr[h.selected?"select":
  ""]||a.pointAttr[""],j?(db(j),j.attr(i)[b.pointCount<e?"animate":"attr"](z(f))):h.graphic=d[h.shapeType](f).attr(i).attr(g).add(a.group).shadow(c.shadow,null,c.stacking&&!c.borderRadius);else if(j)h.graphic=j.destroy()})},animate:function(a){var b=this.yAxis,c=this.options,d=this.chart.inverted,e={};if(ba)a?(e.scaleY=0.001,a=I(b.pos+b.len,t(b.pos,b.toPixels(c.threshold))),d?e.translateX=a-b.len:e.translateY=a,this.group.attr(e)):(e.scaleY=1,e[d?"translateX":"translateY"]=b.pos,this.group.animate(e,
  this.options.animation),this.animate=null)},remove:function(){var a=this,b=a.chart;b.hasRendered&&m(b.series,function(b){if(b.type===a.type)b.isDirty=!0});Q.prototype.remove.apply(a,arguments)}});J.column=xa;aa.bar=z(aa.column);pa=ja(xa,{type:"bar",inverted:!0});J.bar=pa;aa.scatter=z(T,{lineWidth:0,marker:{enabled:!0},tooltip:{headerFormat:'<span style="color:{series.color}">\u25CF</span> <span style="font-size: 10px;"> {series.name}</span><br/>',pointFormat:"x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>"}});
  pa=ja(Q,{type:"scatter",sorted:!1,requireSorting:!1,noSharedTooltip:!0,trackerGroups:["group","markerGroup","dataLabelsGroup"],takeOrdinalPosition:!1,kdDimensions:2,kdComparer:"distR",drawGraph:function(){this.options.lineWidth&&Q.prototype.drawGraph.call(this)}});J.scatter=pa;aa.pie=z(T,{borderColor:"#FFFFFF",borderWidth:1,center:[null,null],clip:!1,colorByPoint:!0,dataLabels:{distance:30,enabled:!0,formatter:function(){return this.point.name},x:0},ignoreHiddenPoint:!0,legendType:"point",marker:null,
  size:null,showInLegend:!1,slicedOffset:10,states:{hover:{brightness:0.1,shadow:!1}},stickyTracking:!1,tooltip:{followPointer:!0}});T={type:"pie",isCartesian:!1,pointClass:ja(Ga,{init:function(){Ga.prototype.init.apply(this,arguments);var a=this,b;r(a,{visible:a.visible!==!1,name:p(a.name,"Slice")});b=function(b){a.slice(b.type==="select")};N(a,"select",b);N(a,"unselect",b);return a},setVisible:function(a,b){var c=this,d=c.series,e=d.chart,f=!d.isDirty&&d.options.ignoreHiddenPoint;if(a!==c.visible||
  b)if(c.visible=c.options.visible=a=a===u?!c.visible:a,d.options.data[Ma(c,d.data)]=c.options,m(["graphic","dataLabel","connector","shadowGroup"],function(b){if(c[b])c[b][a?"show":"hide"](!0)}),c.legendItem&&(e.hasRendered&&(d.updateTotals(),e.legend.clearItems(),f||e.legend.render()),e.legend.colorizeItem(c,a)),f)d.isDirty=!0,e.redraw()},slice:function(a,b,c){var d=this.series;Sa(c,d.chart);p(b,!0);this.sliced=this.options.sliced=a=s(a)?a:!this.sliced;d.options.data[Ma(this,d.data)]=this.options;
  a=a?this.slicedTranslation:{translateX:0,translateY:0};this.graphic.animate(a);this.shadowGroup&&this.shadowGroup.animate(a)},haloPath:function(a){var b=this.shapeArgs,c=this.series.chart;return this.sliced||!this.visible?[]:this.series.chart.renderer.symbols.arc(c.plotLeft+b.x,c.plotTop+b.y,b.r+a,b.r+a,{innerR:this.shapeArgs.r,start:b.start,end:b.end})}}),requireSorting:!1,noSharedTooltip:!0,trackerGroups:["group","dataLabelsGroup"],axisTypes:[],pointAttrToOptions:{stroke:"borderColor","stroke-width":"borderWidth",
  fill:"color"},getColor:ma,animate:function(a){var b=this,c=b.points,d=b.startAngleRad;if(!a)m(c,function(a){var c=a.graphic,g=a.shapeArgs;c&&(c.attr({r:a.startR||b.center[3]/2,start:d,end:d}),c.animate({r:g.r,start:g.start,end:g.end},b.options.animation))}),b.animate=null},setData:function(a,b,c,d){Q.prototype.setData.call(this,a,!1,c,d);this.processData();this.generatePoints();p(b,!0)&&this.chart.redraw(c)},updateTotals:function(){var a,b=0,c,d,e,f=this.options.ignoreHiddenPoint;c=this.points;d=
  c.length;for(a=0;a<d;a++){e=c[a];if(e.y<0)e.y=null;b+=f&&!e.visible?0:e.y}this.total=b;for(a=0;a<d;a++)e=c[a],e.percentage=b>0&&(e.visible||!f)?e.y/b*100:0,e.total=b},generatePoints:function(){Q.prototype.generatePoints.call(this);this.updateTotals()},translate:function(a){this.generatePoints();var b=0,c=this.options,d=c.slicedOffset,e=d+c.borderWidth,f,g,h,i=c.startAngle||0,j=this.startAngleRad=la/180*(i-90),i=(this.endAngleRad=la/180*(p(c.endAngle,i+360)-90))-j,k=this.points,l=c.dataLabels.distance,
  c=c.ignoreHiddenPoint,n,m=k.length,q;if(!a)this.center=a=this.getCenter();this.getX=function(b,c){h=V.asin(I((b-a[1])/(a[2]/2+l),1));return a[0]+(c?-1:1)*W(h)*(a[2]/2+l)};for(n=0;n<m;n++){q=k[n];f=j+b*i;if(!c||q.visible)b+=q.percentage/100;g=j+b*i;q.shapeType="arc";q.shapeArgs={x:a[0],y:a[1],r:a[2]/2,innerR:a[3]/2,start:x(f*1E3)/1E3,end:x(g*1E3)/1E3};h=(g+f)/2;h>1.5*la?h-=2*la:h<-la/2&&(h+=2*la);q.slicedTranslation={translateX:x(W(h)*d),translateY:x($(h)*d)};f=W(h)*a[2]/2;g=$(h)*a[2]/2;q.tooltipPos=
  [a[0]+f*0.7,a[1]+g*0.7];q.half=h<-la/2||h>la/2?1:0;q.angle=h;e=I(e,l/2);q.labelPos=[a[0]+f+W(h)*l,a[1]+g+$(h)*l,a[0]+f+W(h)*e,a[1]+g+$(h)*e,a[0]+f,a[1]+g,l<0?"center":q.half?"right":"left",h]}},drawGraph:null,drawPoints:function(){var a=this,b=a.chart.renderer,c,d,e=a.options.shadow,f,g;if(e&&!a.shadowGroup)a.shadowGroup=b.g("shadow").add(a.group);m(a.points,function(h){var i=h.options.visible;d=h.graphic;g=h.shapeArgs;f=h.shadowGroup;if(e&&!f)f=h.shadowGroup=b.g("shadow").add(a.shadowGroup);c=h.sliced?
  h.slicedTranslation:{translateX:0,translateY:0};f&&f.attr(c);d?d.animate(r(g,c)):h.graphic=d=b[h.shapeType](g).setRadialReference(a.center).attr(h.pointAttr[h.selected?"select":""]).attr({"stroke-linejoin":"round"}).attr(c).add(a.group).shadow(e,f);i!==void 0&&h.setVisible(i,!0)})},searchPoint:ma,sortByAngle:function(a,b){a.sort(function(a,d){return a.angle!==void 0&&(d.angle-a.angle)*b})},drawLegendSymbol:Na.drawRectangle,getCenter:Xb.getCenter,getSymbol:ma};T=ja(Q,T);J.pie=T;Q.prototype.drawDataLabels=
  function(){var a=this,b=a.options,c=b.cursor,d=b.dataLabels,e=a.points,f,g,h=a.hasRendered||0,i,j,k=a.chart.renderer;if(d.enabled||a._hasPointLabels)a.dlProcessOptions&&a.dlProcessOptions(d),j=a.plotGroup("dataLabelsGroup","data-labels",d.defer?"hidden":"visible",d.zIndex||6),p(d.defer,!0)&&(j.attr({opacity:+h}),h||N(a,"afterAnimate",function(){a.visible&&j.show();j[b.animation?"animate":"attr"]({opacity:1},{duration:200})})),g=d,m(e,function(e){var h,m=e.dataLabel,q,t,x=e.connector,w=!0,v,A={};f=
  e.dlOptions||e.options&&e.options.dataLabels;h=p(f&&f.enabled,g.enabled);if(m&&!h)e.dataLabel=m.destroy();else if(h){d=z(g,f);v=d.style;h=d.rotation;q=e.getLabelConfig();i=d.format?Ja(d.format,q):d.formatter.call(q,d);v.color=p(d.color,v.color,a.color,"black");if(m)if(s(i))m.attr({text:i}),w=!1;else{if(e.dataLabel=m=m.destroy(),x)e.connector=x.destroy()}else if(s(i)){m={fill:d.backgroundColor,stroke:d.borderColor,"stroke-width":d.borderWidth,r:d.borderRadius||0,rotation:h,padding:d.padding,zIndex:1};
  if(v.color==="contrast")A.color=d.inside||d.distance<0||b.stacking?k.getContrast(e.color||a.color):"#000000";if(c)A.cursor=c;for(t in m)m[t]===u&&delete m[t];m=e.dataLabel=k[h?"text":"label"](i,0,-999,d.shape,null,null,d.useHTML).attr(m).css(r(v,A)).add(j).shadow(d.shadow)}m&&a.alignDataLabel(e,m,d,null,w)}})};Q.prototype.alignDataLabel=function(a,b,c,d,e){var f=this.chart,g=f.inverted,h=p(a.plotX,-999),i=p(a.plotY,-999),j=b.getBBox(),k=f.renderer.fontMetrics(c.style.fontSize).b,l=this.visible&&(a.series.forceDL||
  f.isInsidePlot(h,x(i),g)||d&&f.isInsidePlot(h,g?d.x+1:d.y+d.height-1,g));if(l)d=r({x:g?f.plotWidth-i:h,y:x(g?f.plotHeight-h:i),width:0,height:0},d),r(c,{width:j.width,height:j.height}),c.rotation?(a=f.renderer.rotCorr(k,c.rotation),b[e?"attr":"animate"]({x:d.x+c.x+d.width/2+a.x,y:d.y+c.y+d.height/2}).attr({align:c.align})):(b.align(c,null,d),g=b.alignAttr,p(c.overflow,"justify")==="justify"?this.justifyDataLabel(b,c,g,j,d,e):p(c.crop,!0)&&(l=f.isInsidePlot(g.x,g.y)&&f.isInsidePlot(g.x+j.width,g.y+
  j.height)),c.shape&&b.attr({anchorX:a.plotX,anchorY:a.plotY}));if(!l)b.attr({y:-999}),b.placed=!1};Q.prototype.justifyDataLabel=function(a,b,c,d,e,f){var g=this.chart,h=b.align,i=b.verticalAlign,j,k,l=a.box?0:a.padding||0;j=c.x+l;if(j<0)h==="right"?b.align="left":b.x=-j,k=!0;j=c.x+d.width-l;if(j>g.plotWidth)h==="left"?b.align="right":b.x=g.plotWidth-j,k=!0;j=c.y+l;if(j<0)i==="bottom"?b.verticalAlign="top":b.y=-j,k=!0;j=c.y+d.height-l;if(j>g.plotHeight)i==="top"?b.verticalAlign="bottom":b.y=g.plotHeight-
  j,k=!0;if(k)a.placed=!f,a.align(b,null,e)};if(J.pie)J.pie.prototype.drawDataLabels=function(){var a=this,b=a.data,c,d=a.chart,e=a.options.dataLabels,f=p(e.connectorPadding,10),g=p(e.connectorWidth,1),h=d.plotWidth,i=d.plotHeight,j,k,l=p(e.softConnector,!0),n=e.distance,o=a.center,q=o[2]/2,r=o[1],s=n>0,u,v,w,z=[[],[]],A,B,D,G,E,F=[0,0,0,0],M=function(a,b){return b.y-a.y};if(a.visible&&(e.enabled||a._hasPointLabels)){Q.prototype.drawDataLabels.apply(a);m(b,function(a){a.dataLabel&&a.visible&&z[a.half].push(a)});
  for(G=2;G--;){var J=[],N=[],H=z[G],L=H.length,K;if(L){a.sortByAngle(H,G-0.5);for(E=b=0;!b&&H[E];)b=H[E]&&H[E].dataLabel&&(H[E].dataLabel.getBBox().height||21),E++;if(n>0){v=I(r+q+n,d.plotHeight);for(E=t(0,r-q-n);E<=v;E+=b)J.push(E);v=J.length;if(L>v){c=[].concat(H);c.sort(M);for(E=L;E--;)c[E].rank=E;for(E=L;E--;)H[E].rank>=v&&H.splice(E,1);L=H.length}for(E=0;E<L;E++){c=H[E];w=c.labelPos;c=9999;var R,P;for(P=0;P<v;P++)R=O(J[P]-w[1]),R<c&&(c=R,K=P);if(K<E&&J[E]!==null)K=E;else for(v<L-E+K&&J[E]!==null&&
  (K=v-L+E);J[K]===null;)K++;N.push({i:K,y:J[K]});J[K]=null}N.sort(M)}for(E=0;E<L;E++){c=H[E];w=c.labelPos;u=c.dataLabel;D=c.visible===!1?"hidden":"inherit";c=w[1];if(n>0){if(v=N.pop(),K=v.i,B=v.y,c>B&&J[K+1]!==null||c<B&&J[K-1]!==null)B=I(t(0,c),d.plotHeight)}else B=c;A=e.justify?o[0]+(G?-1:1)*(q+n):a.getX(B===r-q-n||B===r+q+n?c:B,G);u._attr={visibility:D,align:w[6]};u._pos={x:A+e.x+({left:f,right:-f}[w[6]]||0),y:B+e.y-10};u.connX=A;u.connY=B;if(this.options.size===null)v=u.width,A-v<f?F[3]=t(x(v-
  A+f),F[3]):A+v>h-f&&(F[1]=t(x(A+v-h+f),F[1])),B-b/2<0?F[0]=t(x(-B+b/2),F[0]):B+b/2>i&&(F[2]=t(x(B+b/2-i),F[2]))}}}if(Fa(F)===0||this.verifyDataLabelOverflow(F))this.placeDataLabels(),s&&g&&m(this.points,function(b){j=b.connector;w=b.labelPos;if((u=b.dataLabel)&&u._pos)D=u._attr.visibility,A=u.connX,B=u.connY,k=l?["M",A+(w[6]==="left"?5:-5),B,"C",A,B,2*w[2]-w[4],2*w[3]-w[5],w[2],w[3],"L",w[4],w[5]]:["M",A+(w[6]==="left"?5:-5),B,"L",w[2],w[3],"L",w[4],w[5]],j?(j.animate({d:k}),j.attr("visibility",D)):
  b.connector=j=a.chart.renderer.path(k).attr({"stroke-width":g,stroke:e.connectorColor||b.color||"#606060",visibility:D}).add(a.dataLabelsGroup);else if(j)b.connector=j.destroy()})}},J.pie.prototype.placeDataLabels=function(){m(this.points,function(a){var a=a.dataLabel,b;if(a)(b=a._pos)?(a.attr(a._attr),a[a.moved?"animate":"attr"](b),a.moved=!0):a&&a.attr({y:-999})})},J.pie.prototype.alignDataLabel=ma,J.pie.prototype.verifyDataLabelOverflow=function(a){var b=this.center,c=this.options,d=c.center,e=
  c=c.minSize||80,f;d[0]!==null?e=t(b[2]-t(a[1],a[3]),c):(e=t(b[2]-a[1]-a[3],c),b[0]+=(a[3]-a[1])/2);d[1]!==null?e=t(I(e,b[2]-t(a[0],a[2])),c):(e=t(I(e,b[2]-a[0]-a[2]),c),b[1]+=(a[0]-a[2])/2);e<b[2]?(b[2]=e,this.translate(b),m(this.points,function(a){if(a.dataLabel)a.dataLabel._pos=null}),this.drawDataLabels&&this.drawDataLabels()):f=!0;return f};if(J.column)J.column.prototype.alignDataLabel=function(a,b,c,d,e){var f=this.chart.inverted,g=a.series,h=a.dlBox||a.shapeArgs,i=a.below||a.plotY>p(this.translatedThreshold,
  g.yAxis.len),j=p(c.inside,!!this.options.stacking);if(h&&(d=z(h),f&&(d={x:g.yAxis.len-d.y-d.height,y:g.xAxis.len-d.x-d.width,width:d.height,height:d.width}),!j))f?(d.x+=i?0:d.width,d.width=0):(d.y+=i?d.height:0,d.height=0);c.align=p(c.align,!f||j?"center":i?"right":"left");c.verticalAlign=p(c.verticalAlign,f||j?"middle":i?"top":"bottom");Q.prototype.alignDataLabel.call(this,a,b,c,d,e)};(function(a){var b=a.Chart,c=a.each,d=HighchartsAdapter.addEvent;b.prototype.callbacks.push(function(a){function b(){var d=
  [];c(a.series,function(a){var b=a.options.dataLabels;(b.enabled||a._hasPointLabels)&&!b.allowOverlap&&a.visible&&c(a.points,function(a){if(a.dataLabel)a.dataLabel.labelrank=a.labelrank,d.push(a.dataLabel)})});a.hideOverlappingLabels(d)}b();d(a,"redraw",b)});b.prototype.hideOverlappingLabels=function(a){var b=a.length,c,d,i,j;for(d=0;d<b;d++)if(c=a[d])c.oldOpacity=c.opacity,c.newOpacity=1;for(d=0;d<b;d++){i=a[d];for(c=d+1;c<b;++c)if(j=a[c],i&&j&&i.placed&&j.placed&&i.newOpacity!==0&&j.newOpacity!==
  0&&!(j.alignAttr.x>i.alignAttr.x+i.width||j.alignAttr.x+j.width<i.alignAttr.x||j.alignAttr.y>i.alignAttr.y+i.height||j.alignAttr.y+j.height<i.alignAttr.y))(i.labelrank<j.labelrank?i:j).newOpacity=0}for(d=0;d<b;d++)if(c=a[d]){if(c.oldOpacity!==c.newOpacity&&c.placed)c.alignAttr.opacity=c.newOpacity,c[c.isOld&&c.newOpacity?"animate":"attr"](c.alignAttr);c.isOld=!0}}})(w);T=w.TrackerMixin={drawTrackerPoint:function(){var a=this,b=a.chart,c=b.pointer,d=a.options.cursor,e=d&&{cursor:d},f=function(a){for(var c=
  a.target,d;c&&!d;)d=c.point,c=c.parentNode;if(d!==u&&d!==b.hoverPoint)d.onMouseOver(a)};m(a.points,function(a){if(a.graphic)a.graphic.element.point=a;if(a.dataLabel)a.dataLabel.element.point=a});if(!a._hasTracking)m(a.trackerGroups,function(b){if(a[b]&&(a[b].addClass("highcharts-tracker").on("mouseover",f).on("mouseout",function(a){c.onTrackerMouseOut(a)}).css(e),ab))a[b].on("touchstart",f)}),a._hasTracking=!0},drawTrackerGraph:function(){var a=this,b=a.options,c=b.trackByArea,d=[].concat(c?a.areaPath:
  a.graphPath),e=d.length,f=a.chart,g=f.pointer,h=f.renderer,i=f.options.tooltip.snap,j=a.tracker,k=b.cursor,l=k&&{cursor:k},k=a.singlePoints,n,o=function(){if(f.hoverSeries!==a)a.onMouseOver()},p="rgba(192,192,192,"+(ba?1.0E-4:0.002)+")";if(e&&!c)for(n=e+1;n--;)d[n]==="M"&&d.splice(n+1,0,d[n+1]-i,d[n+2],"L"),(n&&d[n]==="M"||n===e)&&d.splice(n,0,"L",d[n-2]+i,d[n-1]);for(n=0;n<k.length;n++)e=k[n],d.push("M",e.plotX-i,e.plotY,"L",e.plotX+i,e.plotY);j?j.attr({d:d}):(a.tracker=h.path(d).attr({"stroke-linejoin":"round",
  visibility:a.visible?"visible":"hidden",stroke:p,fill:c?p:R,"stroke-width":b.lineWidth+(c?0:2*i),zIndex:2}).add(a.group),m([a.tracker,a.markerGroup],function(a){a.addClass("highcharts-tracker").on("mouseover",o).on("mouseout",function(a){g.onTrackerMouseOut(a)}).css(l);if(ab)a.on("touchstart",o)}))}};if(J.column)xa.prototype.drawTracker=T.drawTrackerPoint;if(J.pie)J.pie.prototype.drawTracker=T.drawTrackerPoint;if(J.scatter)pa.prototype.drawTracker=T.drawTrackerPoint;r(mb.prototype,{setItemEvents:function(a,
  b,c,d,e){var f=this;(c?b:a.legendGroup).on("mouseover",function(){a.setState("hover");b.css(f.options.itemHoverStyle)}).on("mouseout",function(){b.css(a.visible?d:e);a.setState()}).on("click",function(b){var c=function(){a.setVisible()},b={browserEvent:b};a.firePointEvent?a.firePointEvent("legendItemClick",b,c):M(a,"legendItemClick",b,c)})},createCheckboxForItem:function(a){a.checkbox=Z("input",{type:"checkbox",checked:a.selected,defaultChecked:a.selected},this.options.itemCheckboxStyle,this.chart.container);
  N(a.checkbox,"click",function(b){M(a.series||a,"checkboxClick",{checked:b.target.checked,item:a},function(){a.select()})})}});P.legend.itemStyle.cursor="pointer";r(D.prototype,{showResetZoom:function(){var a=this,b=P.lang,c=a.options.chart.resetZoomButton,d=c.theme,e=d.states,f=c.relativeTo==="chart"?null:"plotBox";this.resetZoomButton=a.renderer.button(b.resetZoom,null,null,function(){a.zoomOut()},d,e&&e.hover).attr({align:c.position.align,title:b.resetZoomTitle}).add().align(c.position,!1,f)},zoomOut:function(){var a=
  this;M(a,"selection",{resetSelection:!0},function(){a.zoom()})},zoom:function(a){var b,c=this.pointer,d=!1,e;!a||a.resetSelection?m(this.axes,function(a){b=a.zoom()}):m(a.xAxis.concat(a.yAxis),function(a){var e=a.axis,h=e.isXAxis;if(c[h?"zoomX":"zoomY"]||c[h?"pinchX":"pinchY"])b=e.zoom(a.min,a.max),e.displayBtn&&(d=!0)});e=this.resetZoomButton;if(d&&!e)this.showResetZoom();else if(!d&&ca(e))this.resetZoomButton=e.destroy();b&&this.redraw(p(this.options.chart.animation,a&&a.animation,this.pointCount<
  100))},pan:function(a,b){var c=this,d=c.hoverPoints,e;d&&m(d,function(a){a.setState()});m(b==="xy"?[1,0]:[1],function(b){var d=a[b?"chartX":"chartY"],h=c[b?"xAxis":"yAxis"][0],i=c[b?"mouseDownX":"mouseDownY"],j=(h.pointRange||0)/2,k=h.getExtremes(),l=h.toValue(i-d,!0)+j,j=h.toValue(i+c[b?"plotWidth":"plotHeight"]-d,!0)-j,i=i>d;if(h.series.length&&(i||l>I(k.dataMin,k.min))&&(!i||j<t(k.dataMax,k.max)))h.setExtremes(l,j,!1,!1,{trigger:"pan"}),e=!0;c[b?"mouseDownX":"mouseDownY"]=d});e&&c.redraw(!1);F(c.container,
  {cursor:"move"})}});r(Ga.prototype,{select:function(a,b){var c=this,d=c.series,e=d.chart,a=p(a,!c.selected);c.firePointEvent(a?"select":"unselect",{accumulate:b},function(){c.selected=c.options.selected=a;d.options.data[Ma(c,d.data)]=c.options;c.setState(a&&"select");b||m(e.getSelectedPoints(),function(a){if(a.selected&&a!==c)a.selected=a.options.selected=!1,d.options.data[Ma(a,d.data)]=a.options,a.setState(""),a.firePointEvent("unselect")})})},onMouseOver:function(a){var b=this.series,c=b.chart,
  d=c.tooltip,e=c.hoverPoint;if(c.hoverSeries!==b)b.onMouseOver();if(e&&e!==this)e.onMouseOut();this.firePointEvent("mouseOver");d&&(!d.shared||b.noSharedTooltip)&&d.refresh(this,a);this.setState("hover");c.hoverPoint=this},onMouseOut:function(){var a=this.series.chart,b=a.hoverPoints;this.firePointEvent("mouseOut");if(!b||Ma(this,b)===-1)this.setState(),a.hoverPoint=null},importEvents:function(){if(!this.hasImportedEvents){var a=z(this.series.options.point,this.options).events,b;this.events=a;for(b in a)N(this,
  b,a[b]);this.hasImportedEvents=!0}},setState:function(a,b){var c=this.plotX,d=this.plotY,e=this.series,f=e.options.states,g=aa[e.type].marker&&e.options.marker,h=g&&!g.enabled,i=g&&g.states[a],j=i&&i.enabled===!1,k=e.stateMarkerGraphic,l=this.marker||{},n=e.chart,m=e.halo,p,a=a||"";p=this.pointAttr[a]||e.pointAttr[a];if(!(a===this.state&&!b||this.selected&&a!=="select"||f[a]&&f[a].enabled===!1||a&&(j||h&&i.enabled===!1)||a&&l.states&&l.states[a]&&l.states[a].enabled===!1)){if(this.graphic)g=g&&this.graphic.symbolName&&
  p.r,this.graphic.attr(z(p,g?{x:c-g,y:d-g,width:2*g,height:2*g}:{})),k&&k.hide();else{if(a&&i)if(g=i.radius,l=l.symbol||e.symbol,k&&k.currentSymbol!==l&&(k=k.destroy()),k)k[b?"animate":"attr"]({x:c-g,y:d-g});else if(l)e.stateMarkerGraphic=k=n.renderer.symbol(l,c-g,d-g,2*g,2*g).attr(p).add(e.markerGroup),k.currentSymbol=l;if(k)k[a&&n.isInsidePlot(c,d,n.inverted)?"show":"hide"]()}if((c=f[a]&&f[a].halo)&&c.size){if(!m)e.halo=m=n.renderer.path().add(n.seriesGroup);m.attr(r({fill:na(this.color||e.color).setOpacity(c.opacity).get()},
  c.attributes))[b?"animate":"attr"]({d:this.haloPath(c.size)})}else m&&m.attr({d:[]});this.state=a}},haloPath:function(a){var b=this.series,c=b.chart,d=b.getPlotBox(),e=c.inverted;return c.renderer.symbols.circle(d.translateX+(e?b.yAxis.len-this.plotY:this.plotX)-a,d.translateY+(e?b.xAxis.len-this.plotX:this.plotY)-a,a*2,a*2)}});r(Q.prototype,{onMouseOver:function(){var a=this.chart,b=a.hoverSeries;if(b&&b!==this)b.onMouseOut();this.options.events.mouseOver&&M(this,"mouseOver");this.setState("hover");
  a.hoverSeries=this},onMouseOut:function(){var a=this.options,b=this.chart,c=b.tooltip,d=b.hoverPoint;if(d)d.onMouseOut();this&&a.events.mouseOut&&M(this,"mouseOut");c&&!a.stickyTracking&&(!c.shared||this.noSharedTooltip)&&c.hide();this.setState();b.hoverSeries=null},setState:function(a){var b=this.options,c=this.graph,d=b.states,e=b.lineWidth,b=0,a=a||"";if(this.state!==a&&(this.state=a,!(d[a]&&d[a].enabled===!1)&&(a&&(e=d[a].lineWidth||e+(d[a].lineWidthPlus||0)),c&&!c.dashstyle))){a={"stroke-width":e};
  for(c.attr(a);this["zoneGraph"+b];)this["zoneGraph"+b].attr(a),b+=1}},setVisible:function(a,b){var c=this,d=c.chart,e=c.legendItem,f,g=d.options.chart.ignoreHiddenSeries,h=c.visible;f=(c.visible=a=c.userOptions.visible=a===u?!h:a)?"show":"hide";m(["group","dataLabelsGroup","markerGroup","tracker"],function(a){if(c[a])c[a][f]()});if(d.hoverSeries===c||(d.hoverPoint&&d.hoverPoint.series)===c)c.onMouseOut();e&&d.legend.colorizeItem(c,a);c.isDirty=!0;c.options.stacking&&m(d.series,function(a){if(a.options.stacking&&
  a.visible)a.isDirty=!0});m(c.linkedSeries,function(b){b.setVisible(a,!1)});if(g)d.isDirtyBox=!0;b!==!1&&d.redraw();M(c,f)},show:function(){this.setVisible(!0)},hide:function(){this.setVisible(!1)},select:function(a){this.selected=a=a===u?!this.selected:a;if(this.checkbox)this.checkbox.checked=a;M(this,a?"select":"unselect")},drawTracker:T.drawTrackerGraph});r(w,{Color:na,Point:Ga,Tick:Ta,Renderer:$a,SVGElement:K,SVGRenderer:ta,arrayMin:Pa,arrayMax:Fa,charts:X,dateFormat:Oa,error:ka,format:Ja,pathAnim:zb,
  getOptions:function(){return P},hasBidiBug:Nb,isTouchDevice:Jb,setOptions:function(a){P=z(!0,P,a);Cb();return P},addEvent:N,removeEvent:Y,createElement:Z,discardElement:Ra,css:F,each:m,map:Ua,merge:z,splat:ra,extendClass:ja,pInt:B,svg:ba,canvas:ea,vml:!ba&&!ea,product:"Highcharts",version:"4.1.5"})})();


/***/ },
/* 5 */
/***/ function(module, exports) {

  /**
   * Highcharts plugin for creating individual rounded corners.
   * 
   * Author: Torstein Honsi
   * Last revision: 2014-09-19
   * License: MIT License
   *
   * Known issues:
   * - Animation isn't working. To overcome that, create a method on the Renderer which points
   *   to a symbol definition, like it is currently done with "arc" in PieSeries.
   * - Dom exception on showing/hiding the series
   */
  (function (H) {
      H.wrap(H.seriesTypes.column.prototype, 'translate', function (proceed) {
          var options = this.options,
              rTopLeft = options.borderRadiusTopLeft || 0,
              rTopRight = options.borderRadiusTopRight || 0,
              rBottomRight = options.borderRadiusBottomRight || 0,
              rBottomLeft = options.borderRadiusBottomLeft || 0,
              topMargin = options.topMargin || 0,
              bottomMargin = options.bottomMargin || 0;

          proceed.call(this);

          if (rTopLeft || rTopRight || rBottomRight || rBottomLeft) {
              H.each(this.points, function (point) {
                  var shapeArgs = point.shapeArgs,
                      w = shapeArgs.width,
                      h = shapeArgs.height,
                      x = shapeArgs.x,
                      y = shapeArgs.y;

                  // Preserve the box for data labels
                  point.dlBox = point.shapeArgs;

                  point.shapeType = 'path';
                  point.shapeArgs = {
                      d: [
                          'M', x + rTopLeft, y + topMargin,
                          // top side
                          'L', x + w - rTopRight, y + topMargin,
                          // top right corner
                          'C', x + w - rTopRight / 2, y, x + w, y + rTopRight / 2, x + w, y + rTopRight,
                          // right side
                          'L', x + w, y + h - rBottomRight,
                          // bottom right corner
                          'C', x + w, y + h - rBottomRight / 2, x + w - rBottomRight / 2, y + h, x + w - rBottomRight, y + h + bottomMargin,
                          // bottom side
                          'L', x + rBottomLeft, y + h + bottomMargin,
                          // bottom left corner
                          'C', x + rBottomLeft / 2, y + h, x, y + h - rBottomLeft / 2, x, y + h - rBottomLeft,
                          // left side
                          'L', x, y + rTopLeft,
                          // top left corner
                          'C', x, y + rTopLeft / 2, x + rTopLeft / 2, y, x + rTopLeft, y,
                          'Z'
                      ]
                  };
                      
              });
          }
      });
  }(Highcharts));



/***/ },
/* 6 */
/***/ function(module, exports) {

  /* Tooltipster v3.3.0 */;(function(e,t,n){function s(t,n){this.bodyOverflowX;this.callbacks={hide:[],show:[]};this.checkInterval=null;this.Content;this.$el=e(t);this.$elProxy;this.elProxyPosition;this.enabled=true;this.options=e.extend({},i,n);this.mouseIsOverProxy=false;this.namespace="tooltipster-"+Math.round(Math.random()*1e5);this.Status="hidden";this.timerHide=null;this.timerShow=null;this.$tooltip;this.options.iconTheme=this.options.iconTheme.replace(".","");this.options.theme=this.options.theme.replace(".","");this._init()}function o(t,n){var r=true;e.each(t,function(e,i){if(typeof n[e]==="undefined"||t[e]!==n[e]){r=false;return false}});return r}function f(){return!a&&u}function l(){var e=n.body||n.documentElement,t=e.style,r="transition";if(typeof t[r]=="string"){return true}v=["Moz","Webkit","Khtml","O","ms"],r=r.charAt(0).toUpperCase()+r.substr(1);for(var i=0;i<v.length;i++){if(typeof t[v[i]+r]=="string"){return true}}return false}var r="tooltipster",i={animation:"fade",arrow:true,arrowColor:"",autoClose:true,content:null,contentAsHTML:false,contentCloning:true,debug:true,delay:200,minWidth:0,maxWidth:null,functionInit:function(e,t){},functionBefore:function(e,t){t()},functionReady:function(e,t){},functionAfter:function(e){},hideOnClick:false,icon:"(?)",iconCloning:true,iconDesktop:false,iconTouch:false,iconTheme:"tooltipster-icon",interactive:false,interactiveTolerance:350,multiple:false,offsetX:0,offsetY:0,onlyOne:false,position:"top",positionTracker:false,positionTrackerCallback:function(e){if(this.option("trigger")=="hover"&&this.option("autoClose")){this.hide()}},restoration:"current",speed:350,timer:0,theme:"tooltipster-default",touchDevices:true,trigger:"hover",updateAnimation:true};s.prototype={_init:function(){var t=this;if(n.querySelector){var r=null;if(t.$el.data("tooltipster-initialTitle")===undefined){r=t.$el.attr("title");if(r===undefined)r=null;t.$el.data("tooltipster-initialTitle",r)}if(t.options.content!==null){t._content_set(t.options.content)}else{t._content_set(r)}var i=t.options.functionInit.call(t.$el,t.$el,t.Content);if(typeof i!=="undefined")t._content_set(i);t.$el.removeAttr("title").addClass("tooltipstered");if(!u&&t.options.iconDesktop||u&&t.options.iconTouch){if(typeof t.options.icon==="string"){t.$elProxy=e('<span class="'+t.options.iconTheme+'"></span>');t.$elProxy.text(t.options.icon)}else{if(t.options.iconCloning)t.$elProxy=t.options.icon.clone(true);else t.$elProxy=t.options.icon}t.$elProxy.insertAfter(t.$el)}else{t.$elProxy=t.$el}if(t.options.trigger=="hover"){t.$elProxy.on("mouseenter."+t.namespace,function(){if(!f()||t.options.touchDevices){t.mouseIsOverProxy=true;t._show()}}).on("mouseleave."+t.namespace,function(){if(!f()||t.options.touchDevices){t.mouseIsOverProxy=false}});if(u&&t.options.touchDevices){t.$elProxy.on("touchstart."+t.namespace,function(){t._showNow()})}}else if(t.options.trigger=="click"){t.$elProxy.on("click."+t.namespace,function(){if(!f()||t.options.touchDevices){t._show()}})}}},_show:function(){var e=this;if(e.Status!="shown"&&e.Status!="appearing"){if(e.options.delay){e.timerShow=setTimeout(function(){if(e.options.trigger=="click"||e.options.trigger=="hover"&&e.mouseIsOverProxy){e._showNow()}},e.options.delay)}else e._showNow()}},_showNow:function(n){var r=this;r.options.functionBefore.call(r.$el,r.$el,function(){if(r.enabled&&r.Content!==null){if(n)r.callbacks.show.push(n);r.callbacks.hide=[];clearTimeout(r.timerShow);r.timerShow=null;clearTimeout(r.timerHide);r.timerHide=null;if(r.options.onlyOne){e(".tooltipstered").not(r.$el).each(function(t,n){var r=e(n),i=r.data("tooltipster-ns");e.each(i,function(e,t){var n=r.data(t),i=n.status(),s=n.option("autoClose");if(i!=="hidden"&&i!=="disappearing"&&s){n.hide()}})})}var i=function(){r.Status="shown";e.each(r.callbacks.show,function(e,t){t.call(r.$el)});r.callbacks.show=[]};if(r.Status!=="hidden"){var s=0;if(r.Status==="disappearing"){r.Status="appearing";if(l()){r.$tooltip.clearQueue().removeClass("tooltipster-dying").addClass("tooltipster-"+r.options.animation+"-show");if(r.options.speed>0)r.$tooltip.delay(r.options.speed);r.$tooltip.queue(i)}else{r.$tooltip.stop().fadeIn(i)}}else if(r.Status==="shown"){i()}}else{r.Status="appearing";var s=r.options.speed;r.bodyOverflowX=e("body").css("overflow-x");e("body").css("overflow-x","hidden");var o="tooltipster-"+r.options.animation,a="-webkit-transition-duration: "+r.options.speed+"ms; -webkit-animation-duration: "+r.options.speed+"ms; -moz-transition-duration: "+r.options.speed+"ms; -moz-animation-duration: "+r.options.speed+"ms; -o-transition-duration: "+r.options.speed+"ms; -o-animation-duration: "+r.options.speed+"ms; -ms-transition-duration: "+r.options.speed+"ms; -ms-animation-duration: "+r.options.speed+"ms; transition-duration: "+r.options.speed+"ms; animation-duration: "+r.options.speed+"ms;",f=r.options.minWidth?"min-width:"+Math.round(r.options.minWidth)+"px;":"",c=r.options.maxWidth?"max-width:"+Math.round(r.options.maxWidth)+"px;":"",h=r.options.interactive?"pointer-events: auto;":"";r.$tooltip=e('<div class="tooltipster-base '+r.options.theme+'" style="'+f+" "+c+" "+h+" "+a+'"><div class="tooltipster-content"></div></div>');if(l())r.$tooltip.addClass(o);r._content_insert();r.$tooltip.appendTo("body");r.reposition();r.options.functionReady.call(r.$el,r.$el,r.$tooltip);if(l()){r.$tooltip.addClass(o+"-show");if(r.options.speed>0)r.$tooltip.delay(r.options.speed);r.$tooltip.queue(i)}else{r.$tooltip.css("display","none").fadeIn(r.options.speed,i)}r._interval_set();e(t).on("scroll."+r.namespace+" resize."+r.namespace,function(){r.reposition()});if(r.options.autoClose){e("body").off("."+r.namespace);if(r.options.trigger=="hover"){if(u){setTimeout(function(){e("body").on("touchstart."+r.namespace,function(){r.hide()})},0)}if(r.options.interactive){if(u){r.$tooltip.on("touchstart."+r.namespace,function(e){e.stopPropagation()})}var p=null;r.$elProxy.add(r.$tooltip).on("mouseleave."+r.namespace+"-autoClose",function(){clearTimeout(p);p=setTimeout(function(){r.hide()},r.options.interactiveTolerance)}).on("mouseenter."+r.namespace+"-autoClose",function(){clearTimeout(p)})}else{r.$elProxy.on("mouseleave."+r.namespace+"-autoClose",function(){r.hide()})}if(r.options.hideOnClick){r.$elProxy.on("click."+r.namespace+"-autoClose",function(){r.hide()})}}else if(r.options.trigger=="click"){setTimeout(function(){e("body").on("click."+r.namespace+" touchstart."+r.namespace,function(){r.hide()})},0);if(r.options.interactive){r.$tooltip.on("click."+r.namespace+" touchstart."+r.namespace,function(e){e.stopPropagation()})}}}}if(r.options.timer>0){r.timerHide=setTimeout(function(){r.timerHide=null;r.hide()},r.options.timer+s)}}})},_interval_set:function(){var t=this;t.checkInterval=setInterval(function(){if(e("body").find(t.$el).length===0||e("body").find(t.$elProxy).length===0||t.Status=="hidden"||e("body").find(t.$tooltip).length===0){if(t.Status=="shown"||t.Status=="appearing")t.hide();t._interval_cancel()}else{if(t.options.positionTracker){var n=t._repositionInfo(t.$elProxy),r=false;if(o(n.dimension,t.elProxyPosition.dimension)){if(t.$elProxy.css("position")==="fixed"){if(o(n.position,t.elProxyPosition.position))r=true}else{if(o(n.offset,t.elProxyPosition.offset))r=true}}if(!r){t.reposition();t.options.positionTrackerCallback.call(t,t.$el)}}}},200)},_interval_cancel:function(){clearInterval(this.checkInterval);this.checkInterval=null},_content_set:function(e){if(typeof e==="object"&&e!==null&&this.options.contentCloning){e=e.clone(true)}this.Content=e},_content_insert:function(){var e=this,t=this.$tooltip.find(".tooltipster-content");if(typeof e.Content==="string"&&!e.options.contentAsHTML){t.text(e.Content)}else{t.empty().append(e.Content)}},_update:function(e){var t=this;t._content_set(e);if(t.Content!==null){if(t.Status!=="hidden"){t._content_insert();t.reposition();if(t.options.updateAnimation){if(l()){t.$tooltip.css({width:"","-webkit-transition":"all "+t.options.speed+"ms, width 0ms, height 0ms, left 0ms, top 0ms","-moz-transition":"all "+t.options.speed+"ms, width 0ms, height 0ms, left 0ms, top 0ms","-o-transition":"all "+t.options.speed+"ms, width 0ms, height 0ms, left 0ms, top 0ms","-ms-transition":"all "+t.options.speed+"ms, width 0ms, height 0ms, left 0ms, top 0ms",transition:"all "+t.options.speed+"ms, width 0ms, height 0ms, left 0ms, top 0ms"}).addClass("tooltipster-content-changing");setTimeout(function(){if(t.Status!="hidden"){t.$tooltip.removeClass("tooltipster-content-changing");setTimeout(function(){if(t.Status!=="hidden"){t.$tooltip.css({"-webkit-transition":t.options.speed+"ms","-moz-transition":t.options.speed+"ms","-o-transition":t.options.speed+"ms","-ms-transition":t.options.speed+"ms",transition:t.options.speed+"ms"})}},t.options.speed)}},t.options.speed)}else{t.$tooltip.fadeTo(t.options.speed,.5,function(){if(t.Status!="hidden"){t.$tooltip.fadeTo(t.options.speed,1)}})}}}}else{t.hide()}},_repositionInfo:function(e){return{dimension:{height:e.outerHeight(false),width:e.outerWidth(false)},offset:e.offset(),position:{left:parseInt(e.css("left")),top:parseInt(e.css("top"))}}},hide:function(n){var r=this;if(n)r.callbacks.hide.push(n);r.callbacks.show=[];clearTimeout(r.timerShow);r.timerShow=null;clearTimeout(r.timerHide);r.timerHide=null;var i=function(){e.each(r.callbacks.hide,function(e,t){t.call(r.$el)});r.callbacks.hide=[]};if(r.Status=="shown"||r.Status=="appearing"){r.Status="disappearing";var s=function(){r.Status="hidden";if(typeof r.Content=="object"&&r.Content!==null){r.Content.detach()}r.$tooltip.remove();r.$tooltip=null;e(t).off("."+r.namespace);e("body").off("."+r.namespace).css("overflow-x",r.bodyOverflowX);e("body").off("."+r.namespace);r.$elProxy.off("."+r.namespace+"-autoClose");r.options.functionAfter.call(r.$el,r.$el);i()};if(l()){r.$tooltip.clearQueue().removeClass("tooltipster-"+r.options.animation+"-show").addClass("tooltipster-dying");if(r.options.speed>0)r.$tooltip.delay(r.options.speed);r.$tooltip.queue(s)}else{r.$tooltip.stop().fadeOut(r.options.speed,s)}}else if(r.Status=="hidden"){i()}return r},show:function(e){this._showNow(e);return this},update:function(e){return this.content(e)},content:function(e){if(typeof e==="undefined"){return this.Content}else{this._update(e);return this}},reposition:function(){var n=this;if(e("body").find(n.$tooltip).length!==0){n.$tooltip.css("width","");n.elProxyPosition=n._repositionInfo(n.$elProxy);var r=null,i=e(t).width(),s=n.elProxyPosition,o=n.$tooltip.outerWidth(false),u=n.$tooltip.innerWidth()+1,a=n.$tooltip.outerHeight(false);if(n.$elProxy.is("area")){var f=n.$elProxy.attr("shape"),l=n.$elProxy.parent().attr("name"),c=e('img[usemap="#'+l+'"]'),h=c.offset().left,p=c.offset().top,d=n.$elProxy.attr("coords")!==undefined?n.$elProxy.attr("coords").split(","):undefined;if(f=="circle"){var v=parseInt(d[0]),m=parseInt(d[1]),g=parseInt(d[2]);s.dimension.height=g*2;s.dimension.width=g*2;s.offset.top=p+m-g;s.offset.left=h+v-g}else if(f=="rect"){var v=parseInt(d[0]),m=parseInt(d[1]),y=parseInt(d[2]),b=parseInt(d[3]);s.dimension.height=b-m;s.dimension.width=y-v;s.offset.top=p+m;s.offset.left=h+v}else if(f=="poly"){var w=[],E=[],S=0,x=0,T=0,N=0,C="even";for(var k=0;k<d.length;k++){var L=parseInt(d[k]);if(C=="even"){if(L>T){T=L;if(k===0){S=T}}if(L<S){S=L}C="odd"}else{if(L>N){N=L;if(k==1){x=N}}if(L<x){x=L}C="even"}}s.dimension.height=N-x;s.dimension.width=T-S;s.offset.top=p+x;s.offset.left=h+S}else{s.dimension.height=c.outerHeight(false);s.dimension.width=c.outerWidth(false);s.offset.top=p;s.offset.left=h}}var A=0,O=0,M=0,_=parseInt(n.options.offsetY),D=parseInt(n.options.offsetX),P=n.options.position;function H(){var n=e(t).scrollLeft();if(A-n<0){r=A-n;A=n}if(A+o-n>i){r=A-(i+n-o);A=i+n-o}}function B(n,r){if(s.offset.top-e(t).scrollTop()-a-_-12<0&&r.indexOf("top")>-1){P=n}if(s.offset.top+s.dimension.height+a+12+_>e(t).scrollTop()+e(t).height()&&r.indexOf("bottom")>-1){P=n;M=s.offset.top-a-_-12}}if(P=="top"){var j=s.offset.left+o-(s.offset.left+s.dimension.width);A=s.offset.left+D-j/2;M=s.offset.top-a-_-12;H();B("bottom","top")}if(P=="top-left"){A=s.offset.left+D;M=s.offset.top-a-_-12;H();B("bottom-left","top-left")}if(P=="top-right"){A=s.offset.left+s.dimension.width+D-o;M=s.offset.top-a-_-12;H();B("bottom-right","top-right")}if(P=="bottom"){var j=s.offset.left+o-(s.offset.left+s.dimension.width);A=s.offset.left-j/2+D;M=s.offset.top+s.dimension.height+_+12;H();B("top","bottom")}if(P=="bottom-left"){A=s.offset.left+D;M=s.offset.top+s.dimension.height+_+12;H();B("top-left","bottom-left")}if(P=="bottom-right"){A=s.offset.left+s.dimension.width+D-o;M=s.offset.top+s.dimension.height+_+12;H();B("top-right","bottom-right")}if(P=="left"){A=s.offset.left-D-o-12;O=s.offset.left+D+s.dimension.width+12;var F=s.offset.top+a-(s.offset.top+s.dimension.height);M=s.offset.top-F/2-_;if(A<0&&O+o>i){var I=parseFloat(n.$tooltip.css("border-width"))*2,q=o+A-I;n.$tooltip.css("width",q+"px");a=n.$tooltip.outerHeight(false);A=s.offset.left-D-q-12-I;F=s.offset.top+a-(s.offset.top+s.dimension.height);M=s.offset.top-F/2-_}else if(A<0){A=s.offset.left+D+s.dimension.width+12;r="left"}}if(P=="right"){A=s.offset.left+D+s.dimension.width+12;O=s.offset.left-D-o-12;var F=s.offset.top+a-(s.offset.top+s.dimension.height);M=s.offset.top-F/2-_;if(A+o>i&&O<0){var I=parseFloat(n.$tooltip.css("border-width"))*2,q=i-A-I;n.$tooltip.css("width",q+"px");a=n.$tooltip.outerHeight(false);F=s.offset.top+a-(s.offset.top+s.dimension.height);M=s.offset.top-F/2-_}else if(A+o>i){A=s.offset.left-D-o-12;r="right"}}if(n.options.arrow){var R="tooltipster-arrow-"+P;if(n.options.arrowColor.length<1){var U=n.$tooltip.css("background-color")}else{var U=n.options.arrowColor}if(!r){r=""}else if(r=="left"){R="tooltipster-arrow-right";r=""}else if(r=="right"){R="tooltipster-arrow-left";r=""}else{r="left:"+Math.round(r)+"px;"}if(P=="top"||P=="top-left"||P=="top-right"){var z=parseFloat(n.$tooltip.css("border-bottom-width")),W=n.$tooltip.css("border-bottom-color")}else if(P=="bottom"||P=="bottom-left"||P=="bottom-right"){var z=parseFloat(n.$tooltip.css("border-top-width")),W=n.$tooltip.css("border-top-color")}else if(P=="left"){var z=parseFloat(n.$tooltip.css("border-right-width")),W=n.$tooltip.css("border-right-color")}else if(P=="right"){var z=parseFloat(n.$tooltip.css("border-left-width")),W=n.$tooltip.css("border-left-color")}else{var z=parseFloat(n.$tooltip.css("border-bottom-width")),W=n.$tooltip.css("border-bottom-color")}if(z>1){z++}var X="";if(z!==0){var V="",J="border-color: "+W+";";if(R.indexOf("bottom")!==-1){V="margin-top: -"+Math.round(z)+"px;"}else if(R.indexOf("top")!==-1){V="margin-bottom: -"+Math.round(z)+"px;"}else if(R.indexOf("left")!==-1){V="margin-right: -"+Math.round(z)+"px;"}else if(R.indexOf("right")!==-1){V="margin-left: -"+Math.round(z)+"px;"}X='<span class="tooltipster-arrow-border" style="'+V+" "+J+';"></span>'}n.$tooltip.find(".tooltipster-arrow").remove();var K='<div class="'+R+' tooltipster-arrow" style="'+r+'">'+X+'<span style="border-color:'+U+';"></span></div>';n.$tooltip.append(K)}n.$tooltip.css({top:Math.round(M)+"px",left:Math.round(A)+"px"})}return n},enable:function(){this.enabled=true;return this},disable:function(){this.hide();this.enabled=false;return this},destroy:function(){var t=this;t.hide();if(t.$el[0]!==t.$elProxy[0]){t.$elProxy.remove()}t.$el.removeData(t.namespace).off("."+t.namespace);var n=t.$el.data("tooltipster-ns");if(n.length===1){var r=null;if(t.options.restoration==="previous"){r=t.$el.data("tooltipster-initialTitle")}else if(t.options.restoration==="current"){r=typeof t.Content==="string"?t.Content:e("<div></div>").append(t.Content).html()}if(r){t.$el.attr("title",r)}t.$el.removeClass("tooltipstered").removeData("tooltipster-ns").removeData("tooltipster-initialTitle")}else{n=e.grep(n,function(e,n){return e!==t.namespace});t.$el.data("tooltipster-ns",n)}return t},elementIcon:function(){return this.$el[0]!==this.$elProxy[0]?this.$elProxy[0]:undefined},elementTooltip:function(){return this.$tooltip?this.$tooltip[0]:undefined},option:function(e,t){if(typeof t=="undefined")return this.options[e];else{this.options[e]=t;return this}},status:function(){return this.Status}};e.fn[r]=function(){var t=arguments;if(this.length===0){if(typeof t[0]==="string"){var n=true;switch(t[0]){case"setDefaults":e.extend(i,t[1]);break;default:n=false;break}if(n)return true;else return this}else{return this}}else{if(typeof t[0]==="string"){var r="#*$~&";this.each(function(){var n=e(this).data("tooltipster-ns"),i=n?e(this).data(n[0]):null;if(i){if(typeof i[t[0]]==="function"){var s=i[t[0]](t[1],t[2])}else{throw new Error('Unknown method .tooltipster("'+t[0]+'")')}if(s!==i){r=s;return false}}else{throw new Error("You called Tooltipster's \""+t[0]+'" method on an uninitialized element')}});return r!=="#*$~&"?r:this}else{var o=[],u=t[0]&&typeof t[0].multiple!=="undefined",a=u&&t[0].multiple||!u&&i.multiple,f=t[0]&&typeof t[0].debug!=="undefined",l=f&&t[0].debug||!f&&i.debug;this.each(function(){var n=false,r=e(this).data("tooltipster-ns"),i=null;if(!r){n=true}else if(a){n=true}else if(l){console.log('Tooltipster: one or more tooltips are already attached to this element: ignoring. Use the "multiple" option to attach more tooltips.')}if(n){i=new s(this,t[0]);if(!r)r=[];r.push(i.namespace);e(this).data("tooltipster-ns",r);e(this).data(i.namespace,i)}o.push(i)});if(a)return o;else return this}}};var u=!!("ontouchstart"in t);var a=false;e("body").one("mousemove",function(){a=true})})(jQuery,window,document);

/***/ },
/* 7 */
/***/ function(module, exports) {

  /*!
   * tablesort v3.0.2 (2015-02-25)
   * http://tristen.ca/tablesort/demo/
   * Copyright (c) 2015 ; Licensed MIT
  */!function(){function a(a,b){if(!a||"TABLE"!==a.tagName)throw new Error("Element must be a table");this.init(a,b||{})}var b=[],c=function(a){var b;return window.CustomEvent&&"function"==typeof window.CustomEvent?b=new CustomEvent(a):(b=document.createEvent("CustomEvent"),b.initCustomEvent(a,!1,!1,void 0)),b},d=function(a){return a.getAttribute("data-sort")||a.textContent||a.innerText||""},e=function(a,b){return a=a.toLowerCase(),b=b.toLowerCase(),a===b?0:b>a?1:-1},f=function(a,b){return function(c,d){var e=a(c.td,d.td);return 0===e?b?d.index-c.index:c.index-d.index:e}};a.extend=function(a,c,d){if("function"!=typeof c||"function"!=typeof d)throw new Error("Pattern and sort must be a function");b.push({name:a,pattern:c,sort:d})},a.prototype={init:function(a,b){var c,d,e,f,g=this;if(g.table=a,g.thead=!1,g.options=b,a.rows&&a.rows.length>0&&(a.tHead&&a.tHead.rows.length>0?(c=a.tHead.rows[a.tHead.rows.length-1],g.thead=!0):c=a.rows[0]),c){var h=function(){g.current&&g.current!==this&&(g.current.classList.remove("sort-up"),g.current.classList.remove("sort-down")),g.current=this,g.sortTable(this)};for(e=0;e<c.cells.length;e++)f=c.cells[e],f.classList.contains("no-sort")||(f.classList.add("sort-header"),f.addEventListener("click",h,!1),f.classList.contains("sort-default")&&(d=f));d&&(g.current=d,g.sortTable(d))}},sortTable:function(a,g){var h=this,i=a.cellIndex,j=e,k="",l=[],m=h.thead?0:1,n=a.getAttribute("data-sort-method");if(h.table.dispatchEvent(c("beforeSort")),!(h.table.rows.length<2)){if(!n){for(;l.length<3&&m<h.table.tBodies[0].rows.length;)k=d(h.table.tBodies[0].rows[m].cells[i]),k=k.trim(),k.length>0&&l.push(k),m++;if(!l)return}for(m=0;m<b.length;m++)if(k=b[m],n){if(k.name===n){j=k.sort;break}}else if(l.every(k.pattern)){j=k.sort;break}h.col=i;var o,p,q=[],r={},s=0,t=0;for(m=0;m<h.table.tBodies.length;m++)for(o=0;o<h.table.tBodies[m].rows.length;o++)k=h.table.tBodies[m].rows[o],k.classList.contains("no-sort")?r[s]=k:q.push({tr:k,td:d(k.cells[h.col]),index:s}),s++;for(g?p=a.classList.contains("sort-up")?"sort-up":"sort-down":(p=a.classList.contains("sort-up")?"sort-down":a.classList.contains("sort-down")?"sort-up":h.options.descending?"sort-up":"sort-down",a.classList.remove("sort-down"===p?"sort-up":"sort-down"),a.classList.add(p)),"sort-down"===p?(q.sort(f(j,!0)),q.reverse()):q.sort(f(j,!1)),m=0;s>m;m++)r[m]?(k=r[m],t++):k=q[m-t].tr,h.table.tBodies[0].appendChild(k);h.table.dispatchEvent(c("afterSort"))}},refresh:function(){void 0!==this.current&&this.sortTable(this.current,!0)}},"undefined"!=typeof module&&module.exports?module.exports=a:window.Tablesort=a}();

/***/ },
/* 8 */
/***/ function(module, exports) {

  (function(){
    var cleanNumber = function(i) {
      return i.replace(/[^\-?0-9.]/g, '');
    },

    compareNumber = function(a, b) {
      a = parseFloat(a);
      b = parseFloat(b);

      a = isNaN(a) ? 0 : a;
      b = isNaN(b) ? 0 : b;

      return a - b;
    };

    Tablesort.extend('number', function(item) {
      return item.match(/^-?[£\x24Û¢´€]?\d+\s*([,\.]\d{0,2})/) || // Prefixed currency
        item.match(/^-?\d+\s*([,\.]\d{0,2})?[£\x24Û¢´€]/) || // Suffixed currency
        item.match(/^-?(\d)*-?([,\.]){0,1}-?(\d)+([E,e][\-+][\d]+)?%?$/); // Number
    }, function(a, b) {
      a = cleanNumber(a);
      b = cleanNumber(b);

      return compareNumber(b, a);
    });
  }());


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function defineMustache(global,factory){if(typeof exports==="object"&&exports&&typeof exports.nodeName!=="string"){factory(exports)}else if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))}else{global.Mustache={};factory(Mustache)}})(this,function mustacheFactory(mustache){var objectToString=Object.prototype.toString;var isArray=Array.isArray||function isArrayPolyfill(object){return objectToString.call(object)==="[object Array]"};function isFunction(object){return typeof object==="function"}function typeStr(obj){return isArray(obj)?"array":typeof obj}function escapeRegExp(string){return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function hasProperty(obj,propName){return obj!=null&&typeof obj==="object"&&propName in obj}var regExpTest=RegExp.prototype.test;function testRegExp(re,string){return regExpTest.call(re,string)}var nonSpaceRe=/\S/;function isWhitespace(string){return!testRegExp(nonSpaceRe,string)}var entityMap={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function escapeHtml(string){return String(string).replace(/[&<>"'\/]/g,function fromEntityMap(s){return entityMap[s]})}var whiteRe=/\s*/;var spaceRe=/\s+/;var equalsRe=/\s*=/;var curlyRe=/\s*\}/;var tagRe=/#|\^|\/|>|\{|&|=|!/;function parseTemplate(template,tags){if(!template)return[];var sections=[];var tokens=[];var spaces=[];var hasTag=false;var nonSpace=false;function stripSpace(){if(hasTag&&!nonSpace){while(spaces.length)delete tokens[spaces.pop()]}else{spaces=[]}hasTag=false;nonSpace=false}var openingTagRe,closingTagRe,closingCurlyRe;function compileTags(tagsToCompile){if(typeof tagsToCompile==="string")tagsToCompile=tagsToCompile.split(spaceRe,2);if(!isArray(tagsToCompile)||tagsToCompile.length!==2)throw new Error("Invalid tags: "+tagsToCompile);openingTagRe=new RegExp(escapeRegExp(tagsToCompile[0])+"\\s*");closingTagRe=new RegExp("\\s*"+escapeRegExp(tagsToCompile[1]));closingCurlyRe=new RegExp("\\s*"+escapeRegExp("}"+tagsToCompile[1]))}compileTags(tags||mustache.tags);var scanner=new Scanner(template);var start,type,value,chr,token,openSection;while(!scanner.eos()){start=scanner.pos;value=scanner.scanUntil(openingTagRe);if(value){for(var i=0,valueLength=value.length;i<valueLength;++i){chr=value.charAt(i);if(isWhitespace(chr)){spaces.push(tokens.length)}else{nonSpace=true}tokens.push(["text",chr,start,start+1]);start+=1;if(chr==="\n")stripSpace()}}if(!scanner.scan(openingTagRe))break;hasTag=true;type=scanner.scan(tagRe)||"name";scanner.scan(whiteRe);if(type==="="){value=scanner.scanUntil(equalsRe);scanner.scan(equalsRe);scanner.scanUntil(closingTagRe)}else if(type==="{"){value=scanner.scanUntil(closingCurlyRe);scanner.scan(curlyRe);scanner.scanUntil(closingTagRe);type="&"}else{value=scanner.scanUntil(closingTagRe)}if(!scanner.scan(closingTagRe))throw new Error("Unclosed tag at "+scanner.pos);token=[type,value,start,scanner.pos];tokens.push(token);if(type==="#"||type==="^"){sections.push(token)}else if(type==="/"){openSection=sections.pop();if(!openSection)throw new Error('Unopened section "'+value+'" at '+start);if(openSection[1]!==value)throw new Error('Unclosed section "'+openSection[1]+'" at '+start)}else if(type==="name"||type==="{"||type==="&"){nonSpace=true}else if(type==="="){compileTags(value)}}openSection=sections.pop();if(openSection)throw new Error('Unclosed section "'+openSection[1]+'" at '+scanner.pos);return nestTokens(squashTokens(tokens))}function squashTokens(tokens){var squashedTokens=[];var token,lastToken;for(var i=0,numTokens=tokens.length;i<numTokens;++i){token=tokens[i];if(token){if(token[0]==="text"&&lastToken&&lastToken[0]==="text"){lastToken[1]+=token[1];lastToken[3]=token[3]}else{squashedTokens.push(token);lastToken=token}}}return squashedTokens}function nestTokens(tokens){var nestedTokens=[];var collector=nestedTokens;var sections=[];var token,section;for(var i=0,numTokens=tokens.length;i<numTokens;++i){token=tokens[i];switch(token[0]){case"#":case"^":collector.push(token);sections.push(token);collector=token[4]=[];break;case"/":section=sections.pop();section[5]=token[2];collector=sections.length>0?sections[sections.length-1][4]:nestedTokens;break;default:collector.push(token)}}return nestedTokens}function Scanner(string){this.string=string;this.tail=string;this.pos=0}Scanner.prototype.eos=function eos(){return this.tail===""};Scanner.prototype.scan=function scan(re){var match=this.tail.match(re);if(!match||match.index!==0)return"";var string=match[0];this.tail=this.tail.substring(string.length);this.pos+=string.length;return string};Scanner.prototype.scanUntil=function scanUntil(re){var index=this.tail.search(re),match;switch(index){case-1:match=this.tail;this.tail="";break;case 0:match="";break;default:match=this.tail.substring(0,index);this.tail=this.tail.substring(index)}this.pos+=match.length;return match};function Context(view,parentContext){this.view=view;this.cache={".":this.view};this.parent=parentContext}Context.prototype.push=function push(view){return new Context(view,this)};Context.prototype.lookup=function lookup(name){var cache=this.cache;var value;if(cache.hasOwnProperty(name)){value=cache[name]}else{var context=this,names,index,lookupHit=false;while(context){if(name.indexOf(".")>0){value=context.view;names=name.split(".");index=0;while(value!=null&&index<names.length){if(index===names.length-1)lookupHit=hasProperty(value,names[index]);value=value[names[index++]]}}else{value=context.view[name];lookupHit=hasProperty(context.view,name)}if(lookupHit)break;context=context.parent}cache[name]=value}if(isFunction(value))value=value.call(this.view);return value};function Writer(){this.cache={}}Writer.prototype.clearCache=function clearCache(){this.cache={}};Writer.prototype.parse=function parse(template,tags){var cache=this.cache;var tokens=cache[template];if(tokens==null)tokens=cache[template]=parseTemplate(template,tags);return tokens};Writer.prototype.render=function render(template,view,partials){var tokens=this.parse(template);var context=view instanceof Context?view:new Context(view);return this.renderTokens(tokens,context,partials,template)};Writer.prototype.renderTokens=function renderTokens(tokens,context,partials,originalTemplate){var buffer="";var token,symbol,value;for(var i=0,numTokens=tokens.length;i<numTokens;++i){value=undefined;token=tokens[i];symbol=token[0];if(symbol==="#")value=this.renderSection(token,context,partials,originalTemplate);else if(symbol==="^")value=this.renderInverted(token,context,partials,originalTemplate);else if(symbol===">")value=this.renderPartial(token,context,partials,originalTemplate);else if(symbol==="&")value=this.unescapedValue(token,context);else if(symbol==="name")value=this.escapedValue(token,context);else if(symbol==="text")value=this.rawValue(token);if(value!==undefined)buffer+=value}return buffer};Writer.prototype.renderSection=function renderSection(token,context,partials,originalTemplate){var self=this;var buffer="";var value=context.lookup(token[1]);function subRender(template){return self.render(template,context,partials)}if(!value)return;if(isArray(value)){for(var j=0,valueLength=value.length;j<valueLength;++j){buffer+=this.renderTokens(token[4],context.push(value[j]),partials,originalTemplate)}}else if(typeof value==="object"||typeof value==="string"||typeof value==="number"){buffer+=this.renderTokens(token[4],context.push(value),partials,originalTemplate)}else if(isFunction(value)){if(typeof originalTemplate!=="string")throw new Error("Cannot use higher-order sections without the original template");value=value.call(context.view,originalTemplate.slice(token[3],token[5]),subRender);if(value!=null)buffer+=value}else{buffer+=this.renderTokens(token[4],context,partials,originalTemplate)}return buffer};Writer.prototype.renderInverted=function renderInverted(token,context,partials,originalTemplate){var value=context.lookup(token[1]);if(!value||isArray(value)&&value.length===0)return this.renderTokens(token[4],context,partials,originalTemplate)};Writer.prototype.renderPartial=function renderPartial(token,context,partials){if(!partials)return;var value=isFunction(partials)?partials(token[1]):partials[token[1]];if(value!=null)return this.renderTokens(this.parse(value),context,partials,value)};Writer.prototype.unescapedValue=function unescapedValue(token,context){var value=context.lookup(token[1]);if(value!=null)return value};Writer.prototype.escapedValue=function escapedValue(token,context){var value=context.lookup(token[1]);if(value!=null)return mustache.escape(value)};Writer.prototype.rawValue=function rawValue(token){return token[1]};mustache.name="mustache.js";mustache.version="2.1.3";mustache.tags=["{{","}}"];var defaultWriter=new Writer;mustache.clearCache=function clearCache(){return defaultWriter.clearCache()};mustache.parse=function parse(template,tags){return defaultWriter.parse(template,tags)};mustache.render=function render(template,view,partials){if(typeof template!=="string"){throw new TypeError('Invalid template! Template should be a "string" '+'but "'+typeStr(template)+'" was given as the first '+"argument for mustache#render(template, view, partials)")}return defaultWriter.render(template,view,partials)};mustache.to_html=function to_html(template,view,partials,send){var result=mustache.render(template,view,partials);if(isFunction(send)){send(result)}else{return result}};mustache.escape=escapeHtml;mustache.Scanner=Scanner;mustache.Context=Context;mustache.Writer=Writer});


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
   * JavaScript Cookie v2.0.3
   * https://github.com/js-cookie/js-cookie
   *
   * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
   * Released under the MIT license
   */
  (function (factory) {
    if (true) {
      !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      var _OldCookies = window.Cookies;
      var api = window.Cookies = factory();
      api.noConflict = function () {
        window.Cookies = _OldCookies;
        return api;
      };
    }
  }(function () {
    function extend () {
      var i = 0;
      var result = {};
      for (; i < arguments.length; i++) {
        var attributes = arguments[ i ];
        for (var key in attributes) {
          result[key] = attributes[key];
        }
      }
      return result;
    }

    function init (converter) {
      function api (key, value, attributes) {
        var result;

        // Write

        if (arguments.length > 1) {
          attributes = extend({
            path: '/'
          }, api.defaults, attributes);

          if (typeof attributes.expires === 'number') {
            var expires = new Date();
            expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
            attributes.expires = expires;
          }

          try {
            result = JSON.stringify(value);
            if (/^[\{\[]/.test(result)) {
              value = result;
            }
          } catch (e) {}

          value = encodeURIComponent(String(value));
          value = value.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

          key = encodeURIComponent(String(key));
          key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
          key = key.replace(/[\(\)]/g, escape);

          return (document.cookie = [
            key, '=', value,
            attributes.expires && '; expires=' + attributes.expires.toUTCString(), // use expires attribute, max-age is not supported by IE
            attributes.path    && '; path=' + attributes.path,
            attributes.domain  && '; domain=' + attributes.domain,
            attributes.secure ? '; secure' : ''
          ].join(''));
        }

        // Read

        if (!key) {
          result = {};
        }

        // To prevent the for loop in the first place assign an empty array
        // in case there are no cookies at all. Also prevents odd result when
        // calling "get()"
        var cookies = document.cookie ? document.cookie.split('; ') : [];
        var rdecode = /(%[0-9A-Z]{2})+/g;
        var i = 0;

        for (; i < cookies.length; i++) {
          var parts = cookies[i].split('=');
          var name = parts[0].replace(rdecode, decodeURIComponent);
          var cookie = parts.slice(1).join('=');

          if (cookie.charAt(0) === '"') {
            cookie = cookie.slice(1, -1);
          }

          try {
            cookie = converter && converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);

            if (this.json) {
              try {
                cookie = JSON.parse(cookie);
              } catch (e) {}
            }

            if (key === name) {
              result = cookie;
              break;
            }

            if (!key) {
              result[name] = cookie;
            }
          } catch (e) {}
        }

        return result;
      }

      api.get = api.set = api;
      api.getJSON = function () {
        return api.apply({
          json: true
        }, [].slice.call(arguments));
      };
      api.defaults = {};

      api.remove = function (key, attributes) {
        api(key, '', extend(attributes, {
          expires: -1
        }));
      };

      api.withConverter = init;

      return api;
    }

    return init();
  }));


/***/ },
/* 11 */
/***/ function(module, exports) {

  /*
   * classList.js: Cross-browser full element.classList implementation.
   * 1.1.20150312
   *
   * By Eli Grey, http://eligrey.com
   * License: Dedicated to the public domain.
   *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md
   */

  /*global self, document, DOMException */

  /*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */

  if ("document" in self) {

  // Full polyfill for browsers with no classList support
  if (!("classList" in document.createElement("_"))) {

  (function (view) {

  "use strict";

  if (!('Element' in view)) return;

  var
      classListProp = "classList"
    , protoProp = "prototype"
    , elemCtrProto = view.Element[protoProp]
    , objCtr = Object
    , strTrim = String[protoProp].trim || function () {
      return this.replace(/^\s+|\s+$/g, "");
    }
    , arrIndexOf = Array[protoProp].indexOf || function (item) {
      var
          i = 0
        , len = this.length
      ;
      for (; i < len; i++) {
        if (i in this && this[i] === item) {
          return i;
        }
      }
      return -1;
    }
    // Vendors: please allow content code to instantiate DOMExceptions
    , DOMEx = function (type, message) {
      this.name = type;
      this.code = DOMException[type];
      this.message = message;
    }
    , checkTokenAndGetIndex = function (classList, token) {
      if (token === "") {
        throw new DOMEx(
            "SYNTAX_ERR"
          , "An invalid or illegal string was specified"
        );
      }
      if (/\s/.test(token)) {
        throw new DOMEx(
            "INVALID_CHARACTER_ERR"
          , "String contains an invalid character"
        );
      }
      return arrIndexOf.call(classList, token);
    }
    , ClassList = function (elem) {
      var
          trimmedClasses = strTrim.call(elem.getAttribute("class") || "")
        , classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []
        , i = 0
        , len = classes.length
      ;
      for (; i < len; i++) {
        this.push(classes[i]);
      }
      this._updateClassName = function () {
        elem.setAttribute("class", this.toString());
      };
    }
    , classListProto = ClassList[protoProp] = []
    , classListGetter = function () {
      return new ClassList(this);
    }
  ;
  // Most DOMException implementations don't allow calling DOMException's toString()
  // on non-DOMExceptions. Error's toString() is sufficient here.
  DOMEx[protoProp] = Error[protoProp];
  classListProto.item = function (i) {
    return this[i] || null;
  };
  classListProto.contains = function (token) {
    token += "";
    return checkTokenAndGetIndex(this, token) !== -1;
  };
  classListProto.add = function () {
    var
        tokens = arguments
      , i = 0
      , l = tokens.length
      , token
      , updated = false
    ;
    do {
      token = tokens[i] + "";
      if (checkTokenAndGetIndex(this, token) === -1) {
        this.push(token);
        updated = true;
      }
    }
    while (++i < l);

    if (updated) {
      this._updateClassName();
    }
  };
  classListProto.remove = function () {
    var
        tokens = arguments
      , i = 0
      , l = tokens.length
      , token
      , updated = false
      , index
    ;
    do {
      token = tokens[i] + "";
      index = checkTokenAndGetIndex(this, token);
      while (index !== -1) {
        this.splice(index, 1);
        updated = true;
        index = checkTokenAndGetIndex(this, token);
      }
    }
    while (++i < l);

    if (updated) {
      this._updateClassName();
    }
  };
  classListProto.toggle = function (token, force) {
    token += "";

    var
        result = this.contains(token)
      , method = result ?
        force !== true && "remove"
      :
        force !== false && "add"
    ;

    if (method) {
      this[method](token);
    }

    if (force === true || force === false) {
      return force;
    } else {
      return !result;
    }
  };
  classListProto.toString = function () {
    return this.join(" ");
  };

  if (objCtr.defineProperty) {
    var classListPropDesc = {
        get: classListGetter
      , enumerable: true
      , configurable: true
    };
    try {
      objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
    } catch (ex) { // IE 8 doesn't support enumerable:true
      if (ex.number === -0x7FF5EC54) {
        classListPropDesc.enumerable = false;
        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
      }
    }
  } else if (objCtr[protoProp].__defineGetter__) {
    elemCtrProto.__defineGetter__(classListProp, classListGetter);
  }

  }(self));

  } else {
  // There is full or partial native classList support, so just check if we need
  // to normalize the add/remove and toggle APIs.

  (function () {
    "use strict";

    var testElement = document.createElement("_");

    testElement.classList.add("c1", "c2");

    // Polyfill for IE 10/11 and Firefox <26, where classList.add and
    // classList.remove exist but support only one argument at a time.
    if (!testElement.classList.contains("c2")) {
      var createMethod = function(method) {
        var original = DOMTokenList.prototype[method];

        DOMTokenList.prototype[method] = function(token) {
          var i, len = arguments.length;

          for (i = 0; i < len; i++) {
            token = arguments[i];
            original.call(this, token);
          }
        };
      };
      createMethod('add');
      createMethod('remove');
    }

    testElement.classList.toggle("c3", false);

    // Polyfill for IE 10 and Firefox <24, where classList.toggle does not
    // support the second argument.
    if (testElement.classList.contains("c3")) {
      var _toggle = DOMTokenList.prototype.toggle;

      DOMTokenList.prototype.toggle = function(token, force) {
        if (1 in arguments && !this.contains(token) === !force) {
          return force;
        } else {
          return _toggle.call(this, token);
        }
      };

    }

    testElement = null;
  }());

  }

  }



/***/ },
/* 12 */
/***/ function(module, exports) {

  // Extend TableSort with MCAS performance levels
  (function(){

    function clean_cell(i) {
      return $.trim(i);
    }

    var performance_levels = ["W", "NI", "P", "A"];

    compareMcasLevel = function(a, b) {
      var clean_a = clean_cell(a);
      var clean_b = clean_cell(b);
      var a_index = performance_levels.indexOf(clean_a);
      var b_index = performance_levels.indexOf(clean_b);
      return a_index - b_index;
    };

    Tablesort.extend('mcas_sort', function(item) {
      cleaned_cell = clean_cell(item);
      performance_levels.indexOf(cleaned_cell) > 0;
    }, function(a, b) {
        return compareMcasLevel(b, a);
    });

  }());


/***/ },
/* 13 */
/***/ function(module, exports) {

  (function(){
    var cleanNumber = function(i) {
      return i.replace(/[^\-?0-9.]/g, '');
    },

    compareNumberReverse = function(a, b) {
      a = parseFloat(a);
      b = parseFloat(b);

      a = isNaN(a) ? 0 : a;
      b = isNaN(b) ? 0 : b;

      return b - a;
    };

    Tablesort.extend('reverse_number', function(item) {
      return item.match(/^-?[£\x24Û¢´€]?\d+\s*([,\.]\d{0,2})/) || // Prefixed currency
        item.match(/^-?\d+\s*([,\.]\d{0,2})?[£\x24Û¢´€]/) || // Suffixed currency
        item.match(/^-?(\d)*-?([,\.]){0,1}-?(\d)+([E,e][\-+][\d]+)?%?$/); // Number
    }, function(a, b) {
      a = cleanNumber(a);
      b = cleanNumber(b);

      return compareNumberReverse(b, a);
    });
  }());


/***/ },
/* 14 */
/***/ function(module, exports) {

  (function(root) {

    var AttendanceChart = function initializeAttendanceChart (series, categories) {
      this.title = 'absences or tardies';
      this.series = series;
      this.categories = categories;
    };

    AttendanceChart.fromChartData = function attendanceChartFromChartData(chartData) {
      var datums = [
        new ProfileChartData("Absences", chartData.data('attendance-series-absences')).toChart(),
        new ProfileChartData("Tardies", chartData.data('attendance-series-tardies')).toChart()
      ];
      return new AttendanceChart(datums, chartData.data('attendance-events-school-years'));
    };

    AttendanceChart.prototype.toHighChart = function attendanceChartToHighChart () {
      return $.extend({}, ProfileChartSettings.base_options, {
        xAxis: $.extend({}, ProfileChartSettings.x_axis_schoolyears, {
          categories: this.categories
        }),
        yAxis: ProfileChartSettings.default_yaxis,
        series: this.series
      });
    };

    AttendanceChart.prototype.render = function renderAttendanceChart (controller) {
      controller.renderChartOrEmptyView(this);
    };

    root.AttendanceChart = AttendanceChart;

  })(window)


/***/ },
/* 15 */
/***/ function(module, exports) {

  (function(root) {

    var BehaviorChart = function initializeBehaviorChart (series, categories) {
      this.title = "behavior incidents";
      this.series = series;
      this.categories = categories;
    };

    BehaviorChart.fromChartData = function behaviorChartFromChartData (chartData) {
      var data = [
        new ProfileChartData("Behavior Incidents", chartData.data('behavior-series')).toChart()
      ];
      return new BehaviorChart(data, chartData.data('behavior-series-school-years'));
    };

    BehaviorChart.prototype.toHighChart = function behaviorChartToHighChart () {
      return $.extend({}, ProfileChartSettings.base_options, {
        xAxis: $.extend({}, ProfileChartSettings.x_axis_schoolyears, {
          categories: this.categories
        }),
        yAxis: ProfileChartSettings.default_yaxis,
        series: this.series
      });
    };

    BehaviorChart.prototype.render = function renderBehaviorChart (controller) {
      controller.renderChartOrEmptyView(this);
    };

    root.BehaviorChart = BehaviorChart;

  })(window)


/***/ },
/* 16 */
/***/ function(module, exports) {

  (function(root) {

    var EmptyView = function initializeEmptyView(studentName, dataType) {
      this.studentName = studentName;
      this.dataType = dataType;
    };

    EmptyView.canRender = function(data) {
      return data.series.every(function(element) {
        return element.data.every(function(el) {
          return el == 0;
        });
      });
    };

    EmptyView.prototype.render = function() {
      var view = {
        name: this.studentName,
        data_type: this.dataType
      }

      view.happy_message = this.dataType === 'absences or tardies' || this.dataType === 'behavior incidents';

      var zero_case_template = $('#zero-case-template').html();
      var zeroHtml = Mustache.render(zero_case_template, view);
      $('#chart').html(zeroHtml);
    };

    root.EmptyView = EmptyView;

  })(window)


/***/ },
/* 17 */
/***/ function(module, exports) {

  (function(root) {

    var InterventionPlotBand = function initializeInterventionPlotBand (intervention) {
      this.name = intervention.name;
      this.from = InterventionPlotBand.toHighChartsDate(intervention.start_date);
      this.to = InterventionPlotBand.toHighChartsDate(intervention.end_date);
    }

    InterventionPlotBand.toHighChartsDate = function interventionDatesToHighChartsDate (date) {
      return Date.UTC(date['year'],
               date['month'] - 1,   // JavaScript months start with 0, Ruby months start with 1
               date['day'])
    }

    InterventionPlotBand.prototype.toHighCharts = function interventionToHighCharts () {
      return $.extend({},
        InterventionPlotBand.base_options, {
          from: this.from,
          to: this.to,
        }
      );
    }

    InterventionPlotBand.base_options = {
      color: 'rgba(248,231,28,.23)',
      zIndex: 2,
    }

    root.InterventionPlotBand = InterventionPlotBand;

  })(window)


/***/ },
/* 18 */
/***/ function(module, exports) {

  (function(root) {

    var McasGrowthChart = function initializeMcasGrowthChart (series, intervention_plot_bands) {
      this.title = 'MCAS growth';
      this.series = series;
      this.x_axis_bands = intervention_plot_bands;
    };

    McasGrowthChart.fromChartData = function mcasGrowthChartFromChartData(chartData) {
      var datums = [];
      var math_growth_data = chartData.data('mcas-series-math-growth');
      var ela_growth_data = chartData.data('mcas-series-ela-growth');
      var interventions = chartData.data('interventions');

      if (math_growth_data !== null) {
        var math_growth = new ProfileChartData("Math growth score", math_growth_data).toDateChart();
        datums.push(math_growth);
      }

      if (ela_growth_data !== null) {
        var ela_growth = new ProfileChartData("English growth score", ela_growth_data).toDateChart();
        datums.push(ela_growth);
      }

      if (interventions) {
        var intervention_plot_bands = interventions.map(function(i) {
          return new InterventionPlotBand(i).toHighCharts();
        });

        var interventions_label = new ProfileChartData("Interventions", [], '#FDFDC9');
        datums.push(interventions_label);
      }

      return new McasGrowthChart(datums, intervention_plot_bands);
    };

    McasGrowthChart.prototype.toHighChart = function mcasChartToHighChart () {
      return $.extend({}, ProfileChartSettings.base_options, {
        xAxis: $.extend({}, ProfileChartSettings.x_axis_datetime, {
          plotLines: this.x_axis_bands
        }),
        yAxis: $.extend({}, ProfileChartSettings.percentile_yaxis, {
          plotLines: ProfileChartSettings.benchmark_plotline
        }),
        series: this.series
      });
    };

    McasGrowthChart.prototype.render = function renderMcasGrowthChart (controller) {
      controller.renderChartOrEmptyView(this);
    };

    root.McasGrowthChart = McasGrowthChart;

  })(window)


/***/ },
/* 19 */
/***/ function(module, exports) {

  (function(root) {

    var McasScaledChart = function initializeMcasScaledChart (series, intervention_plot_bands) {
      this.title = 'MCAS score';
      this.series = series;
      this.x_axis_bands = intervention_plot_bands;
    };

    McasScaledChart.fromChartData = function mcasScaledChartFromChartData(chartData) {
      var datums = [];
      var math_scaled_data = chartData.data('mcas-series-math-scaled');
      var ela_scaled_data = chartData.data('mcas-series-ela-scaled');
      var interventions = chartData.data('interventions');

      if (math_scaled_data !== null) {
        var math_scaled = new ProfileChartData("Math scale score", math_scaled_data).toDateChart();
        datums.push(math_scaled);
      }

      if (ela_scaled_data !== null) {
        var ela_scaled = new ProfileChartData("English scale score", ela_scaled_data).toDateChart();
        datums.push(ela_scaled);
      }

      if (interventions) {
        var intervention_plot_bands = interventions.map(function(i) {
          return new InterventionPlotBand(i).toHighCharts();
        })

        var interventions_label = new ProfileChartData("Interventions", [], '#FDFDC9');
        datums.push(interventions_label);
      }

      return new McasScaledChart(datums, intervention_plot_bands);
    };

    McasScaledChart.prototype.toHighChart = function mcasChartToHighChart () {
      return $.extend({}, ProfileChartSettings.base_options, {
        xAxis: $.extend({}, ProfileChartSettings.x_axis_datetime, {
          plotLines: this.x_axis_bands
        }),
        yAxis: $.extend({}, ProfileChartSettings.default_mcas_score_yaxis, {
          plotLines: ProfileChartSettings.mcas_level_bands
        }),
        series: this.series
      });
    };

    McasScaledChart.prototype.render = function renderMcasScaledChart (controller) {
      controller.renderChartOrEmptyView(this);
    };

    root.McasScaledChart = McasScaledChart;

  })(window)


/***/ },
/* 20 */
/***/ function(module, exports) {

  (function(root) {

    var ProfileChartSettings = {};

    ProfileChartSettings.base_options = {
      chart: {
        renderTo: 'chart',
        type: 'areaspline',
        spacingBottom: 0,
        spacingTop: 0,
        spacingLeft: 0,
        spacingRight: 0
      },
      title: {
        text: '',
        style: {
          display: 'none'
        }
      },
      subtitle: {
        text: '',
        style: {
          display: 'none'
        }
      },
      legend: {
        layout: 'horizontal',
        align: 'right',
        verticalAlign: 'top',
        itemStyle: {
          font: '12px "Open Sans", sans-serif !important;',
          color: '#555555'
        }
      },
      xAxis: {
        categories: [],
        dateTimeLabelFormats: {}
      },
      tooltip: {
        shared: true
      },
      credits: {
        enabled: false
      },
      plotOptions: {
        areaspline: {
          fillOpacity: 0
        }
      }
    }

    ProfileChartSettings.x_axis_datetime = {
      type: 'datetime',
      dateTimeLabelFormats: {
          day: '%e of %b'
      }
    }

    ProfileChartSettings.x_axis_schoolyears = {
      type: 'linear',
      categories: [],
      dateTimeLabelFormats: {}
    }

    ProfileChartSettings.default_yaxis = {
      allowDecimals: false,
      title: {
        text: '',
        style: {
          display: 'none'
        }
      },
      plotLines: [],
      min: undefined,
      max: undefined
    }

    ProfileChartSettings.mcas_level_bands = [{
      color: '#E7EBED',
      from: 200,
      to: 218,
      label: {
        text: 'Warning',
        align: 'left',
        style: {
          color: '#999999'
        }
      }
    }, {
      color: '#F6F7F8',
      from: 220,
      to: 238,
      label: {
        text: 'Needs Improvement',
        align: 'left',
        style: {
          color: '#999999'
        }
      }
    }, {
      color: '#E7EBED',
      from: 240,
      to: 258,
      label: {
        text: 'Proficient',
        align: 'left',
        style: {
          color: '#999999'
        }
      }
    }, {
      color: '#F6F7F8',
      from: 260,
      to: 280,
      label: {
        text: 'Advanced',
        align: 'left',
        style: {
          color: '#999999'
        }
      }
    }]

    ProfileChartSettings.default_mcas_score_yaxis = {
      allowDecimals: false,
      title: {
        text: '',
        style: {
          display: 'none'
        }
      },
      plotLines: [],
      min: 200,
      max: 280
    }

    ProfileChartSettings.percentile_yaxis =  {
      allowDecimals: false,
      title: {
        text: '',
        style: {
          display: 'none'
        }
      },
      plotLines: [],
      min: 0,
      max: 100
    }

    ProfileChartSettings.benchmark_plotline = [{
      color: '#B90504',
      width: 1,
      zIndex: 3,
      value: 50,
      label: {
        text: 'Average baseline: 50th percentile',
        align: 'center',
        style: {
          color: '#999999'
        }
      }
    }, {
      color: '#B90504',
      width: 1,
      zIndex: 3,
      value: 40,
      label: {
        text: 'Warning: Less than 40th percentile',
        align: 'center',
        style: {
          color: '#999999'
        }
      }
    }];

    root.ProfileChartSettings = ProfileChartSettings

  })(window)


/***/ },
/* 21 */
/***/ function(module, exports) {

  (function(root) {

    var RosterChart = function initializeRosterChart (series) {
      this.series = series;
    }

    RosterChart.fromChartData = function (chartData) {

      var risk_level_null = {
        name: 'Risk level N/A',
        data: [chartData.data('null')],
        color: '#999'
      };

      var risk_level_zero = {
        name: 'Risk level 0',
        data: [chartData.data('0')],
        color: '#BBD86B'
      };

      var risk_level_one = {
        name: 'Risk level 1',
        data: [chartData.data('1')],
        color: '#62C186'
      };

      var risk_level_two = {
        name: 'Risk level 2',
        data: [chartData.data('2')],
        color: '#FFCB08'
      };

      var risk_level_three = {
        name: 'Risk level 3',
        data: [chartData.data('3')],
        color: '#F15A3D'
      };

      var risk_levels = [ risk_level_null, risk_level_zero,
        risk_level_one, risk_level_two, risk_level_three ];
      var series = [];

      for(i = 0; i < risk_levels.length; i++) {
        var risk_level = risk_levels[i];
        if (risk_level.data[0] > 0) {
          series.push(risk_level);
        }
      }

      return new RosterChart(series)
    };

    RosterChart.prototype.toHighChart = function rosterChartToHighChart () {
      var risk_levels_with_students = this.series.filter(function(risk_level) {
        return risk_level.data[0] > 0
      });

      risk_levels_with_students[0].borderRadiusTopLeft = 8;
      risk_levels_with_students[0].borderRadiusTopRight = 8;
      risk_levels_with_students[risk_levels_with_students.length - 1].borderRadiusBottomRight = 8;
      risk_levels_with_students[risk_levels_with_students.length - 1].borderRadiusBottomLeft = 8;

      var options = RosterChartSettings;
      options.series = this.series;
      return options;
    }

    RosterChart.prototype.render = function renderRosterChart () {
      return new Highcharts.Chart(this.toHighChart());
    }

    root.RosterChart = RosterChart;

  })(window)


/***/ },
/* 22 */
/***/ function(module, exports) {

  (function(root) {

    root.RosterChartSettings = {
      chart: {
        spacingBottom: 0,
        spacingTop: 0,
        spacingLeft: 0,
        spacingRight: 0,
        marginBottom: -20,
        marginTop: -20,
        marginLeft: 0,
        marginRight: 0,
        renderTo: 'chart',
              type: 'bar'
          },
          title: {
          text: '',
          style: {
              display: 'none'
          },
      },
      subtitle: {
          text: '',
            style: {
              display: 'none'
            }
          },
      legend: {
        reversed: true,
        layout: 'horizontal',
        align: 'right',
        verticalAlign: 'top',
        itemStyle: {
          font: '12px "Open Sans", sans-serif !important;',
          color: '#555555'
        }
      },
      xAxis: {
          categories: ['Risk levels'],
          lineWidth: 0,
          minorGridLineWidth: 0,
          lineColor: 'transparent',
          gridLineColor: 'transparent',
          labels: {
            enabled: false
          },
          minorTickLength: 0,
          tickLength: 0
      },
      yAxis: {
          lineWidth: 0,
          minorGridLineWidth: 0,
          lineColor: 'transparent',
          gridLineColor: 'transparent',
          labels: {
            enabled: false
          },
          minorTickLength: 0,
          tickLength: 0,
          style: {
            display: 'none'
          },
          categories: [''],
          title: {
              text: null
          },
          labels: {
           enabled:false
          }
      },
      credits: {
          enabled: false
      },
      plotOptions: {
          bar: {
              stacking: 'percent'
          }
      },
      tooltip: {
          pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',
          shared: true,
          followPointer: true,
          headerFormat: ''
      }
    }

  })(window)


/***/ },
/* 23 */
/***/ function(module, exports) {

  (function(root) {

    var StarChart = function initializeStarChart (series, intervention_plot_bands) {
      this.title = 'STAR';
      this.series = series;
      this.x_axis_bands = intervention_plot_bands;
    };

    StarChart.fromChartData = function mcasScaledChartFromChartData(chartData) {
      var datums = [];
      var math_data = chartData.data('star-series-math-percentile');
      var reading_data = chartData.data('star-series-reading-percentile');
      var interventions = chartData.data('interventions');

      if (math_data !== null) {
        var math = new ProfileChartData("Math percentile rank", math_data).toDateChart();
        datums.push(math);
      }

      if (reading_data !== null) {
        var reading = new ProfileChartData("English percentile rank", reading_data).toDateChart();
        datums.push(reading);
      }

      if (interventions) {
        var intervention_plot_bands = interventions.map(function(i) {
          return new InterventionPlotBand(i).toHighCharts();
        });

        var interventions_label = new ProfileChartData("Interventions", [], '#FDFDC9');
        datums.push(interventions_label);
      }

      return new StarChart(datums, intervention_plot_bands);
    };

    StarChart.prototype.toHighChart = function mcasChartToHighChart () {
      return $.extend({}, ProfileChartSettings.base_options, {
        xAxis: $.extend({}, ProfileChartSettings.x_axis_datetime, {
          plotLines: this.x_axis_bands
        }),
        yAxis: $.extend({}, ProfileChartSettings.percentile_yaxis, {
          plotLines: ProfileChartSettings.benchmark_plotline
        }),
        series: this.series
      });
    };

    StarChart.prototype.render = function renderStarChart (controller) {
      controller.renderChartOrEmptyView(this);
    };

    root.StarChart = StarChart;

  })(window)


/***/ },
/* 24 */
/***/ function(module, exports) {

  $(function() {

    if ($('body').hasClass('homerooms') && $('body').hasClass('show')) {

      // Initialize table sort on roster table
      var table = document.getElementById('roster-table');
      new Tablesort(table, { descending: false });

      // Initialize table sort on roster table
      $('#homeroom-select').bind('change', function() {
        window.location.pathname = '/homerooms/' + $(this).val();
      });

      function updateColumns () {
        columns_selected_inputs = $("#column-listing").find("input:checked");
        columns_selected = $.map(columns_selected_inputs, function(c) {
          return c.name;
        });
        for (var column in roster_columns) {
          if (columns_selected.indexOf(column) === -1) {
            $('.' + column).hide();
          } else {
            $('.' + column).show();
          }
        }
      }
      updateColumns();

      function updateCookies () {
        Cookies.set("columns_selected", columns_selected);
      }

      // Show/hide column groups
      var roster_columns = {
          'name': 'Name',
          'risk': 'Risk',
          'program': 'Program',
          'sped': 'SPED & Disability',
          'language': 'Language',
          'free-reduced': 'Free/Reduced Lunch',
          'star_math': 'STAR Math',
          'star_reading': 'STAR Reading',
          'mcas_math': 'MCAS Math',
          'mcas_ela': 'MCAS ELA',
          'access': 'Access',
          'dibels': 'DIBELS',
          'interventions': 'Interventions'
          // 'attendance': 'Attendance',
          // 'discipline': 'Discipline',
      };

      var columns_selected = Cookies.getJSON("columns_selected");
      var columnTemplate = $("#column-template").remove();

      $.each(roster_columns, function(key, column){
        var newColumnTemplate = columnTemplate.clone(),
        isselected = columns_selected.indexOf(key) !== -1;
        newColumnTemplate
          .find("input")
            .attr("name", key)
            .attr("checked", isselected)
            .on("click", function(event) {
              event.stopPropagation();
              updateColumns();
            }).on("change", updateCookies)
          .end()
          .find("label")
            .text(column)
          .end()
          .appendTo("#column-listing")
      });

      // "Click off" for column select
      $("body").click(function() {
        $('#column-picker').hide();
      });

      $("#column-picker").click(function() {
        event.stopPropagation();
      });

      $('#column-picker-toggle').click(function(event) {
        event.stopPropagation();
        $('#column-picker').show();
      });

      // Risk level tooltip for overall roster table
      var roster_rooltip_template = $('#roster-tooltip-template').html();
      var rendered = Mustache.render(roster_rooltip_template);

      $('#roster-tooltip').tooltipster({
        content: rendered,
        position: 'bottom-right',
        contentAsHTML: true
      });

      // Tooltips for individual student risk levels

      function getRiskLevelToolTip (studentId) {
        var tooltip = $(".risk-level-tooltip[data-student-id='" + studentId + "']").html();
        var mustache_rendered = Mustache.render(tooltip);
        return mustache_rendered;
      }

      $.each($('.risk-tooltip-circle'), function() {
        $this = $(this)
        var student_id = parseInt($this.data('student-id'))
        var tooltip = getRiskLevelToolTip(student_id)
        $this.tooltipster({
          content: tooltip,
          position: 'bottom',
          contentAsHTML: true
        });
      });

      // Turn table rows into links to student profiles
      $('tbody td').click(function () {
        if (!$(this).hasClass('bulk-intervention')) {
          location.href = $(this).attr('href');
        }
      });

      // Make Risk Level summary chart

      var chartData = $('#chart-data');
      RosterChart.fromChartData(chartData).render();

    }

  });


/***/ },
/* 25 */
/***/ function(module, exports) {

  $(function() {

    if ($('body').hasClass('homerooms') && $('body').hasClass('show')) {

      function toggleBulkInterventionsButton () {
        var student_count = window.bulkInterventionStudents().length;
        if (student_count > 0) {
          $('#assign-bulk-interventions').html("+ " + student_count);
          $('#assign-bulk-interventions').show();
        } else {
          $('#assign-bulk-interventions').hide();
        }
      }

      $('.bulk-intervention-checkbox').on("change", toggleBulkInterventionsButton);

      window.bulkInterventionStudents = function () {
        return $('.bulk-intervention-checkbox').filter(function() {
          return this.checked;
        }).map(function() {
          return $(this).data('student-id');
        }).toArray();
      }

      $('#assign-bulk-interventions').click(function(e) {
        var url = $(this).attr('href');
        var dialog_form = $('<div id="dialog-form"><h1>Loading form...</h1></div>').dialog({
          autoOpen: false,
          hide: true,
          width: 520,
          modal: true,
          open: function() {
            return $(this).load(url + ' #content', function() {
              var student_ids_to_assign = window.bulkInterventionStudents();
              var number_of_students = String(student_ids_to_assign.length);
              if (student_ids_to_assign.length > 0) {
                var hidden_student_fields = student_ids_to_assign.map(function(id) {
                  return '<input name="bulk_intervention_assignment[student_ids][]" ' +
                                'value="' + String(id) + '" type="hidden" />'
                }).join('');
              } else {
                var hidden_student_fields = '<input name="bulk_intervention_assignment[student_ids][]" ' +
                              'value="" type="hidden" />'
              }
              return $(this).find('#students-count').html(number_of_students).end()
                            .find('#student-ids').html(hidden_student_fields).end()
                            .find('.datepicker').datepicker(window.datepicker_options).end()
                            .dialog({ position:
                              { my: "center", at: "center", of: window }  // Recenter post-AJAX load
                            });
            });
          },
          close: function() {
            $('#dialog-form').remove();
          }
        });
        dialog_form.dialog('open');
        e.preventDefault();
      });

      // Make the 'cancel' button work
      $(document).on("click", "#dialog-form .btn.cancel-btn", function() {
        $('.bulk-intervention-checkbox').prop('checked', false);
        toggleBulkInterventionsButton();
        $('#dialog-form').dialog('close');
      });

    }

  });


/***/ },
/* 26 */
/***/ function(module, exports) {

  (function(root) {

    var ProfileChartData = function initializeProfileChartData (name, data, color) {
      this.name = name;
      this.data = data;
      this.color = color;
    };

    ProfileChartData.prototype.highChartDates = function profileHighChartDates() {
      return this.data.map(function(element) {
        return [
          Date.UTC(element[0],
                   element[1] - 1,   // JavaScript months start with 0, Ruby months start with 1
                   element[2]),
          element[3]
        ];
      });
    }

    ProfileChartData.prototype.toChart = function toChart() {
      return {
        name: this.name,
        data: this.data
      };
    };

    ProfileChartData.prototype.toDateChart = function toDateChart() {
      return {
        name: this.name,
        data: this.highChartDates()
      };
    }

    var ProfileController = function initializeProfileController () {
      this.options = $.extend({}, ProfileChartSettings.base_options);
    };

    ProfileController.prototype.studentName = function storeStudentName () {
      return $("#student-name").text();
    };

    ProfileController.prototype.renderChartOrEmptyView = function profileRenderChartOrEmptyView (chart) {
      if (EmptyView.canRender(chart)) {
        new EmptyView(this.studentName, chart.title).render();
      } else {
        new Highcharts.Chart(chart.toHighChart());
      }
    }

    ProfileController.prototype.setChart = function profileSetChart (value) {
      var chart_data = $("#chart-data");
      if (value == "attendance") {
        AttendanceChart.fromChartData(chart_data).render(this);
        return;
      } else if (value == "behavior") {
        BehaviorChart.fromChartData(chart_data).render(this);
        return;
      } else if (value == "mcas-growth") {
        McasGrowthChart.fromChartData(chart_data).render(this);
        return;
      } else if (value == "mcas-scaled") {
        McasScaledChart.fromChartData(chart_data).render(this);
        return;
      } else if (value == "star") {
        StarChart.fromChartData(chart_data).render(this);
        return;
      }
    }

    ProfileController.prototype.onChartChange = function profileChartDataChange() {
      var selVal = $("#chart-type").val();
      this.setChart(selVal);
    }

    ProfileController.prototype.show = function renderProfileController() {
      var chart_start = $("#chart-start").data('start');
      var chart_options = ["attendance", "behavior", "mcas-growth", "mcas-scaled", "star"];
      if (chart_options.indexOf(chart_start) !== -1) {
        this.setChart(chart_start);
      } else {
        this.setChart("mcas-growth");
      }

      // Bind onChartChange to this instance of ProfileController
      var self = this;
      $("#chart-type").on('change', function() {
        self.onChartChange();
      });
    }

    root.ProfileController = ProfileController;
    root.ProfileChartData = ProfileChartData;

  })(window)

  $(function() {

    if ($('body').hasClass('students') && $('body').hasClass('show')) {

      new window.ProfileController().show();
      var InterventionsController = new window.ProfileInterventionsController();

      $("#open-intervention-form").click(function() {
        InterventionsController.showInterventionForm();
      });

      $("#close-intervention-form").click(function() {
        InterventionsController.hideInterventionForm();
      });

      $('body').on('click', '.intervention-cell', function() {
        InterventionsController.selectIntervention($(this));
      });

      // Tabs
      $('.tab-select').click(function() {
        var tab = $(this).data('tab');
        $('.tab').hide();
        $('.tab-select').removeClass('selected');
        $(this).addClass('selected');
        $('#' + tab).show();
      });

      $('.add-progress-note-area').hide();

      $('body').on('click', '.add-progress-note', function() {
        $(this).parent().children('.add-progress-note-area').show();
        $(this).hide();
      });

      $('body').on('click', '.cancel-progress-note', function() {
        InterventionsController.clearProgressNoteForm();
      });

      // Risk level tooltip
      var risk_level_tooltip = $('#risk-level-tooltip-template').html();
      var rendered = Mustache.render(risk_level_tooltip);

      $('#profile-risk-level').tooltipster({
        content: rendered,
        position: 'bottom-right',
        contentAsHTML: true
      });
    }
  });


/***/ },
/* 27 */
/***/ function(module, exports) {

  (function(root) {

    var ProfileInterventionsController = function () {
      $('#new_intervention').hide();                     // form initializes hidden
      $('.intervention-detail').hide();                  // so do all but first intervention detail
      $('.intervention-detail').first().show();
      if ($('.intervention-cell').length === 0) {
        $('#interventions-tab .right-panel').hide();     // nothing to see here
        $('#open-intervention-form').addClass('solo');
      } else {
        $('.intervention-cell').first().addClass('activated');
      }
    }

    ProfileInterventionsController.prototype.showInterventionForm = function () {
      $('#new_intervention').show();
      $('#interventions-tab .right-panel').show();
      $('#open-intervention-form').addClass('selected');
      $('.intervention-detail').hide();
      $('.intervention-cell').removeClass('activated');
    }

    ProfileInterventionsController.prototype.hideInterventionForm = function () {
      $('#new_intervention').hide();
      $('#open-intervention-form').removeClass('selected');
      $('.intervention-detail').first().show();
      $('.intervention-cell').first().addClass('activated');
      this.clearInterventionForm();
    }

    ProfileInterventionsController.prototype.clearInterventionForm = function () {
      $('#new_intervention').hide();
      $('#interventions-tab form textarea').val('');
      $('#interventions-tab form .datepicker').val('');
      $('#intervention_intervention_type_id :nth-child(1)').prop('selected', true);
    };

    ProfileInterventionsController.prototype.selectIntervention = function (intervention) {
      $('#open-intervention-form').removeClass('selected');
      $('#new_intervention').hide();
      $('.intervention-cell').removeClass('activated');
      intervention.addClass('activated');
      $('.intervention-detail').hide();
      var detail = $('.intervention-detail[data-id="' + intervention.data('id') + '"]');
      detail.show();
    }

    ProfileInterventionsController.prototype.clearProgressNoteForm = function () {
      $('.add-progress-note-area').hide();
      $('.add-progress-note').show();
      $('.add-progress-note-area form textarea').val('');
      $('#progress_note_educator_id :nth-child(1)').prop('selected', true);
    }

    root.ProfileInterventionsController = ProfileInterventionsController;

  })(window)


/***/ },
/* 28 */
/***/ function(module, exports) {

  (function(root) {

    var SessionTimeoutWarning = function () {}

    SessionTimeoutWarning.prototype.count = function () {
      root.setTimeout(this.show, 780000);  // count up to 13 minutes
    };

    SessionTimeoutWarning.prototype.show = function () {
      $('#renew-session').slideDown();
    };

    root.SessionTimeoutWarning = SessionTimeoutWarning;

  })(window)

  $(function() {

    if ($('body').hasClass('educator-signed-in')) {
      var warning = new SessionTimeoutWarning;
      warning.count();
    }

    $("#renew-sesion-link").click(function () {
      $.ajax({
        url: '/educators/reset',
        success: function () {
          $('#renew-session').slideUp();
          warning.count();   // Resent timeout count
        }
      });
    });
  });


/***/ },
/* 29 */
/***/ function(module, exports) {

  $(function() {
    if ($('body').hasClass('students') || $('body').hasClass('homerooms')) {

      window.datepicker_options = {
        showOn: "button",
        buttonImage: $("#calendar-icon-path").data('path'),
        buttonImageOnly: true,
        buttonText: "Select date",
        dateFormat: 'yy-mm-dd',
        minDate: 0    // intervention end date cannot be earlier than today
      }

      $(".datepicker").datepicker(window.datepicker_options);

    }
  });

/***/ },
/* 30 */
/***/ function(module, exports) {

  $(function() {

    $("#student-searchbar").autocomplete({
      source: function(request, response) {
        $.ajax({
          url: "/students/names",
          data: {
            q: request.term
          },
          success: function(data) {
            response(data);
          }
        });
      },
      focus: function(e, ui) {
        e.preventDefault();
        $(this).val(ui.item.label);
      },
      select: function(e, ui) {
        e.preventDefault();
        window.location.pathname = '/students/' + ui.item.value;
      },
    });

  });


/***/ }
/******/ ]);